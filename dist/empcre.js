// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };
  Module['load'] = function load(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function print(x) {
      console.log(x);
    };
    Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + Pointer_stringify(code) + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 7432;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
/* memory initializer */ allocate([0,0,0,0,255,255,255,255,149,0,0,0,4,0,0,0,255,255,255,255,149,0,0,0,6,0,0,0,158,0,0,0,255,255,255,255,6,0,0,0,156,0,0,0,255,255,255,255,1,0,0,0,157,0,0,0,255,255,255,255,4,0,0,0,157,0,0,0,255,255,255,255,5,0,0,0,150,0,0,0,151,0,0,0,4,0,0,0,152,0,0,0,153,0,0,0,4,0,0,0,154,0,0,0,155,0,0,0,0,0,0,0,0,77,65,82,75,0,65,67,67,69,80,84,0,67,79,77,77,73,84,0,70,0,70,65,73,76,0,80,82,85,78,69,0,83,75,73,80,0,84,72,69,78,0,0,0,0,0,0,92,98,40,63,61,92,119,41,0,0,0,0,0,0,0,0,92,98,40,63,60,61,92,119,41,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,97,108,112,104,97,0,108,111,119,101,114,0,117,112,112,101,114,0,97,108,110,117,109,0,97,115,99,105,105,0,98,108,97,110,107,0,99,110,116,114,108,0,100,105,103,105,116,0,103,114,97,112,104,0,112,114,105,110,116,0,112,117,110,99,116,0,115,112,97,99,101,0,119,111,114,100,0,120,100,105,103,105,116,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,4,6,0,0,160,0,0,0,64,0,0,0,254,255,255,255,128,0,0,0,255,255,255,255,0,0,0,0,96,0,0,0,255,255,255,255,0,0,0,0,160,0,0,0,255,255,255,255,2,0,0,0,224,0,0,0,32,1,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,32,1,0,0,255,255,255,255,0,0,0,0,64,0,0,0,255,255,255,255,0,0,0,0,192,0,0,0,255,255,255,255,0,0,0,0,224,0,0,0,255,255,255,255,0,0,0,0,0,1,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,160,0,0,0,255,255,255,255,0,0,0,0,32,0,0,0,255,255,255,255,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,43,0,44,0,45,0,0,0,0,0,0,55,0,56,0,57,0,58,0,0,0,0,0,0,68,0,69,0,70,0,71,0,0,0,0,0,0,81,0,82,0,83,0,84,0,0,0,0,0,0,94,0,95,0,96,0,97,0,0,0,0,0,0,106,0,107,0,108,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,255,255,252,255,242,255,250,255,231,255,0,0,254,255,238,255,0,0,0,0,253,255,0,0,0,0,244,255,0,0,241,255,230,255,239,255,248,255,0,0,0,0,236,255,246,255,234,255,0,0,233,255,91,0,92,0,93,0,94,0,95,0,96,0,7,0,251,255,0,0,249,255,27,0,12,0,0,0,237,255,0,0,0,0,228,255,0,0,0,0,10,0,0,0,240,255,0,0,13,0,247,255,9,0,0,0,235,255,245,255,0,0,0,0,232,255,0,0,110,111,32,101,114,114,111,114,0,92,32,97,116,32,101,110,100,32,111,102,32,112,97,116,116,101,114,110,0,92,99,32,97,116,32,101,110,100,32,111,102,32,112,97,116,116,101,114,110,0,117,110,114,101,99,111,103,110,105,122,101,100,32,99,104,97,114,97,99,116,101,114,32,102,111,108,108,111,119,115,32,92,0,110,117,109,98,101,114,115,32,111,117,116,32,111,102,32,111,114,100,101,114,32,105,110,32,123,125,32,113,117,97,110,116,105,102,105,101,114,0,110,117,109,98,101,114,32,116,111,111,32,98,105,103,32,105,110,32,123,125,32,113,117,97,110,116,105,102,105,101,114,0,109,105,115,115,105,110,103,32,116,101,114,109,105,110,97,116,105,110,103,32,93,32,102,111,114,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,0,105,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,32,105,110,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,0,114,97,110,103,101,32,111,117,116,32,111,102,32,111,114,100,101,114,32,105,110,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,0,110,111,116,104,105,110,103,32,116,111,32,114,101,112,101,97,116,0,111,112,101,114,97,110,100,32,111,102,32,117,110,108,105,109,105,116,101,100,32,114,101,112,101,97,116,32,99,111,117,108,100,32,109,97,116,99,104,32,116,104,101,32,101,109,112,116,121,32,115,116,114,105,110,103,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,117,110,101,120,112,101,99,116,101,100,32,114,101,112,101,97,116,0,117,110,114,101,99,111,103,110,105,122,101,100,32,99,104,97,114,97,99,116,101,114,32,97,102,116,101,114,32,40,63,32,111,114,32,40,63,45,0,80,79,83,73,88,32,110,97,109,101,100,32,99,108,97,115,115,101,115,32,97,114,101,32,115,117,112,112,111,114,116,101,100,32,111,110,108,121,32,119,105,116,104,105,110,32,97,32,99,108,97,115,115,0,109,105,115,115,105,110,103,32,41,0,114,101,102,101,114,101,110,99,101,32,116,111,32,110,111,110,45,101,120,105,115,116,101,110,116,32,115,117,98,112,97,116,116,101,114,110,0,101,114,114,111,102,102,115,101,116,32,112,97,115,115,101,100,32,97,115,32,78,85,76,76,0,117,110,107,110,111,119,110,32,111,112,116,105,111,110,32,98,105,116,40,115,41,32,115,101,116,0,109,105,115,115,105,110,103,32,41,32,97,102,116,101,114,32,99,111,109,109,101,110,116,0,112,97,114,101,110,116,104,101,115,101,115,32,110,101,115,116,101,100,32,116,111,111,32,100,101,101,112,108,121,0,114,101,103,117,108,97,114,32,101,120,112,114,101,115,115,105,111,110,32,105,115,32,116,111,111,32,108,97,114,103,101,0,102,97,105,108,101,100,32,116,111,32,103,101,116,32,109,101,109,111,114,121,0,117,110,109,97,116,99,104,101,100,32,112,97,114,101,110,116,104,101,115,101,115,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,99,111,100,101,32,111,118,101,114,102,108,111,119,0,117,110,114,101,99,111,103,110,105,122,101,100,32,99,104,97,114,97,99,116,101,114,32,97,102,116,101,114,32,40,63,60,0,108,111,111,107,98,101,104,105,110,100,32,97,115,115,101,114,116,105,111,110,32,105,115,32,110,111,116,32,102,105,120,101,100,32,108,101,110,103,116,104,0,109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,32,111,114,32,110,97,109,101,32,97,102,116,101,114,32,40,63,40,0,99,111,110,100,105,116,105,111,110,97,108,32,103,114,111,117,112,32,99,111,110,116,97,105,110,115,32,109,111,114,101,32,116,104,97,110,32,116,119,111,32,98,114,97,110,99,104,101,115,0,97,115,115,101,114,116,105,111,110,32,101,120,112,101,99,116,101,100,32,97,102,116,101,114,32,40,63,40,0,40,63,82,32,111,114,32,40,63,91,43,45,93,100,105,103,105,116,115,32,109,117,115,116,32,98,101,32,102,111,108,108,111,119,101,100,32,98,121,32,41,0,117,110,107,110,111,119,110,32,80,79,83,73,88,32,99,108,97,115,115,32,110,97,109,101,0,80,79,83,73,88,32,99,111,108,108,97,116,105,110,103,32,101,108,101,109,101,110,116,115,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,116,104,105,115,32,118,101,114,115,105,111,110,32,111,102,32,80,67,82,69,32,105,115,32,99,111,109,112,105,108,101,100,32,119,105,116,104,111,117,116,32,85,84,70,32,115,117,112,112,111,114,116,0,115,112,97,114,101,32,101,114,114,111,114,0,99,104,97,114,97,99,116,101,114,32,118,97,108,117,101,32,105,110,32,92,120,123,125,32,111,114,32,92,111,123,125,32,105,115,32,116,111,111,32,108,97,114,103,101,0,105,110,118,97,108,105,100,32,99,111,110,100,105,116,105,111,110,32,40,63,40,48,41,0,92,67,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,108,111,111,107,98,101,104,105,110,100,32,97,115,115,101,114,116,105,111,110,0,80,67,82,69,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,92,76,44,32,92,108,44,32,92,78,123,110,97,109,101,125,44,32,92,85,44,32,111,114,32,92,117,0,110,117,109,98,101,114,32,97,102,116,101,114,32,40,63,67,32,105,115,32,62,32,50,53,53,0,99,108,111,115,105,110,103,32,41,32,102,111,114,32,40,63,67,32,101,120,112,101,99,116,101,100,0,114,101,99,117,114,115,105,118,101,32,99,97,108,108,32,99,111,117,108,100,32,108,111,111,112,32,105,110,100,101,102,105,110,105,116,101,108,121,0,117,110,114,101,99,111,103,110,105,122,101,100,32,99,104,97,114,97,99,116,101,114,32,97,102,116,101,114,32,40,63,80,0,115,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,115,117,98,112,97,116,116,101,114,110,32,110,97,109,101,32,40,109,105,115,115,105,110,103,32,116,101,114,109,105,110,97,116,111,114,41,0,116,119,111,32,110,97,109,101,100,32,115,117,98,112,97,116,116,101,114,110,115,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,110,97,109,101,0,105,110,118,97,108,105,100,32,85,84,70,45,56,32,115,116,114,105,110,103,0,115,117,112,112,111,114,116,32,102,111,114,32,92,80,44,32,92,112,44,32,97,110,100,32,92,88,32,104,97,115,32,110,111,116,32,98,101,101,110,32,99,111,109,112,105,108,101,100,0,109,97,108,102,111,114,109,101,100,32,92,80,32,111,114,32,92,112,32,115,101,113,117,101,110,99,101,0,117,110,107,110,111,119,110,32,112,114,111,112,101,114,116,121,32,110,97,109,101,32,97,102,116,101,114,32,92,80,32,111,114,32,92,112,0,115,117,98,112,97,116,116,101,114,110,32,110,97,109,101,32,105,115,32,116,111,111,32,108,111,110,103,32,40,109,97,120,105,109,117,109,32,51,50,32,99,104,97,114,97,99,116,101,114,115,41,0,116,111,111,32,109,97,110,121,32,110,97,109,101,100,32,115,117,98,112,97,116,116,101,114,110,115,32,40,109,97,120,105,109,117,109,32,49,48,48,48,48,41,0,114,101,112,101,97,116,101,100,32,115,117,98,112,97,116,116,101,114,110,32,105,115,32,116,111,111,32,108,111,110,103,0,111,99,116,97,108,32,118,97,108,117,101,32,105,115,32,103,114,101,97,116,101,114,32,116,104,97,110,32,92,51,55,55,32,105,110,32,56,45,98,105,116,32,110,111,110,45,85,84,70,45,56,32,109,111,100,101,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,111,118,101,114,114,97,110,32,99,111,109,112,105,108,105,110,103,32,119,111,114,107,115,112,97,99,101,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,112,114,101,118,105,111,117,115,108,121,45,99,104,101,99,107,101,100,32,114,101,102,101,114,101,110,99,101,100,32,115,117,98,112,97,116,116,101,114,110,32,110,111,116,32,102,111,117,110,100,0,68,69,70,73,78,69,32,103,114,111,117,112,32,99,111,110,116,97,105,110,115,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,98,114,97,110,99,104,0,114,101,112,101,97,116,105,110,103,32,97,32,68,69,70,73,78,69,32,103,114,111,117,112,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,0,105,110,99,111,110,115,105,115,116,101,110,116,32,78,69,87,76,73,78,69,32,111,112,116,105,111,110,115,0,92,103,32,105,115,32,110,111,116,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,98,114,97,99,101,100,44,32,97,110,103,108,101,45,98,114,97,99,107,101,116,101,100,44,32,111,114,32,113,117,111,116,101,100,32,110,97,109,101,47,110,117,109,98,101,114,32,111,114,32,98,121,32,97,32,112,108,97,105,110,32,110,117,109,98,101,114,0,97,32,110,117,109,98,101,114,101,100,32,114,101,102,101,114,101,110,99,101,32,109,117,115,116,32,110,111,116,32,98,101,32,122,101,114,111,0,97,110,32,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,102,111,114,32,40,42,65,67,67,69,80,84,41,44,32,40,42,70,65,73,76,41,44,32,111,114,32,40,42,67,79,77,77,73,84,41,0,40,42,86,69,82,66,41,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,32,111,114,32,109,97,108,102,111,114,109,101,100,0,110,117,109,98,101,114,32,105,115,32,116,111,111,32,98,105,103,0,115,117,98,112,97,116,116,101,114,110,32,110,97,109,101,32,101,120,112,101,99,116,101,100,0,100,105,103,105,116,32,101,120,112,101,99,116,101,100,32,97,102,116,101,114,32,40,63,43,0,93,32,105,115,32,97,110,32,105,110,118,97,108,105,100,32,100,97,116,97,32,99,104,97,114,97,99,116,101,114,32,105,110,32,74,97,118,97,83,99,114,105,112,116,32,99,111,109,112,97,116,105,98,105,108,105,116,121,32,109,111,100,101,0,100,105,102,102,101,114,101,110,116,32,110,97,109,101,115,32,102,111,114,32,115,117,98,112,97,116,116,101,114,110,115,32,111,102,32,116,104,101,32,115,97,109,101,32,110,117,109,98,101,114,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,0,40,42,77,65,82,75,41,32,109,117,115,116,32,104,97,118,101,32,97,110,32,97,114,103,117,109,101,110,116,0,116,104,105,115,32,118,101,114,115,105,111,110,32,111,102,32,80,67,82,69,32,105,115,32,110,111,116,32,99,111,109,112,105,108,101,100,32,119,105,116,104,32,85,110,105,99,111,100,101,32,112,114,111,112,101,114,116,121,32,115,117,112,112,111,114,116,0,92,99,32,109,117,115,116,32,98,101,32,102,111,108,108,111,119,101,100,32,98,121,32,97,110,32,65,83,67,73,73,32,99,104,97,114,97,99,116,101,114,0,92,107,32,105,115,32,110,111,116,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,98,114,97,99,101,100,44,32,97,110,103,108,101,45,98,114,97,99,107,101,116,101,100,44,32,111,114,32,113,117,111,116,101,100,32,110,97,109,101,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,117,110,107,110,111,119,110,32,111,112,99,111,100,101,32,105,110,32,102,105,110,100,95,102,105,120,101,100,108,101,110,103,116,104,40,41,0,92,78,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,97,32,99,108,97,115,115,0,116,111,111,32,109,97,110,121,32,102,111,114,119,97,114,100,32,114,101,102,101,114,101,110,99,101,115,0,100,105,115,97,108,108,111,119,101,100,32,85,110,105,99,111,100,101,32,99,111,100,101,32,112,111,105,110,116,32,40,62,61,32,48,120,100,56,48,48,32,38,38,32,60,61,32,48,120,100,102,102,102,41,0,105,110,118,97,108,105,100,32,85,84,70,45,49,54,32,115,116,114,105,110,103,0,110,97,109,101,32,105,115,32,116,111,111,32,108,111,110,103,32,105,110,32,40,42,77,65,82,75,41,44,32,40,42,80,82,85,78,69,41,44,32,40,42,83,75,73,80,41,44,32,111,114,32,40,42,84,72,69,78,41,0,99,104,97,114,97,99,116,101,114,32,118,97,108,117,101,32,105,110,32,92,117,46,46,46,46,32,115,101,113,117,101,110,99,101,32,105,115,32,116,111,111,32,108,97,114,103,101,0,105,110,118,97,108,105,100,32,85,84,70,45,51,50,32,115,116,114,105,110,103,0,115,101,116,116,105,110,103,32,85,84,70,32,105,115,32,100,105,115,97,98,108,101,100,32,98,121,32,116,104,101,32,97,112,112,108,105,99,97,116,105,111,110,0,110,111,110,45,104,101,120,32,99,104,97,114,97,99,116,101,114,32,105,110,32,92,120,123,125,32,40,99,108,111,115,105,110,103,32,98,114,97,99,101,32,109,105,115,115,105,110,103,63,41,0,110,111,110,45,111,99,116,97,108,32,99,104,97,114,97,99,116,101,114,32,105,110,32,92,111,123,125,32,40,99,108,111,115,105,110,103,32,98,114,97,99,101,32,109,105,115,115,105,110,103,63,41,0,109,105,115,115,105,110,103,32,111,112,101,110,105,110,103,32,98,114,97,99,101,32,97,102,116,101,114,32,92,111,0,112,97,114,101,110,116,104,101,115,101,115,32,97,114,101,32,116,111,111,32,100,101,101,112,108,121,32,110,101,115,116,101,100,0,105,110,118,97,108,105,100,32,114,97,110,103,101,32,105,110,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,0,103,114,111,117,112,32,110,97,109,101,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,97,32,110,111,110,45,100,105,103,105,116,0,112,97,114,101,110,116,104,101,115,101,115,32,97,114,101,32,116,111,111,32,100,101,101,112,108,121,32,110,101,115,116,101,100,32,40,115,116,97,99,107,32,99,104,101,99,107,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,67,82,76,70,41,0,0,0,85,110,107,110,111,119,110,32,101,114,114,111,114,10,0,0,76,70,41,0,0,0,0,0,82,97,110,32,111,117,116,32,111,102,32,109,101,109,111,114,121,10,0,0,0,0,0,0,67,82,41,0,0,0,0,0,83,111,109,101,116,104,105,110,103,32,107,111,111,107,121,32,105,110,32,116,104,101,32,99,111,109,112,105,108,101,100,32,114,101,10,0,0,0,0,0,76,73,77,73,84,95,82,69,67,85,82,83,73,79,78,61,0,0,0,0,0,0,0,0,77,97,103,105,99,32,110,117,109,98,101,114,32,98,97,100,32,40,99,111,109,112,105,108,101,100,32,114,101,32,99,111,114,114,117,112,116,63,41,10,0,0,0,0,0,0,0,0,102,97,105,108,101,100,32,116,111,32,103,101,116,32,109,101,109,111,114,121,0,0,0,0,76,73,77,73,84,95,77,65,84,67,72,61,0,0,0,0,65,32,98,97,100,32,111,112,116,105,111,110,32,119,97,115,32,112,97,115,115,101,100,10,0,0,0,0,0,0,0,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,109,105,115,115,105,110,103,32,99,97,112,116,117,114,105,110,103,32,98,114,97,99,107,101,116,0,0,0,0,0,0,0,78,79,95,83,84,65,82,84,95,79,80,84,41,0,0,0,83,111,109,101,116,104,105,110,103,32,119,97,115,32,110,117,108,108,10,0,0,0,0,0,97,114,103,117,109,101,110,116,32,105,115,32,110,111,116,32,97,32,99,111,109,112,105,108,101,100,32,114,101,103,117,108,97,114,32,101,120,112,114,101,115,115,105,111,110,0,0,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,111,112,99,111,100,101,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,0,0,0,78,79,95,65,85,84,79,95,80,79,83,83,69,83,83,41,0,0,0,0,0,0,0,0,83,116,114,105,110,103,32,100,105,100,32,110,111,116,32,109,97,116,99,104,32,116,104,101,32,112,97,116,116,101,114,110,10,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,111,114,32,105,110,99,111,114,114,101,99,116,32,111,112,116,105,111,110,32,98,105,116,40,115,41,32,115,101,116,0,0,85,67,80,41,0,0,0,0,84,101,115,116,105,110,103,32,39,37,115,39,32,97,103,97,105,110,115,116,32,116,104,101,32,112,97,116,116,101,114,110,32,39,37,115,39,46,46,46,10,0,0,0,0,0,0,0,68,69,70,73,78,69,0,0,81,92,69,0,0,0,0,0,91,58,62,58,93,93,0,0,91,58,60,58,93,93,0,0,97,114,103,117,109,101,110,116,32,110,111,116,32,99,111,109,112,105,108,101,100,32,105,110,32,56,32,98,105,116,32,109,111,100,101,0,0,0,0,0,69,114,114,111,114,32,116,101,120,116,32,110,111,116,32,102,111,117,110,100,32,40,112,108,101,97,115,101,32,114,101,112,111,114,116,41,0,0,0,0,66,83,82,95,85,78,73,67,79,68,69,41,0,0,0,0,66,83,82,95,65,78,89,67,82,76,70,41,0,0,0,0,85,84,70,41,0,0,0,0,65,78,89,67,82,76,70,41,0,0,0,0,0,0,0,0,65,78,89,41,0,0,0,0,85,84,70,56,41,0,0,0,69,82,82,79,82,58,32,67,111,117,108,100,32,110,111,116,32,111,112,116,105,109,105,122,101,32,39,37,115,39,58,32,37,115,10,39,0,0,0,0,69,82,82,79,82,58,32,67,111,117,108,100,32,110,111,116,32,99,111,109,112,105,108,101,32,39,37,115,39,58,32,37,115,10,0,0,0,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,133,0,0,0,40,32,0,0,41,32,0,0,255,255,255,255,9,0,0,0,32,0,0,0,160,0,0,0,128,22,0,0,14,24,0,0,0,32,0,0,1,32,0,0,2,32,0,0,3,32,0,0,4,32,0,0,5,32,0,0,6,32,0,0,7,32,0,0,8,32,0,0,9,32,0,0,10,32,0,0,47,32,0,0,95,32,0,0,0,48,0,0,255,255,255,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,0,62,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,126,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,3,254,255,255,135,254,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,0,252,1,0,0,248,1,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,128,128,128,128,0,0,128,0,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,128,0,26,26,26,26,26,26,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,128,128,0,128,16,0,26,26,26,26,26,26,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,4,4,4,2,2,2,4,2,2,2,2,2,2,4,4,4,2,2,2,4,2,2,2,2,2,2,4,4,4,2,2,2,4,2,2,2,2,2,2,4,4,4,2,2,2,4,2,2,2,2,2,2,4,4,4,2,2,2,4,1,1,1,1,1,1,5,5,1,1,1,5,33,33,0,3,3,5,5,3,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,5,3,3,3,5,5,3,3,5,3,5,1,1,1,1,3,1,3,1,3,1,3,1,1,1,1,3,1,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
}
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
          FS.FSNode.prototype = {};
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          this.stack = stackTrace();
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }
  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)]);
      return pdest|0;
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        v1 = HEAPU8[(((p1)+(i))|0)];
        v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;
  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _abort() {
      Module['abort']();
    }
  function ___errno_location() {
      return ___errno_state;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var FUNCTION_TABLE = [0,0,_malloc,0,_free,0];
// EMSCRIPTEN_START_FUNCS
function _MakeRegExp(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $re;
 var $1=_malloc(12);
 var $2=$1;
 $re=$2;
 var $3=_malloc(4);
 var $4=$re;
 var $5=(($4+8)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$re;
 STACKTOP=sp;return $6;
}
function _MakeRegExpMatch(){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $m;
 var $1=_malloc(124);
 var $2=$1;
 $m=$2;
 var $3=_malloc(4);
 var $4=$m;
 var $5=(($4)|0);
 HEAP32[(($5)>>2)]=$3;
 var $6=$m;
 STACKTOP=sp;return $6;
}
function _empcre_make_re($pattern){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $pcreErrorStr=sp;
 var $pcreErrorOffset=(sp)+(8);
 var $reCompiled;
 var $pcreExtra;
 var $result;
 $1=$pattern;
 var $2=$1;
 var $3=_pcre_compile($2,0,$pcreErrorStr,$pcreErrorOffset,0);
 $reCompiled=$3;
 var $4=$reCompiled;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 var $8=HEAP32[(($pcreErrorStr)>>2)];
 var $9=_printf(5520,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$7,HEAP32[(((tempVarArgs)+(8))>>2)]=$8,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(1);
 throw "Reached an unreachable!";
 case 3: 
 var $11=$reCompiled;
 var $12=_pcre_study($11,0,$pcreErrorStr);
 $pcreExtra=$12;
 var $13=HEAP32[(($pcreErrorStr)>>2)];
 var $14=($13|0)!=0;
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $16=$1;
 var $17=HEAP32[(($pcreErrorStr)>>2)];
 var $18=_printf(5480,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$16,HEAP32[(((tempVarArgs)+(8))>>2)]=$17,tempVarArgs)); STACKTOP=tempVarArgs;
 _exit(1);
 throw "Reached an unreachable!";
 case 5: 
 var $20=_MakeRegExp();
 $result=$20;
 var $21=$result;
 var $22=(($21+8)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=$1;
 var $25=_strcpy($23,$24);
 var $26=$reCompiled;
 var $27=$result;
 var $28=(($27)|0);
 HEAP32[(($28)>>2)]=$26;
 var $29=$pcreExtra;
 var $30=$result;
 var $31=(($30+4)|0);
 HEAP32[(($31)>>2)]=$29;
 var $32=$result;
 STACKTOP=sp;return $32;
  default: assert(0, "bad label: " + label);
 }
}
Module["_empcre_make_re"] = _empcre_make_re;
function _empcre_match($re,$input){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $subStrVec=sp;
 var $result;
 var $match;
 var $i;
 $1=$re;
 $2=$input;
 var $3=$2;
 var $4=$1;
 var $5=(($4+8)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=_printf(5248,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$3,HEAP32[(((tempVarArgs)+(8))>>2)]=$6,tempVarArgs)); STACKTOP=tempVarArgs;
 var $8=$1;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$1;
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$2;
 var $15=$2;
 var $16=_strlen($15);
 var $17=(($subStrVec)|0);
 var $18=_pcre_exec($10,$13,$14,$16,0,0,$17,30);
 $result=$18;
 var $19=$result;
 var $20=($19|0)<0;
 if($20){label=2;break;}else{label=11;break;}
 case 2: 
 var $22=$result;
 switch(($22|0)){case -1:{ label=3;break;}case -2:{ label=4;break;}case -3:{ label=5;break;}case -4:{ label=6;break;}case -5:{ label=7;break;}case -6:{ label=8;break;}default:{label=9;break;}}break;
 case 3: 
 var $24=_printf(5160,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 4: 
 var $26=_printf(5024,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 5: 
 var $28=_printf(4928,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 6: 
 var $30=_printf(4840,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 7: 
 var $32=_printf(4776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 8: 
 var $34=_printf(4744,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 9: 
 var $36=_printf(4720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=10;break;
 case 10: 
 _exit(1);
 throw "Reached an unreachable!";
 case 11: 
 var $39=_MakeRegExpMatch();
 $match=$39;
 var $40=$match;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$2;
 var $44=_strcpy($42,$43);
 $i=0;
 label=12;break;
 case 12: 
 var $46=$i;
 var $47=$result;
 var $48=($46|0)<($47|0);
 if($48){label=13;break;}else{label=15;break;}
 case 13: 
 var $50=$2;
 var $51=(($subStrVec)|0);
 var $52=$result;
 var $53=$i;
 var $54=$i;
 var $55=$match;
 var $56=(($55+4)|0);
 var $57=(($56+($54<<2))|0);
 var $58=_pcre_get_substring($50,$51,$52,$53,$57);
 label=14;break;
 case 14: 
 var $60=$i;
 var $61=((($60)+(1))|0);
 $i=$61;
 label=12;break;
 case 15: 
 var $63=$match;
 STACKTOP=sp;return $63;
  default: assert(0, "bad label: " + label);
 }
}
Module["_empcre_match"] = _empcre_match;
function __pcre_find_bracket($code,$utf,$number){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $c;
 var $n;
 $2=$code;
 $3=$utf;
 $4=$number;
 label=2;break;
 case 2: 
 var $6=$2;
 var $7=HEAP8[($6)];
 $c=$7;
 var $8=$c;
 var $9=($8&255);
 var $10=($9|0)==0;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=31;break;
 case 4: 
 var $13=$c;
 var $14=($13&255);
 var $15=($14|0)==112;
 if($15){label=5;break;}else{label=6;break;}
 case 5: 
 var $17=$2;
 var $18=(($17+1)|0);
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=$20<<8;
 var $22=$2;
 var $23=(($22+2)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=$21|$25;
 var $27=$2;
 var $28=(($27+$26)|0);
 $2=$28;
 label=30;break;
 case 6: 
 var $30=$c;
 var $31=($30&255);
 var $32=($31|0)==124;
 if($32){label=7;break;}else{label=10;break;}
 case 7: 
 var $34=$4;
 var $35=($34|0)<0;
 if($35){label=8;break;}else{label=9;break;}
 case 8: 
 var $37=$2;
 $1=$37;
 label=31;break;
 case 9: 
 var $39=$c;
 var $40=($39&255);
 var $41=((6760+$40)|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 var $44=$2;
 var $45=(($44+$43)|0);
 $2=$45;
 label=29;break;
 case 10: 
 var $47=$c;
 var $48=($47&255);
 var $49=($48|0)==133;
 if($49){label=14;break;}else{label=11;break;}
 case 11: 
 var $51=$c;
 var $52=($51&255);
 var $53=($52|0)==138;
 if($53){label=14;break;}else{label=12;break;}
 case 12: 
 var $55=$c;
 var $56=($55&255);
 var $57=($56|0)==134;
 if($57){label=14;break;}else{label=13;break;}
 case 13: 
 var $59=$c;
 var $60=($59&255);
 var $61=($60|0)==139;
 if($61){label=14;break;}else{label=17;break;}
 case 14: 
 var $63=$2;
 var $64=(($63+3)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=$66<<8;
 var $68=$2;
 var $69=(($68+4)|0);
 var $70=HEAP8[($69)];
 var $71=($70&255);
 var $72=$67|$71;
 $n=$72;
 var $73=$n;
 var $74=$4;
 var $75=($73|0)==($74|0);
 if($75){label=15;break;}else{label=16;break;}
 case 15: 
 var $77=$2;
 $1=$77;
 label=31;break;
 case 16: 
 var $79=$c;
 var $80=($79&255);
 var $81=((6760+$80)|0);
 var $82=HEAP8[($81)];
 var $83=($82&255);
 var $84=$2;
 var $85=(($84+$83)|0);
 $2=$85;
 label=28;break;
 case 17: 
 var $87=$c;
 var $88=($87&255);
 switch(($88|0)){case 85:case 86:case 87:case 88:case 89:case 90:case 94:case 95:case 96:{ label=18;break;}case 91:case 92:case 93:case 97:{ label=22;break;}case 149:case 151:case 153:case 155:{ label=26;break;}default:{label=27;break;}}break;
 case 18: 
 var $90=$2;
 var $91=(($90+1)|0);
 var $92=HEAP8[($91)];
 var $93=($92&255);
 var $94=($93|0)==16;
 if($94){label=20;break;}else{label=19;break;}
 case 19: 
 var $96=$2;
 var $97=(($96+1)|0);
 var $98=HEAP8[($97)];
 var $99=($98&255);
 var $100=($99|0)==15;
 if($100){label=20;break;}else{label=21;break;}
 case 20: 
 var $102=$2;
 var $103=(($102+2)|0);
 $2=$103;
 label=21;break;
 case 21: 
 label=27;break;
 case 22: 
 var $106=$2;
 var $107=(($106+3)|0);
 var $108=HEAP8[($107)];
 var $109=($108&255);
 var $110=($109|0)==16;
 if($110){label=24;break;}else{label=23;break;}
 case 23: 
 var $112=$2;
 var $113=(($112+3)|0);
 var $114=HEAP8[($113)];
 var $115=($114&255);
 var $116=($115|0)==15;
 if($116){label=24;break;}else{label=25;break;}
 case 24: 
 var $118=$2;
 var $119=(($118+2)|0);
 $2=$119;
 label=25;break;
 case 25: 
 label=27;break;
 case 26: 
 var $122=$2;
 var $123=(($122+1)|0);
 var $124=HEAP8[($123)];
 var $125=($124&255);
 var $126=$2;
 var $127=(($126+$125)|0);
 $2=$127;
 label=27;break;
 case 27: 
 var $129=$c;
 var $130=($129&255);
 var $131=((6760+$130)|0);
 var $132=HEAP8[($131)];
 var $133=($132&255);
 var $134=$2;
 var $135=(($134+$133)|0);
 $2=$135;
 var $136=$3;
 label=28;break;
 case 28: 
 label=29;break;
 case 29: 
 label=30;break;
 case 30: 
 label=2;break;
 case 31: 
 var $141=$1;
 STACKTOP=sp;return $141;
  default: assert(0, "bad label: " + label);
 }
}
function _pcre_compile($pattern,$options,$errorptr,$erroroffset,$tables){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 $1=$pattern;
 $2=$options;
 $3=$errorptr;
 $4=$erroroffset;
 $5=$tables;
 var $6=$1;
 var $7=$2;
 var $8=$3;
 var $9=$4;
 var $10=$5;
 var $11=_pcre_compile2($6,$7,0,$8,$9,$10);
 STACKTOP=sp;return $11;
}
function _pcre_compile2($pattern,$options,$errorcodeptr,$errorptr,$erroroffset,$tables){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4536)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $re;
 var $length=sp;
 var $firstcharflags=(sp)+(8);
 var $reqcharflags=(sp)+(16);
 var $firstchar=(sp)+(24);
 var $reqchar=(sp)+(32);
 var $limit_match;
 var $limit_recursion;
 var $newline;
 var $errorcode=(sp)+(40);
 var $skipatstart;
 var $utf;
 var $never_utf;
 var $size;
 var $code=(sp)+(48);
 var $codestart;
 var $ptr=(sp)+(56);
 var $compile_block=(sp)+(64);
 var $cd;
 var $cworkspace=(sp)+(200);
 var $named_groups=(sp)+(4296);
 var $newnl;
 var $newbsr;
 var $c;
 var $p;
 var $c1;
 var $p2;
 var $i;
 var $ng;
 var $prev_recno;
 var $groupptr;
 var $offset;
 var $recno;
 var $cc;
 var $fixed_length;
 var $be;
 var $end_op;
 $2=$pattern;
 $3=$options;
 $4=$errorcodeptr;
 $5=$errorptr;
 $6=$erroroffset;
 $7=$tables;
 HEAP32[(($length)>>2)]=1;
 $limit_match=-1;
 $limit_recursion=-1;
 HEAP32[(($errorcode)>>2)]=0;
 $skipatstart=0;
 $never_utf=0;
 $cd=$compile_block;
 var $8=$2;
 HEAP32[(($ptr)>>2)]=$8;
 var $9=$5;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=5;break;}
 case 2: 
 var $12=$4;
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$4;
 HEAP32[(($15)>>2)]=99;
 label=4;break;
 case 4: 
 $1=0;
 label=207;break;
 case 5: 
 var $18=$5;
 HEAP32[(($18)>>2)]=0;
 var $19=$4;
 var $20=($19|0)!=0;
 if($20){label=6;break;}else{label=7;break;}
 case 6: 
 var $22=$4;
 HEAP32[(($22)>>2)]=0;
 label=7;break;
 case 7: 
 var $24=$6;
 var $25=($24|0)==0;
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($errorcode)>>2)]=16;
 label=174;break;
 case 9: 
 var $28=$6;
 HEAP32[(($28)>>2)]=0;
 var $29=$7;
 var $30=($29|0)==0;
 if($30){label=10;break;}else{label=11;break;}
 case 10: 
 $7=5672;
 label=11;break;
 case 11: 
 var $33=$7;
 var $34=(($33)|0);
 var $35=$cd;
 var $36=(($35)|0);
 HEAP32[(($36)>>2)]=$34;
 var $37=$7;
 var $38=(($37+256)|0);
 var $39=$cd;
 var $40=(($39+4)|0);
 HEAP32[(($40)>>2)]=$38;
 var $41=$7;
 var $42=(($41+512)|0);
 var $43=$cd;
 var $44=(($43+8)|0);
 HEAP32[(($44)>>2)]=$42;
 var $45=$7;
 var $46=(($45+832)|0);
 var $47=$cd;
 var $48=(($47+12)|0);
 HEAP32[(($48)>>2)]=$46;
 var $49=$3;
 var $50=$49&-671054464;
 var $51=($50|0)!=0;
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($errorcode)>>2)]=17;
 label=173;break;
 case 13: 
 var $54=$3;
 var $55=$54&65536;
 var $56=($55|0)!=0;
 if($56){label=14;break;}else{label=15;break;}
 case 14: 
 $never_utf=1;
 label=15;break;
 case 15: 
 var $59=$cd;
 var $60=(($59+100)|0);
 HEAP32[(($60)>>2)]=0;
 label=16;break;
 case 16: 
 var $62=$skipatstart;
 var $63=HEAP32[(($ptr)>>2)];
 var $64=(($63+$62)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=($66|0)==40;
 if($67){label=17;break;}else{var $77=0;label=18;break;}
 case 17: 
 var $69=$skipatstart;
 var $70=((($69)+(1))|0);
 var $71=HEAP32[(($ptr)>>2)];
 var $72=(($71+$70)|0);
 var $73=HEAP8[($72)];
 var $74=($73&255);
 var $75=($74|0)==42;
 var $77=$75;label=18;break;
 case 18: 
 var $77;
 if($77){label=19;break;}else{label=84;break;}
 case 19: 
 $newnl=0;
 $newbsr=0;
 var $79=HEAP32[(($ptr)>>2)];
 var $80=$skipatstart;
 var $81=(($79+$80)|0);
 var $82=(($81+2)|0);
 var $83=_strncmp($82,5472,5);
 var $84=($83|0)==0;
 if($84){label=20;break;}else{label=21;break;}
 case 20: 
 var $86=$skipatstart;
 var $87=((($86)+(7))|0);
 $skipatstart=$87;
 var $88=$3;
 var $89=$88|2048;
 $3=$89;
 label=16;break;
 case 21: 
 var $91=HEAP32[(($ptr)>>2)];
 var $92=$skipatstart;
 var $93=(($91+$92)|0);
 var $94=(($93+2)|0);
 var $95=_strncmp($94,5440,4);
 var $96=($95|0)==0;
 if($96){label=22;break;}else{label=23;break;}
 case 22: 
 var $98=$skipatstart;
 var $99=((($98)+(6))|0);
 $skipatstart=$99;
 var $100=$3;
 var $101=$100|2048;
 $3=$101;
 label=16;break;
 case 23: 
 var $103=HEAP32[(($ptr)>>2)];
 var $104=$skipatstart;
 var $105=(($103+$104)|0);
 var $106=(($105+2)|0);
 var $107=_strncmp($106,5240,4);
 var $108=($107|0)==0;
 if($108){label=24;break;}else{label=25;break;}
 case 24: 
 var $110=$skipatstart;
 var $111=((($110)+(6))|0);
 $skipatstart=$111;
 var $112=$3;
 var $113=$112|536870912;
 $3=$113;
 label=16;break;
 case 25: 
 var $115=HEAP32[(($ptr)>>2)];
 var $116=$skipatstart;
 var $117=(($115+$116)|0);
 var $118=(($117+2)|0);
 var $119=_strncmp($118,5136,16);
 var $120=($119|0)==0;
 if($120){label=26;break;}else{label=27;break;}
 case 26: 
 var $122=$skipatstart;
 var $123=((($122)+(18))|0);
 $skipatstart=$123;
 var $124=$3;
 var $125=$124|131072;
 $3=$125;
 label=16;break;
 case 27: 
 var $127=HEAP32[(($ptr)>>2)];
 var $128=$skipatstart;
 var $129=(($127+$128)|0);
 var $130=(($129+2)|0);
 var $131=_strncmp($130,5008,13);
 var $132=($131|0)==0;
 if($132){label=28;break;}else{label=29;break;}
 case 28: 
 var $134=$skipatstart;
 var $135=((($134)+(15))|0);
 $skipatstart=$135;
 var $136=$3;
 var $137=$136|67108864;
 $3=$137;
 label=16;break;
 case 29: 
 var $139=HEAP32[(($ptr)>>2)];
 var $140=$skipatstart;
 var $141=(($139+$140)|0);
 var $142=(($141+2)|0);
 var $143=_strncmp($142,4912,12);
 var $144=($143|0)==0;
 if($144){label=30;break;}else{label=40;break;}
 case 30: 
 $c=0;
 var $146=$skipatstart;
 var $147=((($146)+(14))|0);
 $p=$147;
 label=31;break;
 case 31: 
 var $149=$p;
 var $150=HEAP32[(($ptr)>>2)];
 var $151=(($150+$149)|0);
 var $152=HEAP8[($151)];
 var $153=($152&255);
 var $154=_isdigit($153);
 var $155=($154|0)!=0;
 if($155){label=32;break;}else{label=35;break;}
 case 32: 
 var $157=$c;
 var $158=($157>>>0)>429496728;
 if($158){label=33;break;}else{label=34;break;}
 case 33: 
 label=35;break;
 case 34: 
 var $161=$c;
 var $162=((($161)*(10))&-1);
 var $163=$p;
 var $164=((($163)+(1))|0);
 $p=$164;
 var $165=HEAP32[(($ptr)>>2)];
 var $166=(($165+$163)|0);
 var $167=HEAP8[($166)];
 var $168=($167&255);
 var $169=((($162)+($168))|0);
 var $170=((($169)-(48))|0);
 $c=$170;
 label=31;break;
 case 35: 
 var $172=$p;
 var $173=((($172)+(1))|0);
 $p=$173;
 var $174=HEAP32[(($ptr)>>2)];
 var $175=(($174+$172)|0);
 var $176=HEAP8[($175)];
 var $177=($176&255);
 var $178=($177|0)!=41;
 if($178){label=36;break;}else{label=37;break;}
 case 36: 
 label=84;break;
 case 37: 
 var $181=$c;
 var $182=$limit_match;
 var $183=($181>>>0)<($182>>>0);
 if($183){label=38;break;}else{label=39;break;}
 case 38: 
 var $185=$c;
 $limit_match=$185;
 var $186=$cd;
 var $187=(($186+100)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=$188|8192;
 HEAP32[(($187)>>2)]=$189;
 label=39;break;
 case 39: 
 var $191=$p;
 $skipatstart=$191;
 label=16;break;
 case 40: 
 var $193=HEAP32[(($ptr)>>2)];
 var $194=$skipatstart;
 var $195=(($193+$194)|0);
 var $196=(($195+2)|0);
 var $197=_strncmp($196,4816,16);
 var $198=($197|0)==0;
 if($198){label=41;break;}else{label=51;break;}
 case 41: 
 $c1=0;
 var $200=$skipatstart;
 var $201=((($200)+(18))|0);
 $p2=$201;
 label=42;break;
 case 42: 
 var $203=$p2;
 var $204=HEAP32[(($ptr)>>2)];
 var $205=(($204+$203)|0);
 var $206=HEAP8[($205)];
 var $207=($206&255);
 var $208=_isdigit($207);
 var $209=($208|0)!=0;
 if($209){label=43;break;}else{label=46;break;}
 case 43: 
 var $211=$c1;
 var $212=($211>>>0)>429496728;
 if($212){label=44;break;}else{label=45;break;}
 case 44: 
 label=46;break;
 case 45: 
 var $215=$c1;
 var $216=((($215)*(10))&-1);
 var $217=$p2;
 var $218=((($217)+(1))|0);
 $p2=$218;
 var $219=HEAP32[(($ptr)>>2)];
 var $220=(($219+$217)|0);
 var $221=HEAP8[($220)];
 var $222=($221&255);
 var $223=((($216)+($222))|0);
 var $224=((($223)-(48))|0);
 $c1=$224;
 label=42;break;
 case 46: 
 var $226=$p2;
 var $227=((($226)+(1))|0);
 $p2=$227;
 var $228=HEAP32[(($ptr)>>2)];
 var $229=(($228+$226)|0);
 var $230=HEAP8[($229)];
 var $231=($230&255);
 var $232=($231|0)!=41;
 if($232){label=47;break;}else{label=48;break;}
 case 47: 
 label=84;break;
 case 48: 
 var $235=$c1;
 var $236=$limit_recursion;
 var $237=($235>>>0)<($236>>>0);
 if($237){label=49;break;}else{label=50;break;}
 case 49: 
 var $239=$c1;
 $limit_recursion=$239;
 var $240=$cd;
 var $241=(($240+100)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=$242|16384;
 HEAP32[(($241)>>2)]=$243;
 label=50;break;
 case 50: 
 var $245=$p2;
 $skipatstart=$245;
 label=16;break;
 case 51: 
 label=52;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 var $253=HEAP32[(($ptr)>>2)];
 var $254=$skipatstart;
 var $255=(($253+$254)|0);
 var $256=(($255+2)|0);
 var $257=_strncmp($256,4768,3);
 var $258=($257|0)==0;
 if($258){label=58;break;}else{label=59;break;}
 case 58: 
 var $260=$skipatstart;
 var $261=((($260)+(5))|0);
 $skipatstart=$261;
 $newnl=1048576;
 label=77;break;
 case 59: 
 var $263=HEAP32[(($ptr)>>2)];
 var $264=$skipatstart;
 var $265=(($263+$264)|0);
 var $266=(($265+2)|0);
 var $267=_strncmp($266,4736,3);
 var $268=($267|0)==0;
 if($268){label=60;break;}else{label=61;break;}
 case 60: 
 var $270=$skipatstart;
 var $271=((($270)+(5))|0);
 $skipatstart=$271;
 $newnl=2097152;
 label=76;break;
 case 61: 
 var $273=HEAP32[(($ptr)>>2)];
 var $274=$skipatstart;
 var $275=(($273+$274)|0);
 var $276=(($275+2)|0);
 var $277=_strncmp($276,4712,5);
 var $278=($277|0)==0;
 if($278){label=62;break;}else{label=63;break;}
 case 62: 
 var $280=$skipatstart;
 var $281=((($280)+(7))|0);
 $skipatstart=$281;
 $newnl=3145728;
 label=75;break;
 case 63: 
 var $283=HEAP32[(($ptr)>>2)];
 var $284=$skipatstart;
 var $285=(($283+$284)|0);
 var $286=(($285+2)|0);
 var $287=_strncmp($286,5464,4);
 var $288=($287|0)==0;
 if($288){label=64;break;}else{label=65;break;}
 case 64: 
 var $290=$skipatstart;
 var $291=((($290)+(6))|0);
 $skipatstart=$291;
 $newnl=4194304;
 label=74;break;
 case 65: 
 var $293=HEAP32[(($ptr)>>2)];
 var $294=$skipatstart;
 var $295=(($293+$294)|0);
 var $296=(($295+2)|0);
 var $297=_strncmp($296,5448,8);
 var $298=($297|0)==0;
 if($298){label=66;break;}else{label=67;break;}
 case 66: 
 var $300=$skipatstart;
 var $301=((($300)+(10))|0);
 $skipatstart=$301;
 $newnl=5242880;
 label=73;break;
 case 67: 
 var $303=HEAP32[(($ptr)>>2)];
 var $304=$skipatstart;
 var $305=(($303+$304)|0);
 var $306=(($305+2)|0);
 var $307=_strncmp($306,5424,12);
 var $308=($307|0)==0;
 if($308){label=68;break;}else{label=69;break;}
 case 68: 
 var $310=$skipatstart;
 var $311=((($310)+(14))|0);
 $skipatstart=$311;
 $newbsr=8388608;
 label=72;break;
 case 69: 
 var $313=HEAP32[(($ptr)>>2)];
 var $314=$skipatstart;
 var $315=(($313+$314)|0);
 var $316=(($315+2)|0);
 var $317=_strncmp($316,5408,12);
 var $318=($317|0)==0;
 if($318){label=70;break;}else{label=71;break;}
 case 70: 
 var $320=$skipatstart;
 var $321=((($320)+(14))|0);
 $skipatstart=$321;
 $newbsr=16777216;
 label=71;break;
 case 71: 
 label=72;break;
 case 72: 
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 label=77;break;
 case 77: 
 var $329=$newnl;
 var $330=($329|0)!=0;
 if($330){label=78;break;}else{label=79;break;}
 case 78: 
 var $332=$3;
 var $333=$332&-7340033;
 var $334=$newnl;
 var $335=$333|$334;
 $3=$335;
 label=83;break;
 case 79: 
 var $337=$newbsr;
 var $338=($337|0)!=0;
 if($338){label=80;break;}else{label=81;break;}
 case 80: 
 var $340=$3;
 var $341=$340&-25165825;
 var $342=$newbsr;
 var $343=$341|$342;
 $3=$343;
 label=82;break;
 case 81: 
 label=84;break;
 case 82: 
 label=83;break;
 case 83: 
 label=16;break;
 case 84: 
 var $348=$3;
 var $349=$348&2048;
 var $350=($349|0)!=0;
 var $351=($350&1);
 $utf=$351;
 var $352=$utf;
 var $353=($352|0)!=0;
 if($353){label=85;break;}else{label=87;break;}
 case 85: 
 var $355=$never_utf;
 var $356=($355|0)!=0;
 if($356){label=86;break;}else{label=87;break;}
 case 86: 
 HEAP32[(($errorcode)>>2)]=78;
 label=174;break;
 case 87: 
 var $359=$utf;
 var $360=($359|0)!=0;
 if($360){label=88;break;}else{label=89;break;}
 case 88: 
 HEAP32[(($errorcode)>>2)]=32;
 label=173;break;
 case 89: 
 var $363=$3;
 var $364=$363&536870912;
 var $365=($364|0)!=0;
 if($365){label=90;break;}else{label=91;break;}
 case 90: 
 HEAP32[(($errorcode)>>2)]=67;
 label=173;break;
 case 91: 
 var $368=$3;
 var $369=$368&25165824;
 var $370=($369|0)==25165824;
 if($370){label=92;break;}else{label=93;break;}
 case 92: 
 HEAP32[(($errorcode)>>2)]=56;
 label=173;break;
 case 93: 
 var $373=$3;
 var $374=$373&7340032;
 if(($374|0)==0){ label=94;break;}else if(($374|0)==1048576){ label=95;break;}else if(($374|0)==2097152){ label=96;break;}else if(($374|0)==3145728){ label=97;break;}else if(($374|0)==4194304){ label=98;break;}else if(($374|0)==5242880){ label=99;break;}else{label=100;break;}
 case 94: 
 $newline=10;
 label=101;break;
 case 95: 
 $newline=13;
 label=101;break;
 case 96: 
 $newline=10;
 label=101;break;
 case 97: 
 $newline=3338;
 label=101;break;
 case 98: 
 $newline=-1;
 label=101;break;
 case 99: 
 $newline=-2;
 label=101;break;
 case 100: 
 HEAP32[(($errorcode)>>2)]=56;
 label=173;break;
 case 101: 
 var $383=$newline;
 var $384=($383|0)==-2;
 if($384){label=102;break;}else{label=103;break;}
 case 102: 
 var $386=$cd;
 var $387=(($386+124)|0);
 HEAP32[(($387)>>2)]=2;
 label=110;break;
 case 103: 
 var $389=$newline;
 var $390=($389|0)<0;
 if($390){label=104;break;}else{label=105;break;}
 case 104: 
 var $392=$cd;
 var $393=(($392+124)|0);
 HEAP32[(($393)>>2)]=1;
 label=109;break;
 case 105: 
 var $395=$cd;
 var $396=(($395+124)|0);
 HEAP32[(($396)>>2)]=0;
 var $397=$newline;
 var $398=($397|0)>255;
 if($398){label=106;break;}else{label=107;break;}
 case 106: 
 var $400=$cd;
 var $401=(($400+128)|0);
 HEAP32[(($401)>>2)]=2;
 var $402=$newline;
 var $403=$402>>8;
 var $404=$403&255;
 var $405=(($404)&255);
 var $406=$cd;
 var $407=(($406+132)|0);
 var $408=(($407)|0);
 HEAP8[($408)]=$405;
 var $409=$newline;
 var $410=$409&255;
 var $411=(($410)&255);
 var $412=$cd;
 var $413=(($412+132)|0);
 var $414=(($413+1)|0);
 HEAP8[($414)]=$411;
 label=108;break;
 case 107: 
 var $416=$cd;
 var $417=(($416+128)|0);
 HEAP32[(($417)>>2)]=1;
 var $418=$newline;
 var $419=(($418)&255);
 var $420=$cd;
 var $421=(($420+132)|0);
 var $422=(($421)|0);
 HEAP8[($422)]=$419;
 label=108;break;
 case 108: 
 label=109;break;
 case 109: 
 label=110;break;
 case 110: 
 var $426=$cd;
 var $427=(($426+76)|0);
 HEAP32[(($427)>>2)]=0;
 var $428=$cd;
 var $429=(($428+80)|0);
 HEAP32[(($429)>>2)]=0;
 var $430=$cd;
 var $431=(($430+68)|0);
 HEAP32[(($431)>>2)]=0;
 var $432=$cd;
 var $433=(($432+64)|0);
 HEAP32[(($433)>>2)]=0;
 var $434=$cd;
 var $435=(($434+48)|0);
 HEAP32[(($435)>>2)]=0;
 var $436=$cd;
 var $437=(($436+52)|0);
 HEAP32[(($437)>>2)]=0;
 var $438=$cd;
 var $439=(($438+44)|0);
 HEAP32[(($439)>>2)]=0;
 var $440=$cd;
 var $441=(($440+120)|0);
 HEAP32[(($441)>>2)]=0;
 var $442=$cd;
 var $443=(($442+84)|0);
 HEAP32[(($443)>>2)]=0;
 var $444=(($cworkspace)|0);
 var $445=$cd;
 var $446=(($445+20)|0);
 HEAP32[(($446)>>2)]=$444;
 var $447=(($cworkspace)|0);
 var $448=$cd;
 var $449=(($448+32)|0);
 HEAP32[(($449)>>2)]=$447;
 var $450=(($cworkspace)|0);
 var $451=$cd;
 var $452=(($451+16)|0);
 HEAP32[(($452)>>2)]=$450;
 var $453=$cd;
 var $454=(($453+60)|0);
 HEAP32[(($454)>>2)]=4096;
 var $455=(($named_groups)|0);
 var $456=$cd;
 var $457=(($456+40)|0);
 HEAP32[(($457)>>2)]=$455;
 var $458=$cd;
 var $459=(($458+56)|0);
 HEAP32[(($459)>>2)]=20;
 var $460=$2;
 var $461=$cd;
 var $462=(($461+24)|0);
 HEAP32[(($462)>>2)]=$460;
 var $463=$2;
 var $464=$2;
 var $465=_strlen($464);
 var $466=(($463+$465)|0);
 var $467=$cd;
 var $468=(($467+28)|0);
 HEAP32[(($468)>>2)]=$466;
 var $469=$cd;
 var $470=(($469+104)|0);
 HEAP32[(($470)>>2)]=0;
 var $471=$cd;
 var $472=(($471+88)|0);
 HEAP32[(($472)>>2)]=0;
 var $473=$cd;
 var $474=(($473+92)|0);
 HEAP32[(($474)>>2)]=0;
 var $475=$cd;
 var $476=(($475+72)|0);
 HEAP32[(($476)>>2)]=0;
 var $477=$3;
 var $478=$cd;
 var $479=(($478+96)|0);
 HEAP32[(($479)>>2)]=$477;
 var $480=$cd;
 var $481=(($480+36)|0);
 HEAP32[(($481)>>2)]=0;
 var $482=$skipatstart;
 var $483=HEAP32[(($ptr)>>2)];
 var $484=(($483+$482)|0);
 HEAP32[(($ptr)>>2)]=$484;
 var $485=(($cworkspace)|0);
 HEAP32[(($code)>>2)]=$485;
 var $486=HEAP32[(($code)>>2)];
 HEAP8[($486)]=-125;
 var $487=$cd;
 var $488=(($487+96)|0);
 var $489=HEAP32[(($488)>>2)];
 var $490=$cd;
 var $491=_compile_regex($489,$code,$ptr,$errorcode,0,0,0,0,$firstchar,$firstcharflags,$reqchar,$reqcharflags,0,$490,$length);
 var $492=HEAP32[(($errorcode)>>2)];
 var $493=($492|0)!=0;
 if($493){label=111;break;}else{label=112;break;}
 case 111: 
 label=173;break;
 case 112: 
 var $496=HEAP32[(($length)>>2)];
 var $497=($496|0)>65536;
 if($497){label=113;break;}else{label=114;break;}
 case 113: 
 HEAP32[(($errorcode)>>2)]=20;
 label=173;break;
 case 114: 
 var $500=$cd;
 var $501=(($500+120)|0);
 var $502=HEAP32[(($501)>>2)];
 var $503=($502|0)!=0;
 if($503){label=115;break;}else{label=117;break;}
 case 115: 
 var $505=$cd;
 var $506=(($505+84)|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=($507>>>0)>0;
 if($508){label=116;break;}else{label=117;break;}
 case 116: 
 var $510=$cd;
 var $511=(($510+84)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=($512<<1);
 var $514=$513;
 var $515=HEAP32[(($length)>>2)];
 var $516=((($515)+($514))|0);
 HEAP32[(($length)>>2)]=$516;
 label=117;break;
 case 117: 
 var $518=HEAP32[(($length)>>2)];
 var $519=$cd;
 var $520=(($519+48)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=$cd;
 var $523=(($522+52)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=(Math_imul($521,$524)|0);
 var $526=((($518)+($525))|0);
 var $527=$526;
 var $528=((($527)+(56))|0);
 $size=$528;
 var $529=HEAP32[((504)>>2)];
 var $530=$size;
 var $531=FUNCTION_TABLE[$529]($530);
 var $532=$531;
 $re=$532;
 var $533=$re;
 var $534=($533|0)==0;
 if($534){label=118;break;}else{label=119;break;}
 case 118: 
 HEAP32[(($errorcode)>>2)]=21;
 label=173;break;
 case 119: 
 var $537=$re;
 var $538=(($537)|0);
 HEAP32[(($538)>>2)]=1346589253;
 var $539=$size;
 var $540=$re;
 var $541=(($540+4)|0);
 HEAP32[(($541)>>2)]=$539;
 var $542=$cd;
 var $543=(($542+96)|0);
 var $544=HEAP32[(($543)>>2)];
 var $545=$re;
 var $546=(($545+8)|0);
 HEAP32[(($546)>>2)]=$544;
 var $547=$cd;
 var $548=(($547+100)|0);
 var $549=HEAP32[(($548)>>2)];
 var $550=$re;
 var $551=(($550+12)|0);
 HEAP32[(($551)>>2)]=$549;
 var $552=$limit_match;
 var $553=$re;
 var $554=(($553+16)|0);
 HEAP32[(($554)>>2)]=$552;
 var $555=$limit_recursion;
 var $556=$re;
 var $557=(($556+20)|0);
 HEAP32[(($557)>>2)]=$555;
 var $558=$re;
 var $559=(($558+24)|0);
 HEAP16[(($559)>>1)]=0;
 var $560=$re;
 var $561=(($560+26)|0);
 HEAP16[(($561)>>1)]=0;
 var $562=$re;
 var $563=(($562+34)|0);
 HEAP16[(($563)>>1)]=56;
 var $564=$cd;
 var $565=(($564+52)|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=(($566)&65535);
 var $568=$re;
 var $569=(($568+36)|0);
 HEAP16[(($569)>>1)]=$567;
 var $570=$cd;
 var $571=(($570+48)|0);
 var $572=HEAP32[(($571)>>2)];
 var $573=(($572)&65535);
 var $574=$re;
 var $575=(($574+38)|0);
 HEAP16[(($575)>>1)]=$573;
 var $576=$re;
 var $577=(($576+40)|0);
 HEAP16[(($577)>>1)]=0;
 var $578=$7;
 var $579=($578|0)==5672;
 if($579){label=120;break;}else{label=121;break;}
 case 120: 
 var $584=0;label=122;break;
 case 121: 
 var $582=$7;
 var $584=$582;label=122;break;
 case 122: 
 var $584;
 var $585=$re;
 var $586=(($585+48)|0);
 HEAP32[(($586)>>2)]=$584;
 var $587=$re;
 var $588=(($587+52)|0);
 HEAP32[(($588)>>2)]=0;
 var $589=$re;
 var $590=(($589+46)|0);
 HEAP16[(($590)>>1)]=0;
 var $591=$re;
 var $592=(($591+44)|0);
 HEAP16[(($592)>>1)]=0;
 var $593=$re;
 var $594=(($593+42)|0);
 HEAP16[(($594)>>1)]=0;
 var $595=$cd;
 var $596=(($595+64)|0);
 var $597=HEAP32[(($596)>>2)];
 var $598=$cd;
 var $599=(($598+68)|0);
 HEAP32[(($599)>>2)]=$597;
 var $600=$cd;
 var $601=(($600+88)|0);
 HEAP32[(($601)>>2)]=0;
 var $602=$cd;
 var $603=(($602+92)|0);
 HEAP32[(($603)>>2)]=0;
 var $604=$cd;
 var $605=(($604+64)|0);
 HEAP32[(($605)>>2)]=0;
 var $606=$cd;
 var $607=(($606+72)|0);
 HEAP32[(($607)>>2)]=0;
 var $608=$re;
 var $609=$608;
 var $610=$re;
 var $611=(($610+34)|0);
 var $612=HEAP16[(($611)>>1)];
 var $613=($612&65535);
 var $614=(($609+$613)|0);
 var $615=$cd;
 var $616=(($615+44)|0);
 HEAP32[(($616)>>2)]=$614;
 var $617=$cd;
 var $618=(($617+44)|0);
 var $619=HEAP32[(($618)>>2)];
 var $620=$re;
 var $621=(($620+36)|0);
 var $622=HEAP16[(($621)>>1)];
 var $623=($622&65535);
 var $624=$re;
 var $625=(($624+38)|0);
 var $626=HEAP16[(($625)>>1)];
 var $627=($626&65535);
 var $628=(Math_imul($623,$627)|0);
 var $629=(($619+$628)|0);
 $codestart=$629;
 var $630=$codestart;
 var $631=$cd;
 var $632=(($631+20)|0);
 HEAP32[(($632)>>2)]=$630;
 var $633=$cd;
 var $634=(($633+16)|0);
 var $635=HEAP32[(($634)>>2)];
 var $636=$cd;
 var $637=(($636+32)|0);
 HEAP32[(($637)>>2)]=$635;
 var $638=$cd;
 var $639=(($638+104)|0);
 HEAP32[(($639)>>2)]=0;
 var $640=$cd;
 var $641=(($640+108)|0);
 HEAP32[(($641)>>2)]=0;
 var $642=$cd;
 var $643=(($642+112)|0);
 HEAP32[(($643)>>2)]=0;
 var $644=$cd;
 var $645=(($644+116)|0);
 HEAP32[(($645)>>2)]=0;
 var $646=$cd;
 var $647=(($646+36)|0);
 HEAP32[(($647)>>2)]=0;
 var $648=$cd;
 var $649=(($648+48)|0);
 var $650=HEAP32[(($649)>>2)];
 var $651=($650|0)>0;
 if($651){label=123;break;}else{label=130;break;}
 case 123: 
 var $653=$cd;
 var $654=(($653+48)|0);
 var $655=HEAP32[(($654)>>2)];
 $i=$655;
 var $656=$cd;
 var $657=(($656+40)|0);
 var $658=HEAP32[(($657)>>2)];
 $ng=$658;
 var $659=$cd;
 var $660=(($659+48)|0);
 HEAP32[(($660)>>2)]=0;
 label=124;break;
 case 124: 
 var $662=$i;
 var $663=($662|0)>0;
 if($663){label=125;break;}else{label=127;break;}
 case 125: 
 var $665=$cd;
 var $666=$ng;
 var $667=(($666)|0);
 var $668=HEAP32[(($667)>>2)];
 var $669=$ng;
 var $670=(($669+4)|0);
 var $671=HEAP32[(($670)>>2)];
 var $672=$ng;
 var $673=(($672+8)|0);
 var $674=HEAP32[(($673)>>2)];
 _add_name($665,$668,$671,$674);
 label=126;break;
 case 126: 
 var $676=$i;
 var $677=((($676)-(1))|0);
 $i=$677;
 var $678=$ng;
 var $679=(($678+12)|0);
 $ng=$679;
 label=124;break;
 case 127: 
 var $681=$cd;
 var $682=(($681+56)|0);
 var $683=HEAP32[(($682)>>2)];
 var $684=($683|0)>20;
 if($684){label=128;break;}else{label=129;break;}
 case 128: 
 var $686=HEAP32[((512)>>2)];
 var $687=$cd;
 var $688=(($687+40)|0);
 var $689=HEAP32[(($688)>>2)];
 var $690=$689;
 FUNCTION_TABLE[$686]($690);
 label=129;break;
 case 129: 
 label=130;break;
 case 130: 
 var $693=$2;
 var $694=$skipatstart;
 var $695=(($693+$694)|0);
 HEAP32[(($ptr)>>2)]=$695;
 var $696=$codestart;
 HEAP32[(($code)>>2)]=$696;
 var $697=HEAP32[(($code)>>2)];
 HEAP8[($697)]=-125;
 var $698=$re;
 var $699=(($698+8)|0);
 var $700=HEAP32[(($699)>>2)];
 var $701=$cd;
 var $702=_compile_regex($700,$code,$ptr,$errorcode,0,0,0,0,$firstchar,$firstcharflags,$reqchar,$reqcharflags,0,$701,0);
 var $703=$cd;
 var $704=(($703+64)|0);
 var $705=HEAP32[(($704)>>2)];
 var $706=(($705)&65535);
 var $707=$re;
 var $708=(($707+30)|0);
 HEAP16[(($708)>>1)]=$706;
 var $709=$cd;
 var $710=(($709+76)|0);
 var $711=HEAP32[(($710)>>2)];
 var $712=(($711)&65535);
 var $713=$re;
 var $714=(($713+32)|0);
 HEAP16[(($714)>>1)]=$712;
 var $715=$cd;
 var $716=(($715+72)|0);
 var $717=HEAP32[(($716)>>2)];
 var $718=(($717)&65535);
 var $719=$re;
 var $720=(($719+28)|0);
 HEAP16[(($720)>>1)]=$718;
 var $721=$cd;
 var $722=(($721+100)|0);
 var $723=HEAP32[(($722)>>2)];
 var $724=$723|1;
 var $725=$re;
 var $726=(($725+12)|0);
 HEAP32[(($726)>>2)]=$724;
 var $727=$cd;
 var $728=(($727+108)|0);
 var $729=HEAP32[(($728)>>2)];
 var $730=($729|0)!=0;
 if($730){label=131;break;}else{label=132;break;}
 case 131: 
 HEAP32[(($reqchar)>>2)]=0;
 HEAP32[(($reqcharflags)>>2)]=-1;
 label=132;break;
 case 132: 
 var $733=HEAP32[(($errorcode)>>2)];
 var $734=($733|0)==0;
 if($734){label=133;break;}else{label=135;break;}
 case 133: 
 var $736=HEAP32[(($ptr)>>2)];
 var $737=HEAP8[($736)];
 var $738=($737&255);
 var $739=($738|0)!=0;
 if($739){label=134;break;}else{label=135;break;}
 case 134: 
 HEAP32[(($errorcode)>>2)]=22;
 label=135;break;
 case 135: 
 var $742=HEAP32[(($code)>>2)];
 var $743=(($742+1)|0);
 HEAP32[(($code)>>2)]=$743;
 HEAP8[($742)]=0;
 var $744=HEAP32[(($code)>>2)];
 var $745=$codestart;
 var $746=$744;
 var $747=$745;
 var $748=((($746)-($747))|0);
 var $749=HEAP32[(($length)>>2)];
 var $750=($748|0)>($749|0);
 if($750){label=136;break;}else{label=137;break;}
 case 136: 
 HEAP32[(($errorcode)>>2)]=23;
 label=137;break;
 case 137: 
 var $753=$cd;
 var $754=(($753+32)|0);
 var $755=HEAP32[(($754)>>2)];
 var $756=$cd;
 var $757=(($756+16)|0);
 var $758=HEAP32[(($757)>>2)];
 var $759=($755>>>0)>($758>>>0);
 if($759){label=138;break;}else{label=149;break;}
 case 138: 
 $prev_recno=-1;
 $groupptr=0;
 label=139;break;
 case 139: 
 var $762=HEAP32[(($errorcode)>>2)];
 var $763=($762|0)==0;
 if($763){label=140;break;}else{var $773=0;label=141;break;}
 case 140: 
 var $765=$cd;
 var $766=(($765+32)|0);
 var $767=HEAP32[(($766)>>2)];
 var $768=$cd;
 var $769=(($768+16)|0);
 var $770=HEAP32[(($769)>>2)];
 var $771=($767>>>0)>($770>>>0);
 var $773=$771;label=141;break;
 case 141: 
 var $773;
 if($773){label=142;break;}else{label=148;break;}
 case 142: 
 var $775=$cd;
 var $776=(($775+32)|0);
 var $777=HEAP32[(($776)>>2)];
 var $778=((($777)-(2))|0);
 HEAP32[(($776)>>2)]=$778;
 var $779=$cd;
 var $780=(($779+32)|0);
 var $781=HEAP32[(($780)>>2)];
 var $782=(($781)|0);
 var $783=HEAP8[($782)];
 var $784=($783&255);
 var $785=$784<<8;
 var $786=$cd;
 var $787=(($786+32)|0);
 var $788=HEAP32[(($787)>>2)];
 var $789=(($788+1)|0);
 var $790=HEAP8[($789)];
 var $791=($790&255);
 var $792=$785|$791;
 $offset=$792;
 var $793=$offset;
 var $794=$codestart;
 var $795=(($794+$793)|0);
 var $796=HEAP8[($795)];
 var $797=($796&255);
 var $798=$797<<8;
 var $799=$offset;
 var $800=((($799)+(1))|0);
 var $801=$codestart;
 var $802=(($801+$800)|0);
 var $803=HEAP8[($802)];
 var $804=($803&255);
 var $805=$798|$804;
 $recno=$805;
 var $806=$recno;
 var $807=$prev_recno;
 var $808=($806|0)!=($807|0);
 if($808){label=143;break;}else{label=144;break;}
 case 143: 
 var $810=$codestart;
 var $811=$utf;
 var $812=$recno;
 var $813=__pcre_find_bracket($810,$811,$812);
 $groupptr=$813;
 var $814=$recno;
 $prev_recno=$814;
 label=144;break;
 case 144: 
 var $816=$groupptr;
 var $817=($816|0)==0;
 if($817){label=145;break;}else{label=146;break;}
 case 145: 
 HEAP32[(($errorcode)>>2)]=53;
 label=147;break;
 case 146: 
 var $820=$groupptr;
 var $821=$codestart;
 var $822=$820;
 var $823=$821;
 var $824=((($822)-($823))|0);
 var $825=$824>>8;
 var $826=(($825)&255);
 var $827=$offset;
 var $828=$codestart;
 var $829=(($828+$827)|0);
 HEAP8[($829)]=$826;
 var $830=$groupptr;
 var $831=$codestart;
 var $832=$830;
 var $833=$831;
 var $834=((($832)-($833))|0);
 var $835=$834&255;
 var $836=(($835)&255);
 var $837=$offset;
 var $838=((($837)+(1))|0);
 var $839=$codestart;
 var $840=(($839+$838)|0);
 HEAP8[($840)]=$836;
 label=147;break;
 case 147: 
 label=139;break;
 case 148: 
 label=149;break;
 case 149: 
 var $844=$cd;
 var $845=(($844+60)|0);
 var $846=HEAP32[(($845)>>2)];
 var $847=($846|0)>4096;
 if($847){label=150;break;}else{label=151;break;}
 case 150: 
 var $849=HEAP32[((512)>>2)];
 var $850=$cd;
 var $851=(($850+16)|0);
 var $852=HEAP32[(($851)>>2)];
 FUNCTION_TABLE[$849]($852);
 label=151;break;
 case 151: 
 var $854=$cd;
 var $855=(($854+16)|0);
 HEAP32[(($855)>>2)]=0;
 var $856=HEAP32[(($errorcode)>>2)];
 var $857=($856|0)==0;
 if($857){label=152;break;}else{label=154;break;}
 case 152: 
 var $859=$re;
 var $860=(($859+32)|0);
 var $861=HEAP16[(($860)>>1)];
 var $862=($861&65535);
 var $863=$re;
 var $864=(($863+30)|0);
 var $865=HEAP16[(($864)>>1)];
 var $866=($865&65535);
 var $867=($862|0)>($866|0);
 if($867){label=153;break;}else{label=154;break;}
 case 153: 
 HEAP32[(($errorcode)>>2)]=15;
 label=154;break;
 case 154: 
 var $870=$3;
 var $871=$870&131072;
 var $872=($871|0)==0;
 if($872){label=155;break;}else{label=156;break;}
 case 155: 
 var $874=$codestart;
 var $875=$utf;
 var $876=$cd;
 _auto_possessify($874,$875,$876);
 label=156;break;
 case 156: 
 var $878=$cd;
 var $879=(($878+116)|0);
 var $880=HEAP32[(($879)>>2)];
 var $881=($880|0)!=0;
 if($881){label=157;break;}else{label=171;break;}
 case 157: 
 var $883=$codestart;
 $cc=$883;
 var $884=$codestart;
 var $885=$utf;
 var $886=__pcre_find_bracket($884,$885,-1);
 $cc=$886;
 label=158;break;
 case 158: 
 var $888=$cc;
 var $889=($888|0)!=0;
 if($889){label=159;break;}else{label=170;break;}
 case 159: 
 var $891=$cc;
 var $892=(($891+1)|0);
 var $893=HEAP8[($892)];
 var $894=($893&255);
 var $895=$894<<8;
 var $896=$cc;
 var $897=(($896+2)|0);
 var $898=HEAP8[($897)];
 var $899=($898&255);
 var $900=$895|$899;
 var $901=($900|0)==0;
 if($901){label=160;break;}else{label=168;break;}
 case 160: 
 var $903=$cc;
 var $904=((($903)-(1))|0);
 var $905=((($904)-(2))|0);
 var $906=$cc;
 var $907=((($906)-(2))|0);
 var $908=HEAP8[($907)];
 var $909=($908&255);
 var $910=$909<<8;
 var $911=$cc;
 var $912=((($911)-(1))|0);
 var $913=HEAP8[($912)];
 var $914=($913&255);
 var $915=$910|$914;
 var $916=(($905+$915)|0);
 $be=$916;
 var $917=$be;
 var $918=HEAP8[($917)];
 var $919=($918&255);
 $end_op=$919;
 var $920=$be;
 HEAP8[($920)]=0;
 var $921=$cc;
 var $922=$re;
 var $923=(($922+8)|0);
 var $924=HEAP32[(($923)>>2)];
 var $925=$924&2048;
 var $926=($925|0)!=0;
 var $927=($926&1);
 var $928=$cd;
 var $929=_find_fixedlength($921,$927,1,$928);
 $fixed_length=$929;
 var $930=$end_op;
 var $931=(($930)&255);
 var $932=$be;
 HEAP8[($932)]=$931;
 var $933=$fixed_length;
 var $934=($933|0)<0;
 if($934){label=161;break;}else{label=165;break;}
 case 161: 
 var $936=$fixed_length;
 var $937=($936|0)==-2;
 if($937){label=162;break;}else{label=163;break;}
 case 162: 
 var $944=36;label=164;break;
 case 163: 
 var $940=$fixed_length;
 var $941=($940|0)==-4;
 var $942=($941?70:25);
 var $944=$942;label=164;break;
 case 164: 
 var $944;
 HEAP32[(($errorcode)>>2)]=$944;
 label=170;break;
 case 165: 
 var $946=$fixed_length;
 var $947=$cd;
 var $948=(($947+72)|0);
 var $949=HEAP32[(($948)>>2)];
 var $950=($946|0)>($949|0);
 if($950){label=166;break;}else{label=167;break;}
 case 166: 
 var $952=$fixed_length;
 var $953=$cd;
 var $954=(($953+72)|0);
 HEAP32[(($954)>>2)]=$952;
 label=167;break;
 case 167: 
 var $956=$fixed_length;
 var $957=$956>>8;
 var $958=(($957)&255);
 var $959=$cc;
 var $960=(($959+1)|0);
 HEAP8[($960)]=$958;
 var $961=$fixed_length;
 var $962=$961&255;
 var $963=(($962)&255);
 var $964=$cc;
 var $965=(($964+2)|0);
 HEAP8[($965)]=$963;
 label=168;break;
 case 168: 
 var $967=$cc;
 var $968=(($967+3)|0);
 $cc=$968;
 label=169;break;
 case 169: 
 var $970=$cc;
 var $971=$utf;
 var $972=__pcre_find_bracket($970,$971,-1);
 $cc=$972;
 label=158;break;
 case 170: 
 label=171;break;
 case 171: 
 var $975=HEAP32[(($errorcode)>>2)];
 var $976=($975|0)!=0;
 if($976){label=172;break;}else{label=177;break;}
 case 172: 
 var $978=HEAP32[((512)>>2)];
 var $979=$re;
 var $980=$979;
 FUNCTION_TABLE[$978]($980);
 label=173;break;
 case 173: 
 var $982=HEAP32[(($ptr)>>2)];
 var $983=$2;
 var $984=$982;
 var $985=$983;
 var $986=((($984)-($985))|0);
 var $987=$6;
 HEAP32[(($987)>>2)]=$986;
 label=174;break;
 case 174: 
 var $989=HEAP32[(($errorcode)>>2)];
 var $990=_find_error_text($989);
 var $991=$5;
 HEAP32[(($991)>>2)]=$990;
 var $992=$4;
 var $993=($992|0)!=0;
 if($993){label=175;break;}else{label=176;break;}
 case 175: 
 var $995=HEAP32[(($errorcode)>>2)];
 var $996=$4;
 HEAP32[(($996)>>2)]=$995;
 label=176;break;
 case 176: 
 $1=0;
 label=207;break;
 case 177: 
 var $999=$re;
 var $1000=(($999+8)|0);
 var $1001=HEAP32[(($1000)>>2)];
 var $1002=$1001&16;
 var $1003=($1002|0)==0;
 if($1003){label=178;break;}else{label=193;break;}
 case 178: 
 var $1005=$codestart;
 var $1006=$cd;
 var $1007=_is_anchored($1005,0,$1006,0);
 var $1008=($1007|0)!=0;
 if($1008){label=179;break;}else{label=180;break;}
 case 179: 
 var $1010=$re;
 var $1011=(($1010+8)|0);
 var $1012=HEAP32[(($1011)>>2)];
 var $1013=$1012|16;
 HEAP32[(($1011)>>2)]=$1013;
 label=192;break;
 case 180: 
 var $1015=HEAP32[(($firstcharflags)>>2)];
 var $1016=($1015|0)<0;
 if($1016){label=181;break;}else{label=182;break;}
 case 181: 
 var $1018=$codestart;
 var $1019=_find_firstassertedchar($1018,$firstcharflags,0);
 HEAP32[(($firstchar)>>2)]=$1019;
 label=182;break;
 case 182: 
 var $1021=HEAP32[(($firstcharflags)>>2)];
 var $1022=($1021|0)>=0;
 if($1022){label=183;break;}else{label=188;break;}
 case 183: 
 var $1024=HEAP32[(($firstchar)>>2)];
 var $1025=$1024&255;
 var $1026=(($1025)&65535);
 var $1027=$re;
 var $1028=(($1027+24)|0);
 HEAP16[(($1028)>>1)]=$1026;
 var $1029=HEAP32[(($firstcharflags)>>2)];
 var $1030=$1029&1;
 var $1031=($1030|0)!=0;
 if($1031){label=184;break;}else{label=187;break;}
 case 184: 
 var $1033=$re;
 var $1034=(($1033+24)|0);
 var $1035=HEAP16[(($1034)>>1)];
 var $1036=($1035&65535);
 var $1037=$cd;
 var $1038=(($1037+4)|0);
 var $1039=HEAP32[(($1038)>>2)];
 var $1040=(($1039+$1036)|0);
 var $1041=HEAP8[($1040)];
 var $1042=($1041&255);
 var $1043=$re;
 var $1044=(($1043+24)|0);
 var $1045=HEAP16[(($1044)>>1)];
 var $1046=($1045&65535);
 var $1047=($1042|0)!=($1046|0);
 if($1047){label=185;break;}else{label=186;break;}
 case 185: 
 var $1049=$re;
 var $1050=(($1049+12)|0);
 var $1051=HEAP32[(($1050)>>2)];
 var $1052=$1051|32;
 HEAP32[(($1050)>>2)]=$1052;
 label=186;break;
 case 186: 
 label=187;break;
 case 187: 
 var $1055=$re;
 var $1056=(($1055+12)|0);
 var $1057=HEAP32[(($1056)>>2)];
 var $1058=$1057|16;
 HEAP32[(($1056)>>2)]=$1058;
 label=191;break;
 case 188: 
 var $1060=$codestart;
 var $1061=$cd;
 var $1062=_is_startline($1060,0,$1061,0);
 var $1063=($1062|0)!=0;
 if($1063){label=189;break;}else{label=190;break;}
 case 189: 
 var $1065=$re;
 var $1066=(($1065+12)|0);
 var $1067=HEAP32[(($1066)>>2)];
 var $1068=$1067|256;
 HEAP32[(($1066)>>2)]=$1068;
 label=190;break;
 case 190: 
 label=191;break;
 case 191: 
 label=192;break;
 case 192: 
 label=193;break;
 case 193: 
 var $1073=HEAP32[(($reqcharflags)>>2)];
 var $1074=($1073|0)>=0;
 if($1074){label=194;break;}else{label=201;break;}
 case 194: 
 var $1076=$re;
 var $1077=(($1076+8)|0);
 var $1078=HEAP32[(($1077)>>2)];
 var $1079=$1078&16;
 var $1080=($1079|0)==0;
 if($1080){label=196;break;}else{label=195;break;}
 case 195: 
 var $1082=HEAP32[(($reqcharflags)>>2)];
 var $1083=$1082&2;
 var $1084=($1083|0)!=0;
 if($1084){label=196;break;}else{label=201;break;}
 case 196: 
 var $1086=HEAP32[(($reqchar)>>2)];
 var $1087=$1086&255;
 var $1088=(($1087)&65535);
 var $1089=$re;
 var $1090=(($1089+26)|0);
 HEAP16[(($1090)>>1)]=$1088;
 var $1091=HEAP32[(($reqcharflags)>>2)];
 var $1092=$1091&1;
 var $1093=($1092|0)!=0;
 if($1093){label=197;break;}else{label=200;break;}
 case 197: 
 var $1095=$re;
 var $1096=(($1095+26)|0);
 var $1097=HEAP16[(($1096)>>1)];
 var $1098=($1097&65535);
 var $1099=$cd;
 var $1100=(($1099+4)|0);
 var $1101=HEAP32[(($1100)>>2)];
 var $1102=(($1101+$1098)|0);
 var $1103=HEAP8[($1102)];
 var $1104=($1103&255);
 var $1105=$re;
 var $1106=(($1105+26)|0);
 var $1107=HEAP16[(($1106)>>1)];
 var $1108=($1107&65535);
 var $1109=($1104|0)!=($1108|0);
 if($1109){label=198;break;}else{label=199;break;}
 case 198: 
 var $1111=$re;
 var $1112=(($1111+12)|0);
 var $1113=HEAP32[(($1112)>>2)];
 var $1114=$1113|128;
 HEAP32[(($1112)>>2)]=$1114;
 label=199;break;
 case 199: 
 label=200;break;
 case 200: 
 var $1117=$re;
 var $1118=(($1117+12)|0);
 var $1119=HEAP32[(($1118)>>2)];
 var $1120=$1119|64;
 HEAP32[(($1118)>>2)]=$1120;
 label=201;break;
 case 201: 
 label=202;break;
 case 202: 
 var $1123=$codestart;
 var $1124=HEAP32[(($code)>>2)];
 var $1125=$utf;
 var $1126=$cd;
 var $1127=_could_be_empty_branch($1123,$1124,$1125,$1126,0);
 var $1128=($1127|0)!=0;
 if($1128){label=203;break;}else{label=204;break;}
 case 203: 
 var $1130=$re;
 var $1131=(($1130+12)|0);
 var $1132=HEAP32[(($1131)>>2)];
 var $1133=$1132|32768;
 HEAP32[(($1131)>>2)]=$1133;
 label=206;break;
 case 204: 
 var $1135=$codestart;
 var $1136=(($1135+1)|0);
 var $1137=HEAP8[($1136)];
 var $1138=($1137&255);
 var $1139=$1138<<8;
 var $1140=$codestart;
 var $1141=(($1140+2)|0);
 var $1142=HEAP8[($1141)];
 var $1143=($1142&255);
 var $1144=$1139|$1143;
 var $1145=$codestart;
 var $1146=(($1145+$1144)|0);
 $codestart=$1146;
 label=205;break;
 case 205: 
 var $1148=$codestart;
 var $1149=HEAP8[($1148)];
 var $1150=($1149&255);
 var $1151=($1150|0)==119;
 if($1151){label=202;break;}else{label=206;break;}
 case 206: 
 var $1153=$re;
 var $1154=$1153;
 $1=$1154;
 label=207;break;
 case 207: 
 var $1156=$1;
 STACKTOP=sp;return $1156;
  default: assert(0, "bad label: " + label);
 }
}
function _compile_regex($options,$codeptr,$ptrptr,$errorcodeptr,$lookbehind,$reset_bracount,$skipbytes,$cond_depth,$firstcharptr,$firstcharflagsptr,$reqcharptr,$reqcharflagsptr,$bcptr,$cd,$lengthptr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+80)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=sp;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $14;
 var $15;
 var $16;
 var $ptr=(sp)+(8);
 var $code=(sp)+(16);
 var $last_branch;
 var $start_bracket;
 var $reverse_count;
 var $capitem=(sp)+(24);
 var $capnumber;
 var $firstchar;
 var $reqchar;
 var $firstcharflags;
 var $reqcharflags;
 var $branchfirstchar=(sp)+(32);
 var $branchreqchar=(sp)+(40);
 var $branchfirstcharflags=(sp)+(48);
 var $branchreqcharflags=(sp)+(56);
 var $length=(sp)+(64);
 var $orig_bracount;
 var $max_bracount;
 var $bc=(sp)+(72);
 var $fixed_length;
 var $branch_length;
 var $prev_length;
 HEAP32[(($2)>>2)]=$options;
 $3=$codeptr;
 $4=$ptrptr;
 $5=$errorcodeptr;
 $6=$lookbehind;
 $7=$reset_bracount;
 $8=$skipbytes;
 $9=$cond_depth;
 $10=$firstcharptr;
 $11=$firstcharflagsptr;
 $12=$reqcharptr;
 $13=$reqcharflagsptr;
 $14=$bcptr;
 $15=$cd;
 $16=$lengthptr;
 var $17=$4;
 var $18=HEAP32[(($17)>>2)];
 HEAP32[(($ptr)>>2)]=$18;
 var $19=$3;
 var $20=HEAP32[(($19)>>2)];
 HEAP32[(($code)>>2)]=$20;
 var $21=HEAP32[(($code)>>2)];
 $last_branch=$21;
 var $22=HEAP32[(($code)>>2)];
 $start_bracket=$22;
 $reverse_count=0;
 $capnumber=0;
 var $23=HEAP32[((6928)>>2)];
 var $24=($23|0)!=0;
 if($24){label=2;break;}else{label=4;break;}
 case 2: 
 var $26=HEAP32[((6928)>>2)];
 var $27=FUNCTION_TABLE[$26]();
 var $28=($27|0)!=0;
 if($28){label=3;break;}else{label=4;break;}
 case 3: 
 var $30=$5;
 HEAP32[(($30)>>2)]=85;
 $1=0;
 label=69;break;
 case 4: 
 var $32=$14;
 var $33=(($bc)|0);
 HEAP32[(($33)>>2)]=$32;
 var $34=HEAP32[(($code)>>2)];
 var $35=(($bc+4)|0);
 HEAP32[(($35)>>2)]=$34;
 $reqchar=0;
 $firstchar=0;
 $reqcharflags=-2;
 $firstcharflags=-2;
 var $36=$8;
 var $37=((($36)+(6))|0);
 HEAP32[(($length)>>2)]=$37;
 var $38=HEAP32[(($code)>>2)];
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=($40|0)==133;
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $43=HEAP32[(($code)>>2)];
 var $44=(($43+3)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=$46<<8;
 var $48=HEAP32[(($code)>>2)];
 var $49=(($48+4)|0);
 var $50=HEAP8[($49)];
 var $51=($50&255);
 var $52=$47|$51;
 $capnumber=$52;
 var $53=$capnumber;
 var $54=(($53)&65535);
 var $55=(($capitem+4)|0);
 HEAP16[(($55)>>1)]=$54;
 var $56=$15;
 var $57=(($56+36)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(($capitem)|0);
 HEAP32[(($59)>>2)]=$58;
 var $60=(($capitem+6)|0);
 HEAP16[(($60)>>1)]=0;
 var $61=$15;
 var $62=(($61+36)|0);
 HEAP32[(($62)>>2)]=$capitem;
 label=6;break;
 case 6: 
 var $64=HEAP32[(($code)>>2)];
 var $65=(($64+1)|0);
 HEAP8[($65)]=0;
 var $66=HEAP32[(($code)>>2)];
 var $67=(($66+2)|0);
 HEAP8[($67)]=0;
 var $68=$8;
 var $69=((($68)+(3))|0);
 var $70=HEAP32[(($code)>>2)];
 var $71=(($70+$69)|0);
 HEAP32[(($code)>>2)]=$71;
 var $72=$15;
 var $73=(($72+64)|0);
 var $74=HEAP32[(($73)>>2)];
 $max_bracount=$74;
 $orig_bracount=$74;
 label=7;break;
 case 7: 
 var $76=$7;
 var $77=($76|0)!=0;
 if($77){label=8;break;}else{label=9;break;}
 case 8: 
 var $79=$orig_bracount;
 var $80=$15;
 var $81=(($80+64)|0);
 HEAP32[(($81)>>2)]=$79;
 label=9;break;
 case 9: 
 var $83=$6;
 var $84=($83|0)!=0;
 if($84){label=10;break;}else{label=11;break;}
 case 10: 
 var $86=HEAP32[(($code)>>2)];
 var $87=(($86+1)|0);
 HEAP32[(($code)>>2)]=$87;
 HEAP8[($86)]=124;
 var $88=HEAP32[(($code)>>2)];
 $reverse_count=$88;
 var $89=HEAP32[(($code)>>2)];
 var $90=(($89)|0);
 HEAP8[($90)]=0;
 var $91=HEAP32[(($code)>>2)];
 var $92=(($91+1)|0);
 HEAP8[($92)]=0;
 var $93=HEAP32[(($code)>>2)];
 var $94=(($93+2)|0);
 HEAP32[(($code)>>2)]=$94;
 var $95=HEAP32[(($length)>>2)];
 var $96=((($95)+(3))|0);
 HEAP32[(($length)>>2)]=$96;
 label=11;break;
 case 11: 
 var $98=$5;
 var $99=$9;
 var $100=$15;
 var $101=$16;
 var $102=($101|0)==0;
 if($102){label=12;break;}else{label=13;break;}
 case 12: 
 var $106=0;label=14;break;
 case 13: 
 var $106=$length;label=14;break;
 case 14: 
 var $106;
 var $107=_compile_branch($2,$code,$ptr,$98,$branchfirstchar,$branchfirstcharflags,$branchreqchar,$branchreqcharflags,$bc,$99,$100,$106);
 var $108=($107|0)!=0;
 if($108){label=16;break;}else{label=15;break;}
 case 15: 
 var $110=HEAP32[(($ptr)>>2)];
 var $111=$4;
 HEAP32[(($111)>>2)]=$110;
 $1=0;
 label=69;break;
 case 16: 
 var $113=$15;
 var $114=(($113+64)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=$max_bracount;
 var $117=($115>>>0)>($116>>>0);
 if($117){label=17;break;}else{label=18;break;}
 case 17: 
 var $119=$15;
 var $120=(($119+64)|0);
 var $121=HEAP32[(($120)>>2)];
 $max_bracount=$121;
 label=18;break;
 case 18: 
 var $123=$16;
 var $124=($123|0)==0;
 if($124){label=19;break;}else{label=50;break;}
 case 19: 
 var $126=$last_branch;
 var $127=HEAP8[($126)];
 var $128=($127&255);
 var $129=($128|0)!=119;
 if($129){label=20;break;}else{label=21;break;}
 case 20: 
 var $131=HEAP32[(($branchfirstchar)>>2)];
 $firstchar=$131;
 var $132=HEAP32[(($branchfirstcharflags)>>2)];
 $firstcharflags=$132;
 var $133=HEAP32[(($branchreqchar)>>2)];
 $reqchar=$133;
 var $134=HEAP32[(($branchreqcharflags)>>2)];
 $reqcharflags=$134;
 label=36;break;
 case 21: 
 var $136=$firstcharflags;
 var $137=($136|0)>=0;
 if($137){label=22;break;}else{label=27;break;}
 case 22: 
 var $139=$firstcharflags;
 var $140=HEAP32[(($branchfirstcharflags)>>2)];
 var $141=($139|0)!=($140|0);
 if($141){label=24;break;}else{label=23;break;}
 case 23: 
 var $143=$firstchar;
 var $144=HEAP32[(($branchfirstchar)>>2)];
 var $145=($143|0)!=($144|0);
 if($145){label=24;break;}else{label=27;break;}
 case 24: 
 var $147=$reqcharflags;
 var $148=($147|0)<0;
 if($148){label=25;break;}else{label=26;break;}
 case 25: 
 var $150=$firstchar;
 $reqchar=$150;
 var $151=$firstcharflags;
 $reqcharflags=$151;
 label=26;break;
 case 26: 
 $firstcharflags=-1;
 label=27;break;
 case 27: 
 var $154=$firstcharflags;
 var $155=($154|0)<0;
 if($155){label=28;break;}else{label=31;break;}
 case 28: 
 var $157=HEAP32[(($branchfirstcharflags)>>2)];
 var $158=($157|0)>=0;
 if($158){label=29;break;}else{label=31;break;}
 case 29: 
 var $160=HEAP32[(($branchreqcharflags)>>2)];
 var $161=($160|0)<0;
 if($161){label=30;break;}else{label=31;break;}
 case 30: 
 var $163=HEAP32[(($branchfirstchar)>>2)];
 HEAP32[(($branchreqchar)>>2)]=$163;
 var $164=HEAP32[(($branchfirstcharflags)>>2)];
 HEAP32[(($branchreqcharflags)>>2)]=$164;
 label=31;break;
 case 31: 
 var $166=$reqcharflags;
 var $167=$166&-3;
 var $168=HEAP32[(($branchreqcharflags)>>2)];
 var $169=$168&-3;
 var $170=($167|0)!=($169|0);
 if($170){label=33;break;}else{label=32;break;}
 case 32: 
 var $172=$reqchar;
 var $173=HEAP32[(($branchreqchar)>>2)];
 var $174=($172|0)!=($173|0);
 if($174){label=33;break;}else{label=34;break;}
 case 33: 
 $reqcharflags=-1;
 label=35;break;
 case 34: 
 var $177=HEAP32[(($branchreqchar)>>2)];
 $reqchar=$177;
 var $178=HEAP32[(($branchreqcharflags)>>2)];
 var $179=$reqcharflags;
 var $180=$179|$178;
 $reqcharflags=$180;
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $183=$6;
 var $184=($183|0)!=0;
 if($184){label=37;break;}else{label=49;break;}
 case 37: 
 var $186=HEAP32[(($code)>>2)];
 HEAP8[($186)]=0;
 var $187=$last_branch;
 var $188=HEAP32[(($2)>>2)];
 var $189=$188&2048;
 var $190=($189|0)!=0;
 var $191=($190&1);
 var $192=$15;
 var $193=_find_fixedlength($187,$191,0,$192);
 $fixed_length=$193;
 var $194=$fixed_length;
 var $195=($194|0)==-3;
 if($195){label=38;break;}else{label=39;break;}
 case 38: 
 var $197=$15;
 var $198=(($197+116)|0);
 HEAP32[(($198)>>2)]=1;
 label=48;break;
 case 39: 
 var $200=$fixed_length;
 var $201=($200|0)<0;
 if($201){label=40;break;}else{label=44;break;}
 case 40: 
 var $203=$fixed_length;
 var $204=($203|0)==-2;
 if($204){label=41;break;}else{label=42;break;}
 case 41: 
 var $211=36;label=43;break;
 case 42: 
 var $207=$fixed_length;
 var $208=($207|0)==-4;
 var $209=($208?70:25);
 var $211=$209;label=43;break;
 case 43: 
 var $211;
 var $212=$5;
 HEAP32[(($212)>>2)]=$211;
 var $213=HEAP32[(($ptr)>>2)];
 var $214=$4;
 HEAP32[(($214)>>2)]=$213;
 $1=0;
 label=69;break;
 case 44: 
 var $216=$fixed_length;
 var $217=$15;
 var $218=(($217+72)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($216|0)>($219|0);
 if($220){label=45;break;}else{label=46;break;}
 case 45: 
 var $222=$fixed_length;
 var $223=$15;
 var $224=(($223+72)|0);
 HEAP32[(($224)>>2)]=$222;
 label=46;break;
 case 46: 
 var $226=$fixed_length;
 var $227=$226>>8;
 var $228=(($227)&255);
 var $229=$reverse_count;
 var $230=(($229)|0);
 HEAP8[($230)]=$228;
 var $231=$fixed_length;
 var $232=$231&255;
 var $233=(($232)&255);
 var $234=$reverse_count;
 var $235=(($234+1)|0);
 HEAP8[($235)]=$233;
 label=47;break;
 case 47: 
 label=48;break;
 case 48: 
 label=49;break;
 case 49: 
 label=50;break;
 case 50: 
 var $240=HEAP32[(($ptr)>>2)];
 var $241=HEAP8[($240)];
 var $242=($241&255);
 var $243=($242|0)!=124;
 if($243){label=51;break;}else{label=65;break;}
 case 51: 
 var $245=$16;
 var $246=($245|0)==0;
 if($246){label=52;break;}else{label=56;break;}
 case 52: 
 var $248=HEAP32[(($code)>>2)];
 var $249=$last_branch;
 var $250=$248;
 var $251=$249;
 var $252=((($250)-($251))|0);
 $branch_length=$252;
 label=53;break;
 case 53: 
 var $254=$last_branch;
 var $255=(($254+1)|0);
 var $256=HEAP8[($255)];
 var $257=($256&255);
 var $258=$257<<8;
 var $259=$last_branch;
 var $260=(($259+2)|0);
 var $261=HEAP8[($260)];
 var $262=($261&255);
 var $263=$258|$262;
 $prev_length=$263;
 var $264=$branch_length;
 var $265=$264>>8;
 var $266=(($265)&255);
 var $267=$last_branch;
 var $268=(($267+1)|0);
 HEAP8[($268)]=$266;
 var $269=$branch_length;
 var $270=$269&255;
 var $271=(($270)&255);
 var $272=$last_branch;
 var $273=(($272+2)|0);
 HEAP8[($273)]=$271;
 var $274=$prev_length;
 $branch_length=$274;
 var $275=$branch_length;
 var $276=$last_branch;
 var $277=(((-$275))|0);
 var $278=(($276+$277)|0);
 $last_branch=$278;
 label=54;break;
 case 54: 
 var $280=$branch_length;
 var $281=($280|0)>0;
 if($281){label=53;break;}else{label=55;break;}
 case 55: 
 label=56;break;
 case 56: 
 var $284=HEAP32[(($code)>>2)];
 HEAP8[($284)]=120;
 var $285=HEAP32[(($code)>>2)];
 var $286=$start_bracket;
 var $287=$285;
 var $288=$286;
 var $289=((($287)-($288))|0);
 var $290=$289>>8;
 var $291=(($290)&255);
 var $292=HEAP32[(($code)>>2)];
 var $293=(($292+1)|0);
 HEAP8[($293)]=$291;
 var $294=HEAP32[(($code)>>2)];
 var $295=$start_bracket;
 var $296=$294;
 var $297=$295;
 var $298=((($296)-($297))|0);
 var $299=$298&255;
 var $300=(($299)&255);
 var $301=HEAP32[(($code)>>2)];
 var $302=(($301+2)|0);
 HEAP8[($302)]=$300;
 var $303=HEAP32[(($code)>>2)];
 var $304=(($303+3)|0);
 HEAP32[(($code)>>2)]=$304;
 var $305=$capnumber;
 var $306=($305|0)>0;
 if($306){label=57;break;}else{label=60;break;}
 case 57: 
 var $308=$15;
 var $309=(($308+36)|0);
 var $310=HEAP32[(($309)>>2)];
 var $311=(($310+6)|0);
 var $312=HEAP16[(($311)>>1)];
 var $313=(($312<<16)>>16)!=0;
 if($313){label=58;break;}else{label=59;break;}
 case 58: 
 var $315=$start_bracket;
 var $316=(($315+1)|0);
 var $317=(($316+2)|0);
 var $318=$start_bracket;
 var $319=HEAP32[(($code)>>2)];
 var $320=$start_bracket;
 var $321=$319;
 var $322=$320;
 var $323=((($321)-($322))|0);
 _memmove($317,$318,$323,1,0);
 var $324=$start_bracket;
 HEAP8[($324)]=-127;
 var $325=HEAP32[(($code)>>2)];
 var $326=(($325+3)|0);
 HEAP32[(($code)>>2)]=$326;
 var $327=HEAP32[(($code)>>2)];
 var $328=$start_bracket;
 var $329=$327;
 var $330=$328;
 var $331=((($329)-($330))|0);
 var $332=$331>>8;
 var $333=(($332)&255);
 var $334=$start_bracket;
 var $335=(($334+1)|0);
 HEAP8[($335)]=$333;
 var $336=HEAP32[(($code)>>2)];
 var $337=$start_bracket;
 var $338=$336;
 var $339=$337;
 var $340=((($338)-($339))|0);
 var $341=$340&255;
 var $342=(($341)&255);
 var $343=$start_bracket;
 var $344=(($343+2)|0);
 HEAP8[($344)]=$342;
 var $345=HEAP32[(($code)>>2)];
 HEAP8[($345)]=120;
 var $346=HEAP32[(($code)>>2)];
 var $347=$start_bracket;
 var $348=$346;
 var $349=$347;
 var $350=((($348)-($349))|0);
 var $351=$350>>8;
 var $352=(($351)&255);
 var $353=HEAP32[(($code)>>2)];
 var $354=(($353+1)|0);
 HEAP8[($354)]=$352;
 var $355=HEAP32[(($code)>>2)];
 var $356=$start_bracket;
 var $357=$355;
 var $358=$356;
 var $359=((($357)-($358))|0);
 var $360=$359&255;
 var $361=(($360)&255);
 var $362=HEAP32[(($code)>>2)];
 var $363=(($362+2)|0);
 HEAP8[($363)]=$361;
 var $364=HEAP32[(($code)>>2)];
 var $365=(($364+3)|0);
 HEAP32[(($code)>>2)]=$365;
 var $366=HEAP32[(($length)>>2)];
 var $367=((($366)+(6))|0);
 HEAP32[(($length)>>2)]=$367;
 label=59;break;
 case 59: 
 var $369=$15;
 var $370=(($369+36)|0);
 var $371=HEAP32[(($370)>>2)];
 var $372=(($371)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=$15;
 var $375=(($374+36)|0);
 HEAP32[(($375)>>2)]=$373;
 label=60;break;
 case 60: 
 var $377=$max_bracount;
 var $378=$15;
 var $379=(($378+64)|0);
 HEAP32[(($379)>>2)]=$377;
 var $380=HEAP32[(($code)>>2)];
 var $381=$3;
 HEAP32[(($381)>>2)]=$380;
 var $382=HEAP32[(($ptr)>>2)];
 var $383=$4;
 HEAP32[(($383)>>2)]=$382;
 var $384=$firstchar;
 var $385=$10;
 HEAP32[(($385)>>2)]=$384;
 var $386=$firstcharflags;
 var $387=$11;
 HEAP32[(($387)>>2)]=$386;
 var $388=$reqchar;
 var $389=$12;
 HEAP32[(($389)>>2)]=$388;
 var $390=$reqcharflags;
 var $391=$13;
 HEAP32[(($391)>>2)]=$390;
 var $392=$16;
 var $393=($392|0)!=0;
 if($393){label=61;break;}else{label=64;break;}
 case 61: 
 var $395=$16;
 var $396=HEAP32[(($395)>>2)];
 var $397=(((2147483627)-($396))|0);
 var $398=HEAP32[(($length)>>2)];
 var $399=($397|0)<($398|0);
 if($399){label=62;break;}else{label=63;break;}
 case 62: 
 var $401=$5;
 HEAP32[(($401)>>2)]=20;
 $1=0;
 label=69;break;
 case 63: 
 var $403=HEAP32[(($length)>>2)];
 var $404=$16;
 var $405=HEAP32[(($404)>>2)];
 var $406=((($405)+($403))|0);
 HEAP32[(($404)>>2)]=$406;
 label=64;break;
 case 64: 
 $1=1;
 label=69;break;
 case 65: 
 var $409=$16;
 var $410=($409|0)!=0;
 if($410){label=66;break;}else{label=67;break;}
 case 66: 
 var $412=$3;
 var $413=HEAP32[(($412)>>2)];
 var $414=(($413+1)|0);
 var $415=(($414+2)|0);
 var $416=$8;
 var $417=(($415+$416)|0);
 HEAP32[(($code)>>2)]=$417;
 var $418=HEAP32[(($length)>>2)];
 var $419=((($418)+(3))|0);
 HEAP32[(($length)>>2)]=$419;
 label=68;break;
 case 67: 
 var $421=HEAP32[(($code)>>2)];
 HEAP8[($421)]=119;
 var $422=HEAP32[(($code)>>2)];
 var $423=$last_branch;
 var $424=$422;
 var $425=$423;
 var $426=((($424)-($425))|0);
 var $427=$426>>8;
 var $428=(($427)&255);
 var $429=HEAP32[(($code)>>2)];
 var $430=(($429+1)|0);
 HEAP8[($430)]=$428;
 var $431=HEAP32[(($code)>>2)];
 var $432=$last_branch;
 var $433=$431;
 var $434=$432;
 var $435=((($433)-($434))|0);
 var $436=$435&255;
 var $437=(($436)&255);
 var $438=HEAP32[(($code)>>2)];
 var $439=(($438+2)|0);
 HEAP8[($439)]=$437;
 var $440=HEAP32[(($code)>>2)];
 $last_branch=$440;
 var $441=(($bc+4)|0);
 HEAP32[(($441)>>2)]=$440;
 var $442=HEAP32[(($code)>>2)];
 var $443=(($442+3)|0);
 HEAP32[(($code)>>2)]=$443;
 label=68;break;
 case 68: 
 var $445=HEAP32[(($ptr)>>2)];
 var $446=(($445+1)|0);
 HEAP32[(($ptr)>>2)]=$446;
 label=7;break;
 case 69: 
 var $448=$1;
 STACKTOP=sp;return $448;
  default: assert(0, "bad label: " + label);
 }
}
function _add_name($cd,$name,$length,$groupno){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $i;
 var $slot;
 var $crc;
 $1=$cd;
 $2=$name;
 $3=$length;
 $4=$groupno;
 var $5=$1;
 var $6=(($5+44)|0);
 var $7=HEAP32[(($6)>>2)];
 $slot=$7;
 $i=0;
 label=2;break;
 case 2: 
 var $9=$i;
 var $10=$1;
 var $11=(($10+48)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($9|0)<($12|0);
 if($13){label=3;break;}else{label=10;break;}
 case 3: 
 var $15=$2;
 var $16=$slot;
 var $17=(($16+2)|0);
 var $18=$3;
 var $19=_memcmp($15,$17,$18);
 $crc=$19;
 var $20=$crc;
 var $21=($20|0)==0;
 if($21){label=4;break;}else{label=6;break;}
 case 4: 
 var $23=$3;
 var $24=((($23)+(2))|0);
 var $25=$slot;
 var $26=(($25+$24)|0);
 var $27=HEAP8[($26)];
 var $28=($27&255);
 var $29=($28|0)!=0;
 if($29){label=5;break;}else{label=6;break;}
 case 5: 
 $crc=-1;
 label=6;break;
 case 6: 
 var $32=$crc;
 var $33=($32|0)<0;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=$slot;
 var $36=$1;
 var $37=(($36+52)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($35+$38)|0);
 var $40=$slot;
 var $41=$1;
 var $42=(($41+48)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$i;
 var $45=((($43)-($44))|0);
 var $46=$1;
 var $47=(($46+52)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=(Math_imul($45,$48)|0);
 _memmove($39,$40,$49,1,0);
 label=10;break;
 case 8: 
 var $51=$1;
 var $52=(($51+52)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=$slot;
 var $55=(($54+$53)|0);
 $slot=$55;
 label=9;break;
 case 9: 
 var $57=$i;
 var $58=((($57)+(1))|0);
 $i=$58;
 label=2;break;
 case 10: 
 var $60=$4;
 var $61=$60>>>8;
 var $62=(($61)&255);
 var $63=$slot;
 var $64=(($63)|0);
 HEAP8[($64)]=$62;
 var $65=$4;
 var $66=$65&255;
 var $67=(($66)&255);
 var $68=$slot;
 var $69=(($68+1)|0);
 HEAP8[($69)]=$67;
 var $70=$slot;
 var $71=(($70+2)|0);
 var $72=$2;
 var $73=$3;
 assert($73 % 1 === 0);(_memcpy($71, $72, $73)|0);
 var $74=$3;
 var $75=((($74)+(2))|0);
 var $76=$slot;
 var $77=(($76+$75)|0);
 HEAP8[($77)]=0;
 var $78=$1;
 var $79=(($78+48)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=((($80)+(1))|0);
 HEAP32[(($79)>>2)]=$81;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _auto_possessify($code,$utf,$cd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $c;
 var $end;
 var $repeat_opcode;
 var $list=sp;
 $1=$code;
 $2=$utf;
 $3=$cd;
 label=2;break;
 case 2: 
 var $5=$1;
 var $6=HEAP8[($5)];
 $c=$6;
 var $7=$c;
 var $8=($7&255);
 var $9=($8|0)>=33;
 if($9){label=3;break;}else{label=24;break;}
 case 3: 
 var $11=$c;
 var $12=($11&255);
 var $13=($12|0)<=97;
 if($13){label=4;break;}else{label=24;break;}
 case 4: 
 var $15=$c;
 var $16=_get_repeat_base($15);
 var $17=($16&255);
 var $18=((($17)-(33))|0);
 var $19=$c;
 var $20=($19&255);
 var $21=((($20)-($18))|0);
 var $22=(($21)&255);
 $c=$22;
 var $23=$c;
 var $24=($23&255);
 var $25=($24|0)<=40;
 if($25){label=5;break;}else{label=6;break;}
 case 5: 
 var $27=$1;
 var $28=$2;
 var $29=$3;
 var $30=(($29+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($list)|0);
 var $33=_get_chr_property_list($27,$28,$31,$32);
 var $36=$33;label=7;break;
 case 6: 
 var $36=0;label=7;break;
 case 7: 
 var $36;
 $end=$36;
 var $37=$c;
 var $38=($37&255);
 var $39=($38|0)==33;
 if($39){var $53=1;label=11;break;}else{label=8;break;}
 case 8: 
 var $41=$c;
 var $42=($41&255);
 var $43=($42|0)==35;
 if($43){var $53=1;label=11;break;}else{label=9;break;}
 case 9: 
 var $45=$c;
 var $46=($45&255);
 var $47=($46|0)==37;
 if($47){var $53=1;label=11;break;}else{label=10;break;}
 case 10: 
 var $49=$c;
 var $50=($49&255);
 var $51=($50|0)==39;
 var $53=$51;label=11;break;
 case 11: 
 var $53;
 var $54=($53&1);
 var $55=(($list+4)|0);
 HEAP32[(($55)>>2)]=$54;
 var $56=$end;
 var $57=($56|0)!=0;
 if($57){label=12;break;}else{label=23;break;}
 case 12: 
 var $59=$end;
 var $60=$2;
 var $61=$3;
 var $62=(($list)|0);
 var $63=$end;
 var $64=_compare_opcodes($59,$60,$61,$62,$63);
 var $65=($64|0)!=0;
 if($65){label=13;break;}else{label=23;break;}
 case 13: 
 var $67=$c;
 var $68=($67&255);
 switch(($68|0)){case 33:{ label=14;break;}case 34:{ label=15;break;}case 35:{ label=16;break;}case 36:{ label=17;break;}case 37:{ label=18;break;}case 38:{ label=19;break;}case 39:{ label=20;break;}case 40:{ label=21;break;}default:{label=22;break;}}break;
 case 14: 
 var $70=$1;
 var $71=HEAP8[($70)];
 var $72=($71&255);
 var $73=((($72)+(9))|0);
 var $74=(($73)&255);
 HEAP8[($70)]=$74;
 label=22;break;
 case 15: 
 var $76=$1;
 var $77=HEAP8[($76)];
 var $78=($77&255);
 var $79=((($78)+(8))|0);
 var $80=(($79)&255);
 HEAP8[($76)]=$80;
 label=22;break;
 case 16: 
 var $82=$1;
 var $83=HEAP8[($82)];
 var $84=($83&255);
 var $85=((($84)+(8))|0);
 var $86=(($85)&255);
 HEAP8[($82)]=$86;
 label=22;break;
 case 17: 
 var $88=$1;
 var $89=HEAP8[($88)];
 var $90=($89&255);
 var $91=((($90)+(7))|0);
 var $92=(($91)&255);
 HEAP8[($88)]=$92;
 label=22;break;
 case 18: 
 var $94=$1;
 var $95=HEAP8[($94)];
 var $96=($95&255);
 var $97=((($96)+(7))|0);
 var $98=(($97)&255);
 HEAP8[($94)]=$98;
 label=22;break;
 case 19: 
 var $100=$1;
 var $101=HEAP8[($100)];
 var $102=($101&255);
 var $103=((($102)+(6))|0);
 var $104=(($103)&255);
 HEAP8[($100)]=$104;
 label=22;break;
 case 20: 
 var $106=$1;
 var $107=HEAP8[($106)];
 var $108=($107&255);
 var $109=((($108)+(6))|0);
 var $110=(($109)&255);
 HEAP8[($106)]=$110;
 label=22;break;
 case 21: 
 var $112=$1;
 var $113=HEAP8[($112)];
 var $114=($113&255);
 var $115=((($114)+(1))|0);
 var $116=(($115)&255);
 HEAP8[($112)]=$116;
 label=22;break;
 case 22: 
 label=23;break;
 case 23: 
 var $119=$1;
 var $120=HEAP8[($119)];
 $c=$120;
 label=39;break;
 case 24: 
 var $122=$c;
 var $123=($122&255);
 var $124=($123|0)==110;
 if($124){label=27;break;}else{label=25;break;}
 case 25: 
 var $126=$c;
 var $127=($126&255);
 var $128=($127|0)==111;
 if($128){label=27;break;}else{label=26;break;}
 case 26: 
 var $130=$c;
 var $131=($130&255);
 var $132=($131|0)==112;
 if($132){label=27;break;}else{label=38;break;}
 case 27: 
 var $134=$1;
 var $135=(($134+1)|0);
 var $136=(($135+32)|0);
 $repeat_opcode=$136;
 var $137=$repeat_opcode;
 var $138=HEAP8[($137)];
 $c=$138;
 var $139=$c;
 var $140=($139&255);
 var $141=($140|0)>=98;
 if($141){label=28;break;}else{label=37;break;}
 case 28: 
 var $143=$c;
 var $144=($143&255);
 var $145=($144|0)<=105;
 if($145){label=29;break;}else{label=37;break;}
 case 29: 
 var $147=$1;
 var $148=$2;
 var $149=$3;
 var $150=(($149+4)|0);
 var $151=HEAP32[(($150)>>2)];
 var $152=(($list)|0);
 var $153=_get_chr_property_list($147,$148,$151,$152);
 $end=$153;
 var $154=$c;
 var $155=($154&255);
 var $156=$155&1;
 var $157=($156|0)==0;
 var $158=($157&1);
 var $159=(($list+4)|0);
 HEAP32[(($159)>>2)]=$158;
 var $160=$end;
 var $161=$2;
 var $162=$3;
 var $163=(($list)|0);
 var $164=$end;
 var $165=_compare_opcodes($160,$161,$162,$163,$164);
 var $166=($165|0)!=0;
 if($166){label=30;break;}else{label=36;break;}
 case 30: 
 var $168=$c;
 var $169=($168&255);
 switch(($169|0)){case 98:case 99:{ label=31;break;}case 100:case 101:{ label=32;break;}case 102:case 103:{ label=33;break;}case 104:case 105:{ label=34;break;}default:{label=35;break;}}break;
 case 31: 
 var $171=$repeat_opcode;
 HEAP8[($171)]=106;
 label=35;break;
 case 32: 
 var $173=$repeat_opcode;
 HEAP8[($173)]=107;
 label=35;break;
 case 33: 
 var $175=$repeat_opcode;
 HEAP8[($175)]=108;
 label=35;break;
 case 34: 
 var $177=$repeat_opcode;
 HEAP8[($177)]=109;
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 label=37;break;
 case 37: 
 var $181=$1;
 var $182=HEAP8[($181)];
 $c=$182;
 label=38;break;
 case 38: 
 label=39;break;
 case 39: 
 var $185=$c;
 var $186=($185&255);
 switch(($186|0)){case 0:{ label=40;break;}case 85:case 86:case 87:case 88:case 89:case 90:case 94:case 95:case 96:{ label=41;break;}case 91:case 92:case 93:case 97:{ label=45;break;}case 149:case 151:case 153:case 155:{ label=49;break;}default:{label=50;break;}}break;
 case 40: 
 STACKTOP=sp;return;
 case 41: 
 var $189=$1;
 var $190=(($189+1)|0);
 var $191=HEAP8[($190)];
 var $192=($191&255);
 var $193=($192|0)==16;
 if($193){label=43;break;}else{label=42;break;}
 case 42: 
 var $195=$1;
 var $196=(($195+1)|0);
 var $197=HEAP8[($196)];
 var $198=($197&255);
 var $199=($198|0)==15;
 if($199){label=43;break;}else{label=44;break;}
 case 43: 
 var $201=$1;
 var $202=(($201+2)|0);
 $1=$202;
 label=44;break;
 case 44: 
 label=50;break;
 case 45: 
 var $205=$1;
 var $206=(($205+3)|0);
 var $207=HEAP8[($206)];
 var $208=($207&255);
 var $209=($208|0)==16;
 if($209){label=47;break;}else{label=46;break;}
 case 46: 
 var $211=$1;
 var $212=(($211+3)|0);
 var $213=HEAP8[($212)];
 var $214=($213&255);
 var $215=($214|0)==15;
 if($215){label=47;break;}else{label=48;break;}
 case 47: 
 var $217=$1;
 var $218=(($217+2)|0);
 $1=$218;
 label=48;break;
 case 48: 
 label=50;break;
 case 49: 
 var $221=$1;
 var $222=(($221+1)|0);
 var $223=HEAP8[($222)];
 var $224=($223&255);
 var $225=$1;
 var $226=(($225+$224)|0);
 $1=$226;
 label=50;break;
 case 50: 
 var $228=$c;
 var $229=($228&255);
 var $230=((6760+$229)|0);
 var $231=HEAP8[($230)];
 var $232=($231&255);
 var $233=$1;
 var $234=(($233+$232)|0);
 $1=$234;
 var $235=$2;
 label=2;break;
  default: assert(0, "bad label: " + label);
 }
}
function _find_fixedlength($code,$utf,$atend,$cd){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $length;
 var $branchlength;
 var $cc;
 var $d;
 var $ce;
 var $cs;
 var $op;
 $2=$code;
 $3=$utf;
 $4=$atend;
 $5=$cd;
 $length=-1;
 $branchlength=0;
 var $6=$2;
 var $7=(($6+1)|0);
 var $8=(($7+2)|0);
 $cc=$8;
 label=2;break;
 case 2: 
 var $10=$cc;
 var $11=HEAP8[($10)];
 $op=$11;
 var $12=$op;
 var $13=($12&255);
 switch(($13|0)){case 117:{ label=17;break;}case 125:case 126:case 127:case 128:{ label=28;break;}case 133:case 131:case 129:case 130:case 135:{ label=3;break;}case 149:case 151:case 153:case 155:{ label=32;break;}case 118:case 27:case 28:case 160:case 156:case 141:case 145:case 142:case 144:case 25:case 26:case 24:case 23:case 157:case 4:case 150:case 124:case 143:case 3:case 152:case 1:case 2:case 154:case 5:{ label=33;break;}case 29:case 30:case 31:case 32:{ label=34;break;}case 41:case 54:case 67:case 80:{ label=35;break;}case 93:{ label=36;break;}case 16:case 15:{ label=40;break;}case 19:case 21:case 18:case 20:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:{ label=41;break;}case 14:{ label=42;break;}case 110:case 111:{ label=43;break;}case 17:case 147:case 132:case 148:case 146:case 134:case 22:case 121:case 122:case 123:case 36:case 49:case 38:case 51:case 34:case 47:case 40:case 53:case 62:case 75:case 64:case 77:case 60:case 73:case 66:case 79:case 61:case 74:case 69:case 82:case 70:case 83:case 68:case 81:case 71:case 84:case 63:case 76:case 59:case 72:case 65:case 78:case 35:case 48:case 43:case 56:case 44:case 57:case 42:case 55:case 45:case 58:case 37:case 50:case 113:case 114:case 115:case 116:case 136:case 137:case 138:case 139:case 140:case 161:case 33:case 46:case 88:case 90:case 86:case 92:case 87:case 95:case 96:case 94:case 97:case 89:case 85:case 91:case 39:case 52:{ label=50;break;}case 119:case 120:case 0:case 158:case 159:{ label=9;break;}default:{label=51;break;}}break;
 case 3: 
 var $15=$cc;
 var $16=$op;
 var $17=($16&255);
 var $18=($17|0)==133;
 var $19=($18?2:0);
 var $20=(($15+$19)|0);
 var $21=$3;
 var $22=$4;
 var $23=$5;
 var $24=_find_fixedlength($20,$21,$22,$23);
 $d=$24;
 var $25=$d;
 var $26=($25|0)<0;
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 var $28=$d;
 $1=$28;
 label=53;break;
 case 5: 
 var $30=$d;
 var $31=$branchlength;
 var $32=((($31)+($30))|0);
 $branchlength=$32;
 label=6;break;
 case 6: 
 var $34=$cc;
 var $35=(($34+1)|0);
 var $36=HEAP8[($35)];
 var $37=($36&255);
 var $38=$37<<8;
 var $39=$cc;
 var $40=(($39+2)|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=$38|$42;
 var $44=$cc;
 var $45=(($44+$43)|0);
 $cc=$45;
 label=7;break;
 case 7: 
 var $47=$cc;
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=($49|0)==119;
 if($50){label=6;break;}else{label=8;break;}
 case 8: 
 var $52=$cc;
 var $53=(($52+3)|0);
 $cc=$53;
 label=52;break;
 case 9: 
 var $55=$length;
 var $56=($55|0)<0;
 if($56){label=10;break;}else{label=11;break;}
 case 10: 
 var $58=$branchlength;
 $length=$58;
 label=14;break;
 case 11: 
 var $60=$length;
 var $61=$branchlength;
 var $62=($60|0)!=($61|0);
 if($62){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-1;
 label=53;break;
 case 13: 
 label=14;break;
 case 14: 
 var $66=$cc;
 var $67=HEAP8[($66)];
 var $68=($67&255);
 var $69=($68|0)!=119;
 if($69){label=15;break;}else{label=16;break;}
 case 15: 
 var $71=$length;
 $1=$71;
 label=53;break;
 case 16: 
 var $73=$cc;
 var $74=(($73+3)|0);
 $cc=$74;
 $branchlength=0;
 label=52;break;
 case 17: 
 var $76=$4;
 var $77=($76|0)!=0;
 if($77){label=19;break;}else{label=18;break;}
 case 18: 
 $1=-3;
 label=53;break;
 case 19: 
 var $80=$5;
 var $81=(($80+20)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=$cc;
 var $84=(($83+1)|0);
 var $85=HEAP8[($84)];
 var $86=($85&255);
 var $87=$86<<8;
 var $88=$cc;
 var $89=(($88+2)|0);
 var $90=HEAP8[($89)];
 var $91=($90&255);
 var $92=$87|$91;
 var $93=(($82+$92)|0);
 $ce=$93;
 $cs=$93;
 label=20;break;
 case 20: 
 var $95=$ce;
 var $96=(($95+1)|0);
 var $97=HEAP8[($96)];
 var $98=($97&255);
 var $99=$98<<8;
 var $100=$ce;
 var $101=(($100+2)|0);
 var $102=HEAP8[($101)];
 var $103=($102&255);
 var $104=$99|$103;
 var $105=$ce;
 var $106=(($105+$104)|0);
 $ce=$106;
 label=21;break;
 case 21: 
 var $108=$ce;
 var $109=HEAP8[($108)];
 var $110=($109&255);
 var $111=($110|0)==119;
 if($111){label=20;break;}else{label=22;break;}
 case 22: 
 var $113=$cc;
 var $114=$cs;
 var $115=($113>>>0)>($114>>>0);
 if($115){label=23;break;}else{label=25;break;}
 case 23: 
 var $117=$cc;
 var $118=$ce;
 var $119=($117>>>0)<($118>>>0);
 if($119){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-1;
 label=53;break;
 case 25: 
 var $122=$cs;
 var $123=(($122+2)|0);
 var $124=$3;
 var $125=$4;
 var $126=$5;
 var $127=_find_fixedlength($123,$124,$125,$126);
 $d=$127;
 var $128=$d;
 var $129=($128|0)<0;
 if($129){label=26;break;}else{label=27;break;}
 case 26: 
 var $131=$d;
 $1=$131;
 label=53;break;
 case 27: 
 var $133=$d;
 var $134=$branchlength;
 var $135=((($134)+($133))|0);
 $branchlength=$135;
 var $136=$cc;
 var $137=(($136+3)|0);
 $cc=$137;
 label=52;break;
 case 28: 
 label=29;break;
 case 29: 
 var $140=$cc;
 var $141=(($140+1)|0);
 var $142=HEAP8[($141)];
 var $143=($142&255);
 var $144=$143<<8;
 var $145=$cc;
 var $146=(($145+2)|0);
 var $147=HEAP8[($146)];
 var $148=($147&255);
 var $149=$144|$148;
 var $150=$cc;
 var $151=(($150+$149)|0);
 $cc=$151;
 label=30;break;
 case 30: 
 var $153=$cc;
 var $154=HEAP8[($153)];
 var $155=($154&255);
 var $156=($155|0)==119;
 if($156){label=29;break;}else{label=31;break;}
 case 31: 
 var $158=$cc;
 var $159=HEAP8[($158)];
 var $160=($159&255);
 var $161=((6760+$160)|0);
 var $162=HEAP8[($161)];
 var $163=($162&255);
 var $164=$cc;
 var $165=(($164+$163)|0);
 $cc=$165;
 label=52;break;
 case 32: 
 var $167=$cc;
 var $168=(($167+1)|0);
 var $169=HEAP8[($168)];
 var $170=($169&255);
 var $171=$cc;
 var $172=HEAP8[($171)];
 var $173=($172&255);
 var $174=((6760+$173)|0);
 var $175=HEAP8[($174)];
 var $176=($175&255);
 var $177=((($170)+($176))|0);
 var $178=$cc;
 var $179=(($178+$177)|0);
 $cc=$179;
 label=52;break;
 case 33: 
 var $181=$cc;
 var $182=HEAP8[($181)];
 var $183=($182&255);
 var $184=((6760+$183)|0);
 var $185=HEAP8[($184)];
 var $186=($185&255);
 var $187=$cc;
 var $188=(($187+$186)|0);
 $cc=$188;
 label=52;break;
 case 34: 
 var $190=$branchlength;
 var $191=((($190)+(1))|0);
 $branchlength=$191;
 var $192=$cc;
 var $193=(($192+2)|0);
 $cc=$193;
 label=52;break;
 case 35: 
 var $195=$cc;
 var $196=(($195+1)|0);
 var $197=HEAP8[($196)];
 var $198=($197&255);
 var $199=$198<<8;
 var $200=$cc;
 var $201=(($200+2)|0);
 var $202=HEAP8[($201)];
 var $203=($202&255);
 var $204=$199|$203;
 var $205=$branchlength;
 var $206=((($205)+($204))|0);
 $branchlength=$206;
 var $207=$cc;
 var $208=(($207+4)|0);
 $cc=$208;
 label=52;break;
 case 36: 
 var $210=$cc;
 var $211=(($210+1)|0);
 var $212=HEAP8[($211)];
 var $213=($212&255);
 var $214=$213<<8;
 var $215=$cc;
 var $216=(($215+2)|0);
 var $217=HEAP8[($216)];
 var $218=($217&255);
 var $219=$214|$218;
 var $220=$branchlength;
 var $221=((($220)+($219))|0);
 $branchlength=$221;
 var $222=$cc;
 var $223=(($222+3)|0);
 var $224=HEAP8[($223)];
 var $225=($224&255);
 var $226=($225|0)==16;
 if($226){label=38;break;}else{label=37;break;}
 case 37: 
 var $228=$cc;
 var $229=(($228+3)|0);
 var $230=HEAP8[($229)];
 var $231=($230&255);
 var $232=($231|0)==15;
 if($232){label=38;break;}else{label=39;break;}
 case 38: 
 var $234=$cc;
 var $235=(($234+2)|0);
 $cc=$235;
 label=39;break;
 case 39: 
 var $237=$cc;
 var $238=(($237+4)|0);
 $cc=$238;
 label=52;break;
 case 40: 
 var $240=$cc;
 var $241=(($240+2)|0);
 $cc=$241;
 label=41;break;
 case 41: 
 var $243=$branchlength;
 var $244=((($243)+(1))|0);
 $branchlength=$244;
 var $245=$cc;
 var $246=(($245+1)|0);
 $cc=$246;
 label=52;break;
 case 42: 
 $1=-2;
 label=53;break;
 case 43: 
 var $249=HEAP8[(6870)];
 var $250=($249&255);
 var $251=$cc;
 var $252=(($251+$250)|0);
 $cc=$252;
 var $253=$cc;
 var $254=HEAP8[($253)];
 var $255=($254&255);
 switch(($255|0)){case 98:case 99:case 100:case 101:case 102:case 103:case 106:case 107:case 108:{ label=44;break;}case 104:case 105:case 109:{ label=45;break;}default:{label=48;break;}}break;
 case 44: 
 $1=-1;
 label=53;break;
 case 45: 
 var $258=$cc;
 var $259=(($258+1)|0);
 var $260=HEAP8[($259)];
 var $261=($260&255);
 var $262=$261<<8;
 var $263=$cc;
 var $264=(($263+2)|0);
 var $265=HEAP8[($264)];
 var $266=($265&255);
 var $267=$262|$266;
 var $268=$cc;
 var $269=(($268+3)|0);
 var $270=HEAP8[($269)];
 var $271=($270&255);
 var $272=$271<<8;
 var $273=$cc;
 var $274=(($273+4)|0);
 var $275=HEAP8[($274)];
 var $276=($275&255);
 var $277=$272|$276;
 var $278=($267|0)!=($277|0);
 if($278){label=46;break;}else{label=47;break;}
 case 46: 
 $1=-1;
 label=53;break;
 case 47: 
 var $281=$cc;
 var $282=(($281+1)|0);
 var $283=HEAP8[($282)];
 var $284=($283&255);
 var $285=$284<<8;
 var $286=$cc;
 var $287=(($286+2)|0);
 var $288=HEAP8[($287)];
 var $289=($288&255);
 var $290=$285|$289;
 var $291=$branchlength;
 var $292=((($291)+($290))|0);
 $branchlength=$292;
 var $293=$cc;
 var $294=(($293+5)|0);
 $cc=$294;
 label=49;break;
 case 48: 
 var $296=$branchlength;
 var $297=((($296)+(1))|0);
 $branchlength=$297;
 label=49;break;
 case 49: 
 label=52;break;
 case 50: 
 $1=-1;
 label=53;break;
 case 51: 
 $1=-4;
 label=53;break;
 case 52: 
 label=2;break;
 case 53: 
 var $303=$1;
 STACKTOP=sp;return $303;
  default: assert(0, "bad label: " + label);
 }
}
function _find_error_text($n){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $s;
 $2=$n;
 $s=792;
 label=2;break;
 case 2: 
 var $4=$2;
 var $5=($4|0)>0;
 if($5){label=3;break;}else{label=10;break;}
 case 3: 
 label=4;break;
 case 4: 
 var $8=$s;
 var $9=(($8+1)|0);
 $s=$9;
 var $10=HEAP8[($8)];
 var $11=(($10<<24)>>24);
 var $12=($11|0)!=0;
 if($12){label=5;break;}else{label=6;break;}
 case 5: 
 label=4;break;
 case 6: 
 var $15=$s;
 var $16=HEAP8[($15)];
 var $17=(($16<<24)>>24);
 var $18=($17|0)==0;
 if($18){label=7;break;}else{label=8;break;}
 case 7: 
 $1=5368;
 label=11;break;
 case 8: 
 label=9;break;
 case 9: 
 var $22=$2;
 var $23=((($22)-(1))|0);
 $2=$23;
 label=2;break;
 case 10: 
 var $25=$s;
 $1=$25;
 label=11;break;
 case 11: 
 var $27=$1;
 STACKTOP=sp;return $27;
  default: assert(0, "bad label: " + label);
 }
}
function _is_anchored($code,$bracket_map,$cd,$atomcount){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $scode;
 var $op;
 var $n;
 var $new_map;
 $2=$code;
 $3=$bracket_map;
 $4=$cd;
 $5=$atomcount;
 label=2;break;
 case 2: 
 var $7=$2;
 var $8=$2;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=((6760+$10)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 var $14=(($7+$13)|0);
 var $15=_first_significant_code($14,0);
 $scode=$15;
 var $16=$scode;
 var $17=HEAP8[($16)];
 var $18=($17&255);
 $op=$18;
 var $19=$op;
 var $20=($19|0)==131;
 if($20){label=6;break;}else{label=3;break;}
 case 3: 
 var $22=$op;
 var $23=($22|0)==132;
 if($23){label=6;break;}else{label=4;break;}
 case 4: 
 var $25=$op;
 var $26=($25|0)==136;
 if($26){label=6;break;}else{label=5;break;}
 case 5: 
 var $28=$op;
 var $29=($28|0)==137;
 if($29){label=6;break;}else{label=9;break;}
 case 6: 
 var $31=$scode;
 var $32=$3;
 var $33=$4;
 var $34=$5;
 var $35=_is_anchored($31,$32,$33,$34);
 var $36=($35|0)!=0;
 if($36){label=8;break;}else{label=7;break;}
 case 7: 
 $1=0;
 label=50;break;
 case 8: 
 label=47;break;
 case 9: 
 var $40=$op;
 var $41=($40|0)==133;
 if($41){label=13;break;}else{label=10;break;}
 case 10: 
 var $43=$op;
 var $44=($43|0)==134;
 if($44){label=13;break;}else{label=11;break;}
 case 11: 
 var $46=$op;
 var $47=($46|0)==138;
 if($47){label=13;break;}else{label=12;break;}
 case 12: 
 var $49=$op;
 var $50=($49|0)==139;
 if($50){label=13;break;}else{label=19;break;}
 case 13: 
 var $52=$scode;
 var $53=(($52+3)|0);
 var $54=HEAP8[($53)];
 var $55=($54&255);
 var $56=$55<<8;
 var $57=$scode;
 var $58=(($57+4)|0);
 var $59=HEAP8[($58)];
 var $60=($59&255);
 var $61=$56|$60;
 $n=$61;
 var $62=$3;
 var $63=$n;
 var $64=($63|0)<32;
 if($64){label=14;break;}else{label=15;break;}
 case 14: 
 var $66=$n;
 var $67=1<<$66;
 var $70=$67;label=16;break;
 case 15: 
 var $70=1;label=16;break;
 case 16: 
 var $70;
 var $71=$62|$70;
 $new_map=$71;
 var $72=$scode;
 var $73=$new_map;
 var $74=$4;
 var $75=$5;
 var $76=_is_anchored($72,$73,$74,$75);
 var $77=($76|0)!=0;
 if($77){label=18;break;}else{label=17;break;}
 case 17: 
 $1=0;
 label=50;break;
 case 18: 
 label=46;break;
 case 19: 
 var $81=$op;
 var $82=($81|0)==125;
 if($82){label=21;break;}else{label=20;break;}
 case 20: 
 var $84=$op;
 var $85=($84|0)==135;
 if($85){label=21;break;}else{label=24;break;}
 case 21: 
 var $87=$scode;
 var $88=$3;
 var $89=$4;
 var $90=$5;
 var $91=_is_anchored($87,$88,$89,$90);
 var $92=($91|0)!=0;
 if($92){label=23;break;}else{label=22;break;}
 case 22: 
 $1=0;
 label=50;break;
 case 23: 
 label=45;break;
 case 24: 
 var $96=$op;
 var $97=($96|0)==129;
 if($97){label=26;break;}else{label=25;break;}
 case 25: 
 var $99=$op;
 var $100=($99|0)==130;
 if($100){label=26;break;}else{label=29;break;}
 case 26: 
 var $102=$scode;
 var $103=$3;
 var $104=$4;
 var $105=$5;
 var $106=((($105)+(1))|0);
 var $107=_is_anchored($102,$103,$104,$106);
 var $108=($107|0)!=0;
 if($108){label=28;break;}else{label=27;break;}
 case 27: 
 $1=0;
 label=50;break;
 case 28: 
 label=44;break;
 case 29: 
 var $112=$op;
 var $113=($112|0)==85;
 if($113){label=32;break;}else{label=30;break;}
 case 30: 
 var $115=$op;
 var $116=($115|0)==86;
 if($116){label=32;break;}else{label=31;break;}
 case 31: 
 var $118=$op;
 var $119=($118|0)==94;
 if($119){label=32;break;}else{label=38;break;}
 case 32: 
 var $121=$scode;
 var $122=(($121+1)|0);
 var $123=HEAP8[($122)];
 var $124=($123&255);
 var $125=($124|0)!=13;
 if($125){label=36;break;}else{label=33;break;}
 case 33: 
 var $127=$3;
 var $128=$4;
 var $129=(($128+80)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=$127&$130;
 var $132=($131|0)!=0;
 if($132){label=36;break;}else{label=34;break;}
 case 34: 
 var $134=$5;
 var $135=($134|0)>0;
 if($135){label=36;break;}else{label=35;break;}
 case 35: 
 var $137=$4;
 var $138=(($137+112)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=($139|0)!=0;
 if($140){label=36;break;}else{label=37;break;}
 case 36: 
 $1=0;
 label=50;break;
 case 37: 
 label=43;break;
 case 38: 
 var $144=$op;
 var $145=($144|0)!=1;
 if($145){label=39;break;}else{label=42;break;}
 case 39: 
 var $147=$op;
 var $148=($147|0)!=2;
 if($148){label=40;break;}else{label=42;break;}
 case 40: 
 var $150=$op;
 var $151=($150|0)!=27;
 if($151){label=41;break;}else{label=42;break;}
 case 41: 
 $1=0;
 label=50;break;
 case 42: 
 label=43;break;
 case 43: 
 label=44;break;
 case 44: 
 label=45;break;
 case 45: 
 label=46;break;
 case 46: 
 label=47;break;
 case 47: 
 var $159=$2;
 var $160=(($159+1)|0);
 var $161=HEAP8[($160)];
 var $162=($161&255);
 var $163=$162<<8;
 var $164=$2;
 var $165=(($164+2)|0);
 var $166=HEAP8[($165)];
 var $167=($166&255);
 var $168=$163|$167;
 var $169=$2;
 var $170=(($169+$168)|0);
 $2=$170;
 label=48;break;
 case 48: 
 var $172=$2;
 var $173=HEAP8[($172)];
 var $174=($173&255);
 var $175=($174|0)==119;
 if($175){label=2;break;}else{label=49;break;}
 case 49: 
 $1=1;
 label=50;break;
 case 50: 
 var $178=$1;
 STACKTOP=sp;return $178;
  default: assert(0, "bad label: " + label);
 }
}
function _find_firstassertedchar($code,$flags,$inassert){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $c;
 var $cflags;
 var $d;
 var $dflags=sp;
 var $xl;
 var $scode;
 var $op;
 $2=$code;
 $3=$flags;
 $4=$inassert;
 $c=0;
 $cflags=-1;
 var $5=$3;
 HEAP32[(($5)>>2)]=-1;
 label=2;break;
 case 2: 
 var $7=$2;
 var $8=HEAP8[($7)];
 var $9=($8&255);
 var $10=($9|0)==133;
 if($10){var $27=1;label=6;break;}else{label=3;break;}
 case 3: 
 var $12=$2;
 var $13=HEAP8[($12)];
 var $14=($13&255);
 var $15=($14|0)==138;
 if($15){var $27=1;label=6;break;}else{label=4;break;}
 case 4: 
 var $17=$2;
 var $18=HEAP8[($17)];
 var $19=($18&255);
 var $20=($19|0)==134;
 if($20){var $27=1;label=6;break;}else{label=5;break;}
 case 5: 
 var $22=$2;
 var $23=HEAP8[($22)];
 var $24=($23&255);
 var $25=($24|0)==139;
 var $27=$25;label=6;break;
 case 6: 
 var $27;
 var $28=($27?2:0);
 $xl=$28;
 var $29=$2;
 var $30=(($29+1)|0);
 var $31=(($30+2)|0);
 var $32=$xl;
 var $33=(($31+$32)|0);
 var $34=_first_significant_code($33,1);
 $scode=$34;
 var $35=$scode;
 var $36=HEAP8[($35)];
 $op=$36;
 var $37=$op;
 var $38=($37&255);
 switch(($38|0)){case 41:{ label=17;break;}case 29:case 35:case 36:case 43:{ label=18;break;}case 54:{ label=26;break;}case 30:case 48:case 49:case 56:{ label=27;break;}case 131:case 132:case 133:case 138:case 134:case 139:case 125:case 129:case 130:{ label=8;break;}default:{label=7;break;}}break;
 case 7: 
 $1=0;
 label=38;break;
 case 8: 
 var $41=$scode;
 var $42=$op;
 var $43=($42&255);
 var $44=($43|0)==125;
 var $45=($44&1);
 var $46=_find_firstassertedchar($41,$dflags,$45);
 $d=$46;
 var $47=HEAP32[(($dflags)>>2)];
 var $48=($47|0)<0;
 if($48){label=9;break;}else{label=10;break;}
 case 9: 
 $1=0;
 label=38;break;
 case 10: 
 var $51=$cflags;
 var $52=($51|0)<0;
 if($52){label=11;break;}else{label=12;break;}
 case 11: 
 var $54=$d;
 $c=$54;
 var $55=HEAP32[(($dflags)>>2)];
 $cflags=$55;
 label=16;break;
 case 12: 
 var $57=$c;
 var $58=$d;
 var $59=($57|0)!=($58|0);
 if($59){label=14;break;}else{label=13;break;}
 case 13: 
 var $61=$cflags;
 var $62=HEAP32[(($dflags)>>2)];
 var $63=($61|0)!=($62|0);
 if($63){label=14;break;}else{label=15;break;}
 case 14: 
 $1=0;
 label=38;break;
 case 15: 
 label=16;break;
 case 16: 
 label=35;break;
 case 17: 
 var $68=$scode;
 var $69=(($68+2)|0);
 $scode=$69;
 label=18;break;
 case 18: 
 var $71=$4;
 var $72=($71|0)!=0;
 if($72){label=20;break;}else{label=19;break;}
 case 19: 
 $1=0;
 label=38;break;
 case 20: 
 var $75=$cflags;
 var $76=($75|0)<0;
 if($76){label=21;break;}else{label=22;break;}
 case 21: 
 var $78=$scode;
 var $79=(($78+1)|0);
 var $80=HEAP8[($79)];
 var $81=($80&255);
 $c=$81;
 $cflags=0;
 label=25;break;
 case 22: 
 var $83=$c;
 var $84=$scode;
 var $85=(($84+1)|0);
 var $86=HEAP8[($85)];
 var $87=($86&255);
 var $88=($83|0)!=($87|0);
 if($88){label=23;break;}else{label=24;break;}
 case 23: 
 $1=0;
 label=38;break;
 case 24: 
 label=25;break;
 case 25: 
 label=35;break;
 case 26: 
 var $93=$scode;
 var $94=(($93+2)|0);
 $scode=$94;
 label=27;break;
 case 27: 
 var $96=$4;
 var $97=($96|0)!=0;
 if($97){label=29;break;}else{label=28;break;}
 case 28: 
 $1=0;
 label=38;break;
 case 29: 
 var $100=$cflags;
 var $101=($100|0)<0;
 if($101){label=30;break;}else{label=31;break;}
 case 30: 
 var $103=$scode;
 var $104=(($103+1)|0);
 var $105=HEAP8[($104)];
 var $106=($105&255);
 $c=$106;
 $cflags=1;
 label=34;break;
 case 31: 
 var $108=$c;
 var $109=$scode;
 var $110=(($109+1)|0);
 var $111=HEAP8[($110)];
 var $112=($111&255);
 var $113=($108|0)!=($112|0);
 if($113){label=32;break;}else{label=33;break;}
 case 32: 
 $1=0;
 label=38;break;
 case 33: 
 label=34;break;
 case 34: 
 label=35;break;
 case 35: 
 var $118=$2;
 var $119=(($118+1)|0);
 var $120=HEAP8[($119)];
 var $121=($120&255);
 var $122=$121<<8;
 var $123=$2;
 var $124=(($123+2)|0);
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=$122|$126;
 var $128=$2;
 var $129=(($128+$127)|0);
 $2=$129;
 label=36;break;
 case 36: 
 var $131=$2;
 var $132=HEAP8[($131)];
 var $133=($132&255);
 var $134=($133|0)==119;
 if($134){label=2;break;}else{label=37;break;}
 case 37: 
 var $136=$cflags;
 var $137=$3;
 HEAP32[(($137)>>2)]=$136;
 var $138=$c;
 $1=$138;
 label=38;break;
 case 38: 
 var $140=$1;
 STACKTOP=sp;return $140;
  default: assert(0, "bad label: " + label);
 }
}
function _is_startline($code,$bracket_map,$cd,$atomcount){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $scode;
 var $op;
 var $n;
 var $new_map;
 $2=$code;
 $3=$bracket_map;
 $4=$cd;
 $5=$atomcount;
 label=2;break;
 case 2: 
 var $7=$2;
 var $8=$2;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=((6760+$10)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 var $14=(($7+$13)|0);
 var $15=_first_significant_code($14,0);
 $scode=$15;
 var $16=$scode;
 var $17=HEAP8[($16)];
 var $18=($17&255);
 $op=$18;
 var $19=$op;
 var $20=($19|0)==135;
 if($20){label=3;break;}else{label=14;break;}
 case 3: 
 var $22=$scode;
 var $23=(($22+3)|0);
 $scode=$23;
 var $24=$scode;
 var $25=HEAP8[($24)];
 var $26=($25&255);
 var $27=($26|0)==118;
 if($27){label=4;break;}else{label=5;break;}
 case 4: 
 var $29=HEAP8[(6878)];
 var $30=($29&255);
 var $31=$scode;
 var $32=(($31+$30)|0);
 $scode=$32;
 label=5;break;
 case 5: 
 var $34=$scode;
 var $35=HEAP8[($34)];
 var $36=($35&255);
 switch(($36|0)){case 141:case 142:case 143:case 144:case 145:{ label=6;break;}default:{label=7;break;}}break;
 case 6: 
 $1=0;
 label=60;break;
 case 7: 
 var $39=$scode;
 var $40=$3;
 var $41=$4;
 var $42=$5;
 var $43=_is_startline($39,$40,$41,$42);
 var $44=($43|0)!=0;
 if($44){label=9;break;}else{label=8;break;}
 case 8: 
 $1=0;
 label=60;break;
 case 9: 
 label=10;break;
 case 10: 
 var $48=$scode;
 var $49=(($48+1)|0);
 var $50=HEAP8[($49)];
 var $51=($50&255);
 var $52=$51<<8;
 var $53=$scode;
 var $54=(($53+2)|0);
 var $55=HEAP8[($54)];
 var $56=($55&255);
 var $57=$52|$56;
 var $58=$scode;
 var $59=(($58+$57)|0);
 $scode=$59;
 label=11;break;
 case 11: 
 var $61=$scode;
 var $62=HEAP8[($61)];
 var $63=($62&255);
 var $64=($63|0)==119;
 if($64){label=10;break;}else{label=12;break;}
 case 12: 
 var $66=$scode;
 var $67=(($66+3)|0);
 $scode=$67;
 label=13;break;
 case 13: 
 var $69=$scode;
 var $70=_first_significant_code($69,0);
 $scode=$70;
 var $71=$scode;
 var $72=HEAP8[($71)];
 var $73=($72&255);
 $op=$73;
 label=14;break;
 case 14: 
 var $75=$op;
 var $76=($75|0)==131;
 if($76){label=18;break;}else{label=15;break;}
 case 15: 
 var $78=$op;
 var $79=($78|0)==132;
 if($79){label=18;break;}else{label=16;break;}
 case 16: 
 var $81=$op;
 var $82=($81|0)==136;
 if($82){label=18;break;}else{label=17;break;}
 case 17: 
 var $84=$op;
 var $85=($84|0)==137;
 if($85){label=18;break;}else{label=21;break;}
 case 18: 
 var $87=$scode;
 var $88=$3;
 var $89=$4;
 var $90=$5;
 var $91=_is_startline($87,$88,$89,$90);
 var $92=($91|0)!=0;
 if($92){label=20;break;}else{label=19;break;}
 case 19: 
 $1=0;
 label=60;break;
 case 20: 
 label=57;break;
 case 21: 
 var $96=$op;
 var $97=($96|0)==133;
 if($97){label=25;break;}else{label=22;break;}
 case 22: 
 var $99=$op;
 var $100=($99|0)==134;
 if($100){label=25;break;}else{label=23;break;}
 case 23: 
 var $102=$op;
 var $103=($102|0)==138;
 if($103){label=25;break;}else{label=24;break;}
 case 24: 
 var $105=$op;
 var $106=($105|0)==139;
 if($106){label=25;break;}else{label=31;break;}
 case 25: 
 var $108=$scode;
 var $109=(($108+3)|0);
 var $110=HEAP8[($109)];
 var $111=($110&255);
 var $112=$111<<8;
 var $113=$scode;
 var $114=(($113+4)|0);
 var $115=HEAP8[($114)];
 var $116=($115&255);
 var $117=$112|$116;
 $n=$117;
 var $118=$3;
 var $119=$n;
 var $120=($119|0)<32;
 if($120){label=26;break;}else{label=27;break;}
 case 26: 
 var $122=$n;
 var $123=1<<$122;
 var $126=$123;label=28;break;
 case 27: 
 var $126=1;label=28;break;
 case 28: 
 var $126;
 var $127=$118|$126;
 $new_map=$127;
 var $128=$scode;
 var $129=$new_map;
 var $130=$4;
 var $131=$5;
 var $132=_is_startline($128,$129,$130,$131);
 var $133=($132|0)!=0;
 if($133){label=30;break;}else{label=29;break;}
 case 29: 
 $1=0;
 label=60;break;
 case 30: 
 label=56;break;
 case 31: 
 var $137=$op;
 var $138=($137|0)==125;
 if($138){label=32;break;}else{label=35;break;}
 case 32: 
 var $140=$scode;
 var $141=$3;
 var $142=$4;
 var $143=$5;
 var $144=_is_startline($140,$141,$142,$143);
 var $145=($144|0)!=0;
 if($145){label=34;break;}else{label=33;break;}
 case 33: 
 $1=0;
 label=60;break;
 case 34: 
 label=55;break;
 case 35: 
 var $149=$op;
 var $150=($149|0)==129;
 if($150){label=37;break;}else{label=36;break;}
 case 36: 
 var $152=$op;
 var $153=($152|0)==130;
 if($153){label=37;break;}else{label=40;break;}
 case 37: 
 var $155=$scode;
 var $156=$3;
 var $157=$4;
 var $158=$5;
 var $159=((($158)+(1))|0);
 var $160=_is_startline($155,$156,$157,$159);
 var $161=($160|0)!=0;
 if($161){label=39;break;}else{label=38;break;}
 case 38: 
 $1=0;
 label=60;break;
 case 39: 
 label=54;break;
 case 40: 
 var $165=$op;
 var $166=($165|0)==85;
 if($166){label=43;break;}else{label=41;break;}
 case 41: 
 var $168=$op;
 var $169=($168|0)==86;
 if($169){label=43;break;}else{label=42;break;}
 case 42: 
 var $171=$op;
 var $172=($171|0)==94;
 if($172){label=43;break;}else{label=49;break;}
 case 43: 
 var $174=$scode;
 var $175=(($174+1)|0);
 var $176=HEAP8[($175)];
 var $177=($176&255);
 var $178=($177|0)!=12;
 if($178){label=47;break;}else{label=44;break;}
 case 44: 
 var $180=$3;
 var $181=$4;
 var $182=(($181+80)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=$180&$183;
 var $185=($184|0)!=0;
 if($185){label=47;break;}else{label=45;break;}
 case 45: 
 var $187=$5;
 var $188=($187|0)>0;
 if($188){label=47;break;}else{label=46;break;}
 case 46: 
 var $190=$4;
 var $191=(($190+112)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=($192|0)!=0;
 if($193){label=47;break;}else{label=48;break;}
 case 47: 
 $1=0;
 label=60;break;
 case 48: 
 label=53;break;
 case 49: 
 var $197=$op;
 var $198=($197|0)!=27;
 if($198){label=50;break;}else{label=52;break;}
 case 50: 
 var $200=$op;
 var $201=($200|0)!=28;
 if($201){label=51;break;}else{label=52;break;}
 case 51: 
 $1=0;
 label=60;break;
 case 52: 
 label=53;break;
 case 53: 
 label=54;break;
 case 54: 
 label=55;break;
 case 55: 
 label=56;break;
 case 56: 
 label=57;break;
 case 57: 
 var $209=$2;
 var $210=(($209+1)|0);
 var $211=HEAP8[($210)];
 var $212=($211&255);
 var $213=$212<<8;
 var $214=$2;
 var $215=(($214+2)|0);
 var $216=HEAP8[($215)];
 var $217=($216&255);
 var $218=$213|$217;
 var $219=$2;
 var $220=(($219+$218)|0);
 $2=$220;
 label=58;break;
 case 58: 
 var $222=$2;
 var $223=HEAP8[($222)];
 var $224=($223&255);
 var $225=($224|0)==119;
 if($225){label=2;break;}else{label=59;break;}
 case 59: 
 $1=1;
 label=60;break;
 case 60: 
 var $228=$1;
 STACKTOP=sp;return $228;
  default: assert(0, "bad label: " + label);
 }
}
function _could_be_empty_branch($code,$endcode,$utf,$cd,$recurses){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $c;
 var $this_recurse=sp;
 var $ccode;
 var $scode;
 var $empty_branch;
 var $tcode;
 var $r;
 var $endgroup;
 var $empty_branch1;
 $2=$code;
 $3=$endcode;
 $4=$utf;
 $5=$cd;
 $6=$recurses;
 var $7=$2;
 var $8=$2;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=((6760+$10)|0);
 var $12=HEAP8[($11)];
 var $13=($12&255);
 var $14=(($7+$13)|0);
 var $15=_first_significant_code($14,1);
 $2=$15;
 label=2;break;
 case 2: 
 var $17=$2;
 var $18=$3;
 var $19=($17>>>0)<($18>>>0);
 if($19){label=3;break;}else{label=103;break;}
 case 3: 
 var $21=$2;
 var $22=HEAP8[($21)];
 $c=$22;
 var $23=$c;
 var $24=($23&255);
 var $25=($24|0)==125;
 if($25){label=4;break;}else{label=8;break;}
 case 4: 
 label=5;break;
 case 5: 
 var $28=$2;
 var $29=(($28+1)|0);
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=$31<<8;
 var $33=$2;
 var $34=(($33+2)|0);
 var $35=HEAP8[($34)];
 var $36=($35&255);
 var $37=$32|$36;
 var $38=$2;
 var $39=(($38+$37)|0);
 $2=$39;
 label=6;break;
 case 6: 
 var $41=$2;
 var $42=HEAP8[($41)];
 var $43=($42&255);
 var $44=($43|0)==119;
 if($44){label=5;break;}else{label=7;break;}
 case 7: 
 var $46=$2;
 var $47=HEAP8[($46)];
 $c=$47;
 label=102;break;
 case 8: 
 var $49=$c;
 var $50=($49&255);
 var $51=($50|0)==117;
 if($51){label=9;break;}else{label=42;break;}
 case 9: 
 var $53=$5;
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=$2;
 var $57=(($56+1)|0);
 var $58=HEAP8[($57)];
 var $59=($58&255);
 var $60=$59<<8;
 var $61=$2;
 var $62=(($61+2)|0);
 var $63=HEAP8[($62)];
 var $64=($63&255);
 var $65=$60|$64;
 var $66=(($55+$65)|0);
 $scode=$66;
 var $67=$5;
 var $68=(($67+16)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)!=0;
 if($70){label=10;break;}else{label=19;break;}
 case 10: 
 var $72=$5;
 var $73=(($72+16)|0);
 var $74=HEAP32[(($73)>>2)];
 $tcode=$74;
 label=11;break;
 case 11: 
 var $76=$tcode;
 var $77=$5;
 var $78=(($77+32)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($76>>>0)<($79>>>0);
 if($80){label=12;break;}else{label=16;break;}
 case 12: 
 var $82=$tcode;
 var $83=(($82)|0);
 var $84=HEAP8[($83)];
 var $85=($84&255);
 var $86=$85<<8;
 var $87=$tcode;
 var $88=(($87+1)|0);
 var $89=HEAP8[($88)];
 var $90=($89&255);
 var $91=$86|$90;
 var $92=$2;
 var $93=(($92+1)|0);
 var $94=$5;
 var $95=(($94+20)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=$93;
 var $98=$96;
 var $99=((($97)-($98))|0);
 var $100=($91|0)==($99|0);
 if($100){label=13;break;}else{label=14;break;}
 case 13: 
 $1=1;
 label=104;break;
 case 14: 
 label=15;break;
 case 15: 
 var $104=$tcode;
 var $105=(($104+2)|0);
 $tcode=$105;
 label=11;break;
 case 16: 
 var $107=$scode;
 var $108=(($107+1)|0);
 var $109=HEAP8[($108)];
 var $110=($109&255);
 var $111=$110<<8;
 var $112=$scode;
 var $113=(($112+2)|0);
 var $114=HEAP8[($113)];
 var $115=($114&255);
 var $116=$111|$115;
 var $117=($116|0)==0;
 if($117){label=17;break;}else{label=18;break;}
 case 17: 
 $1=1;
 label=104;break;
 case 18: 
 label=34;break;
 case 19: 
 var $121=$6;
 $r=$121;
 var $122=$scode;
 $endgroup=$122;
 label=20;break;
 case 20: 
 var $124=$endgroup;
 var $125=(($124+1)|0);
 var $126=HEAP8[($125)];
 var $127=($126&255);
 var $128=$127<<8;
 var $129=$endgroup;
 var $130=(($129+2)|0);
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$128|$132;
 var $134=$endgroup;
 var $135=(($134+$133)|0);
 $endgroup=$135;
 label=21;break;
 case 21: 
 var $137=$endgroup;
 var $138=HEAP8[($137)];
 var $139=($138&255);
 var $140=($139|0)==119;
 if($140){label=20;break;}else{label=22;break;}
 case 22: 
 var $142=$2;
 var $143=$scode;
 var $144=($142>>>0)>=($143>>>0);
 if($144){label=23;break;}else{label=25;break;}
 case 23: 
 var $146=$2;
 var $147=$endgroup;
 var $148=($146>>>0)<=($147>>>0);
 if($148){label=24;break;}else{label=25;break;}
 case 24: 
 label=102;break;
 case 25: 
 var $151=$6;
 $r=$151;
 label=26;break;
 case 26: 
 var $153=$r;
 var $154=($153|0)!=0;
 if($154){label=27;break;}else{label=31;break;}
 case 27: 
 var $156=$r;
 var $157=(($156+4)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$scode;
 var $160=($158|0)==($159|0);
 if($160){label=28;break;}else{label=29;break;}
 case 28: 
 label=31;break;
 case 29: 
 label=30;break;
 case 30: 
 var $164=$r;
 var $165=(($164)|0);
 var $166=HEAP32[(($165)>>2)];
 $r=$166;
 label=26;break;
 case 31: 
 var $168=$r;
 var $169=($168|0)!=0;
 if($169){label=32;break;}else{label=33;break;}
 case 32: 
 label=102;break;
 case 33: 
 label=34;break;
 case 34: 
 $empty_branch=0;
 var $173=$6;
 var $174=(($this_recurse)|0);
 HEAP32[(($174)>>2)]=$173;
 var $175=$scode;
 var $176=(($this_recurse+4)|0);
 HEAP32[(($176)>>2)]=$175;
 label=35;break;
 case 35: 
 var $178=$scode;
 var $179=$3;
 var $180=$4;
 var $181=$5;
 var $182=_could_be_empty_branch($178,$179,$180,$181,$this_recurse);
 var $183=($182|0)!=0;
 if($183){label=36;break;}else{label=37;break;}
 case 36: 
 $empty_branch=1;
 label=39;break;
 case 37: 
 var $186=$scode;
 var $187=(($186+1)|0);
 var $188=HEAP8[($187)];
 var $189=($188&255);
 var $190=$189<<8;
 var $191=$scode;
 var $192=(($191+2)|0);
 var $193=HEAP8[($192)];
 var $194=($193&255);
 var $195=$190|$194;
 var $196=$scode;
 var $197=(($196+$195)|0);
 $scode=$197;
 label=38;break;
 case 38: 
 var $199=$scode;
 var $200=HEAP8[($199)];
 var $201=($200&255);
 var $202=($201|0)==119;
 if($202){label=35;break;}else{label=39;break;}
 case 39: 
 var $204=$empty_branch;
 var $205=($204|0)!=0;
 if($205){label=41;break;}else{label=40;break;}
 case 40: 
 $1=0;
 label=104;break;
 case 41: 
 label=102;break;
 case 42: 
 var $209=$c;
 var $210=($209&255);
 var $211=($210|0)==146;
 if($211){label=46;break;}else{label=43;break;}
 case 43: 
 var $213=$c;
 var $214=($213&255);
 var $215=($214|0)==147;
 if($215){label=46;break;}else{label=44;break;}
 case 44: 
 var $217=$c;
 var $218=($217&255);
 var $219=($218|0)==161;
 if($219){label=46;break;}else{label=45;break;}
 case 45: 
 var $221=$c;
 var $222=($221&255);
 var $223=($222|0)==148;
 if($223){label=46;break;}else{label=50;break;}
 case 46: 
 var $225=$c;
 var $226=($225&255);
 var $227=((6760+$226)|0);
 var $228=HEAP8[($227)];
 var $229=($228&255);
 var $230=$2;
 var $231=(($230+$229)|0);
 $2=$231;
 label=47;break;
 case 47: 
 var $233=$2;
 var $234=(($233+1)|0);
 var $235=HEAP8[($234)];
 var $236=($235&255);
 var $237=$236<<8;
 var $238=$2;
 var $239=(($238+2)|0);
 var $240=HEAP8[($239)];
 var $241=($240&255);
 var $242=$237|$241;
 var $243=$2;
 var $244=(($243+$242)|0);
 $2=$244;
 label=48;break;
 case 48: 
 var $246=$2;
 var $247=HEAP8[($246)];
 var $248=($247&255);
 var $249=($248|0)==119;
 if($249){label=47;break;}else{label=49;break;}
 case 49: 
 var $251=$2;
 var $252=HEAP8[($251)];
 $c=$252;
 label=102;break;
 case 50: 
 var $254=$c;
 var $255=($254&255);
 var $256=($255|0)==136;
 if($256){label=54;break;}else{label=51;break;}
 case 51: 
 var $258=$c;
 var $259=($258&255);
 var $260=($259|0)==137;
 if($260){label=54;break;}else{label=52;break;}
 case 52: 
 var $262=$c;
 var $263=($262&255);
 var $264=($263|0)==138;
 if($264){label=54;break;}else{label=53;break;}
 case 53: 
 var $266=$c;
 var $267=($266&255);
 var $268=($267|0)==139;
 if($268){label=54;break;}else{label=58;break;}
 case 54: 
 label=55;break;
 case 55: 
 var $271=$2;
 var $272=(($271+1)|0);
 var $273=HEAP8[($272)];
 var $274=($273&255);
 var $275=$274<<8;
 var $276=$2;
 var $277=(($276+2)|0);
 var $278=HEAP8[($277)];
 var $279=($278&255);
 var $280=$275|$279;
 var $281=$2;
 var $282=(($281+$280)|0);
 $2=$282;
 label=56;break;
 case 56: 
 var $284=$2;
 var $285=HEAP8[($284)];
 var $286=($285&255);
 var $287=($286|0)==119;
 if($287){label=55;break;}else{label=57;break;}
 case 57: 
 var $289=$2;
 var $290=HEAP8[($289)];
 $c=$290;
 label=102;break;
 case 58: 
 var $292=$c;
 var $293=($292&255);
 var $294=($293|0)==131;
 if($294){label=65;break;}else{label=59;break;}
 case 59: 
 var $296=$c;
 var $297=($296&255);
 var $298=($297|0)==132;
 if($298){label=65;break;}else{label=60;break;}
 case 60: 
 var $300=$c;
 var $301=($300&255);
 var $302=($301|0)==133;
 if($302){label=65;break;}else{label=61;break;}
 case 61: 
 var $304=$c;
 var $305=($304&255);
 var $306=($305|0)==134;
 if($306){label=65;break;}else{label=62;break;}
 case 62: 
 var $308=$c;
 var $309=($308&255);
 var $310=($309|0)==129;
 if($310){label=65;break;}else{label=63;break;}
 case 63: 
 var $312=$c;
 var $313=($312&255);
 var $314=($313|0)==130;
 if($314){label=65;break;}else{label=64;break;}
 case 64: 
 var $316=$c;
 var $317=($316&255);
 var $318=($317|0)==135;
 if($318){label=65;break;}else{label=80;break;}
 case 65: 
 var $320=$2;
 var $321=(($320+1)|0);
 var $322=HEAP8[($321)];
 var $323=($322&255);
 var $324=$323<<8;
 var $325=$2;
 var $326=(($325+2)|0);
 var $327=HEAP8[($326)];
 var $328=($327&255);
 var $329=$324|$328;
 var $330=($329|0)==0;
 if($330){label=66;break;}else{label=67;break;}
 case 66: 
 $1=1;
 label=104;break;
 case 67: 
 var $333=$c;
 var $334=($333&255);
 var $335=($334|0)==135;
 if($335){label=68;break;}else{label=70;break;}
 case 68: 
 var $337=$2;
 var $338=(($337+1)|0);
 var $339=HEAP8[($338)];
 var $340=($339&255);
 var $341=$340<<8;
 var $342=$2;
 var $343=(($342+2)|0);
 var $344=HEAP8[($343)];
 var $345=($344&255);
 var $346=$341|$345;
 var $347=$2;
 var $348=(($347+$346)|0);
 var $349=HEAP8[($348)];
 var $350=($349&255);
 var $351=($350|0)!=119;
 if($351){label=69;break;}else{label=70;break;}
 case 69: 
 var $353=$2;
 var $354=(($353+1)|0);
 var $355=HEAP8[($354)];
 var $356=($355&255);
 var $357=$356<<8;
 var $358=$2;
 var $359=(($358+2)|0);
 var $360=HEAP8[($359)];
 var $361=($360&255);
 var $362=$357|$361;
 var $363=$2;
 var $364=(($363+$362)|0);
 $2=$364;
 label=79;break;
 case 70: 
 $empty_branch1=0;
 label=71;break;
 case 71: 
 var $367=$empty_branch1;
 var $368=($367|0)!=0;
 if($368){label=74;break;}else{label=72;break;}
 case 72: 
 var $370=$2;
 var $371=$3;
 var $372=$4;
 var $373=$5;
 var $374=_could_be_empty_branch($370,$371,$372,$373,0);
 var $375=($374|0)!=0;
 if($375){label=73;break;}else{label=74;break;}
 case 73: 
 $empty_branch1=1;
 label=74;break;
 case 74: 
 var $378=$2;
 var $379=(($378+1)|0);
 var $380=HEAP8[($379)];
 var $381=($380&255);
 var $382=$381<<8;
 var $383=$2;
 var $384=(($383+2)|0);
 var $385=HEAP8[($384)];
 var $386=($385&255);
 var $387=$382|$386;
 var $388=$2;
 var $389=(($388+$387)|0);
 $2=$389;
 label=75;break;
 case 75: 
 var $391=$2;
 var $392=HEAP8[($391)];
 var $393=($392&255);
 var $394=($393|0)==119;
 if($394){label=71;break;}else{label=76;break;}
 case 76: 
 var $396=$empty_branch1;
 var $397=($396|0)!=0;
 if($397){label=78;break;}else{label=77;break;}
 case 77: 
 $1=0;
 label=104;break;
 case 78: 
 label=79;break;
 case 79: 
 var $401=$2;
 var $402=HEAP8[($401)];
 $c=$402;
 label=102;break;
 case 80: 
 var $404=$c;
 var $405=($404&255);
 switch(($405|0)){case 110:case 111:{ label=81;break;}case 12:case 13:case 14:case 16:case 15:case 17:case 18:case 19:case 20:case 21:case 22:case 6:case 7:case 8:case 9:case 10:case 11:case 29:case 30:case 31:case 32:case 35:case 48:case 36:case 49:case 61:case 74:case 62:case 75:case 43:case 56:case 69:case 82:case 41:case 54:case 67:case 80:case 87:case 88:case 95:case 93:{ label=89;break;}case 85:case 86:case 94:case 89:case 90:case 96:{ label=90;break;}case 91:case 92:case 97:{ label=94;break;}case 120:case 121:case 122:case 123:case 119:{ label=98;break;}case 149:case 151:case 153:case 155:{ label=99;break;}default:{label=100;break;}}break;
 case 81: 
 var $407=$2;
 var $408=HEAP8[(6870)];
 var $409=($408&255);
 var $410=(($407+$409)|0);
 $ccode=$410;
 var $411=$ccode;
 var $412=HEAP8[($411)];
 var $413=($412&255);
 switch(($413|0)){case 98:case 99:case 102:case 103:case 106:case 108:{ label=82;break;}case 100:case 101:case 107:{ label=84;break;}case 104:case 105:case 109:{ label=85;break;}default:{label=83;break;}}break;
 case 82: 
 label=88;break;
 case 83: 
 label=84;break;
 case 84: 
 $1=0;
 label=104;break;
 case 85: 
 var $418=$ccode;
 var $419=(($418+1)|0);
 var $420=HEAP8[($419)];
 var $421=($420&255);
 var $422=$421<<8;
 var $423=$ccode;
 var $424=(($423+2)|0);
 var $425=HEAP8[($424)];
 var $426=($425&255);
 var $427=$422|$426;
 var $428=($427>>>0)>0;
 if($428){label=86;break;}else{label=87;break;}
 case 86: 
 $1=0;
 label=104;break;
 case 87: 
 label=88;break;
 case 88: 
 label=101;break;
 case 89: 
 $1=0;
 label=104;break;
 case 90: 
 var $434=$2;
 var $435=(($434+1)|0);
 var $436=HEAP8[($435)];
 var $437=($436&255);
 var $438=($437|0)==16;
 if($438){label=92;break;}else{label=91;break;}
 case 91: 
 var $440=$2;
 var $441=(($440+1)|0);
 var $442=HEAP8[($441)];
 var $443=($442&255);
 var $444=($443|0)==15;
 if($444){label=92;break;}else{label=93;break;}
 case 92: 
 var $446=$2;
 var $447=(($446+2)|0);
 $2=$447;
 label=93;break;
 case 93: 
 label=101;break;
 case 94: 
 var $450=$2;
 var $451=(($450+3)|0);
 var $452=HEAP8[($451)];
 var $453=($452&255);
 var $454=($453|0)==16;
 if($454){label=96;break;}else{label=95;break;}
 case 95: 
 var $456=$2;
 var $457=(($456+3)|0);
 var $458=HEAP8[($457)];
 var $459=($458&255);
 var $460=($459|0)==15;
 if($460){label=96;break;}else{label=97;break;}
 case 96: 
 var $462=$2;
 var $463=(($462+2)|0);
 $2=$463;
 label=97;break;
 case 97: 
 label=101;break;
 case 98: 
 $1=1;
 label=104;break;
 case 99: 
 var $467=$2;
 var $468=(($467+1)|0);
 var $469=HEAP8[($468)];
 var $470=($469&255);
 var $471=$2;
 var $472=(($471+$470)|0);
 $2=$472;
 label=101;break;
 case 100: 
 label=101;break;
 case 101: 
 label=102;break;
 case 102: 
 var $476=$2;
 var $477=$c;
 var $478=($477&255);
 var $479=((6760+$478)|0);
 var $480=HEAP8[($479)];
 var $481=($480&255);
 var $482=(($476+$481)|0);
 var $483=_first_significant_code($482,1);
 $2=$483;
 label=2;break;
 case 103: 
 $1=1;
 label=104;break;
 case 104: 
 var $486=$1;
 STACKTOP=sp;return $486;
  default: assert(0, "bad label: " + label);
 }
}
function _first_significant_code($code,$skipassert){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 $2=$code;
 $3=$skipassert;
 label=2;break;
 case 2: 
 var $5=$2;
 var $6=HEAP8[($5)];
 var $7=($6&255);
 switch(($7|0)){case 118:case 141:case 142:case 143:case 144:case 145:{ label=12;break;}case 126:case 127:case 128:{ label=3;break;}case 5:case 4:{ label=9;break;}default:{label=13;break;}}break;
 case 3: 
 var $9=$3;
 var $10=($9|0)!=0;
 if($10){label=5;break;}else{label=4;break;}
 case 4: 
 var $12=$2;
 $1=$12;
 label=15;break;
 case 5: 
 label=6;break;
 case 6: 
 var $15=$2;
 var $16=(($15+1)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 var $19=$18<<8;
 var $20=$2;
 var $21=(($20+2)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$19|$23;
 var $25=$2;
 var $26=(($25+$24)|0);
 $2=$26;
 label=7;break;
 case 7: 
 var $28=$2;
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=($30|0)==119;
 if($31){label=6;break;}else{label=8;break;}
 case 8: 
 var $33=$2;
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=((6760+$35)|0);
 var $37=HEAP8[($36)];
 var $38=($37&255);
 var $39=$2;
 var $40=(($39+$38)|0);
 $2=$40;
 label=14;break;
 case 9: 
 var $42=$3;
 var $43=($42|0)!=0;
 if($43){label=11;break;}else{label=10;break;}
 case 10: 
 var $45=$2;
 $1=$45;
 label=15;break;
 case 11: 
 label=12;break;
 case 12: 
 var $48=$2;
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=((6760+$50)|0);
 var $52=HEAP8[($51)];
 var $53=($52&255);
 var $54=$2;
 var $55=(($54+$53)|0);
 $2=$55;
 label=14;break;
 case 13: 
 var $57=$2;
 $1=$57;
 label=15;break;
 case 14: 
 label=2;break;
 case 15: 
 var $60=$1;
 STACKTOP=sp;return $60;
  default: assert(0, "bad label: " + label);
 }
}
function _get_repeat_base($c){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 $1=$c;
 var $2=$1;
 var $3=($2&255);
 var $4=($3|0)>97;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=$1;
 var $7=($6&255);
 var $35=$7;label=13;break;
 case 3: 
 var $9=$1;
 var $10=($9&255);
 var $11=($10|0)>=85;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $33=85;label=12;break;
 case 5: 
 var $14=$1;
 var $15=($14&255);
 var $16=($15|0)>=72;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $31=72;label=11;break;
 case 7: 
 var $19=$1;
 var $20=($19&255);
 var $21=($20|0)>=59;
 if($21){label=8;break;}else{label=9;break;}
 case 8: 
 var $29=59;label=10;break;
 case 9: 
 var $24=$1;
 var $25=($24&255);
 var $26=($25|0)>=46;
 var $27=($26?46:33);
 var $29=$27;label=10;break;
 case 10: 
 var $29;
 var $31=$29;label=11;break;
 case 11: 
 var $31;
 var $33=$31;label=12;break;
 case 12: 
 var $33;
 var $35=$33;label=13;break;
 case 13: 
 var $35;
 var $36=(($35)&255);
 STACKTOP=sp;return $36;
  default: assert(0, "bad label: " + label);
 }
}
function _get_chr_property_list($code,$utf,$fcc,$list){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $c;
 var $base;
 var $end;
 var $chr;
 $2=$code;
 $3=$utf;
 $4=$fcc;
 $5=$list;
 var $6=$2;
 var $7=HEAP8[($6)];
 $c=$7;
 var $8=$3;
 $3=$8;
 var $9=$c;
 var $10=($9&255);
 var $11=$5;
 var $12=(($11)|0);
 HEAP32[(($12)>>2)]=$10;
 var $13=$5;
 var $14=(($13+4)|0);
 HEAP32[(($14)>>2)]=0;
 var $15=$2;
 var $16=(($15+1)|0);
 $2=$16;
 var $17=$c;
 var $18=($17&255);
 var $19=($18|0)>=33;
 if($19){label=2;break;}else{label=19;break;}
 case 2: 
 var $21=$c;
 var $22=($21&255);
 var $23=($22|0)<=97;
 if($23){label=3;break;}else{label=19;break;}
 case 3: 
 var $25=$c;
 var $26=_get_repeat_base($25);
 $base=$26;
 var $27=$base;
 var $28=($27&255);
 var $29=((($28)-(33))|0);
 var $30=$c;
 var $31=($30&255);
 var $32=((($31)-($29))|0);
 var $33=(($32)&255);
 $c=$33;
 var $34=$c;
 var $35=($34&255);
 var $36=($35|0)==39;
 if($36){label=7;break;}else{label=4;break;}
 case 4: 
 var $38=$c;
 var $39=($38&255);
 var $40=($39|0)==40;
 if($40){label=7;break;}else{label=5;break;}
 case 5: 
 var $42=$c;
 var $43=($42&255);
 var $44=($43|0)==41;
 if($44){label=7;break;}else{label=6;break;}
 case 6: 
 var $46=$c;
 var $47=($46&255);
 var $48=($47|0)==45;
 if($48){label=7;break;}else{label=8;break;}
 case 7: 
 var $50=$2;
 var $51=(($50+2)|0);
 $2=$51;
 label=8;break;
 case 8: 
 var $53=$c;
 var $54=($53&255);
 var $55=($54|0)!=35;
 if($55){label=9;break;}else{var $69=0;label=12;break;}
 case 9: 
 var $57=$c;
 var $58=($57&255);
 var $59=($58|0)!=36;
 if($59){label=10;break;}else{var $69=0;label=12;break;}
 case 10: 
 var $61=$c;
 var $62=($61&255);
 var $63=($62|0)!=41;
 if($63){label=11;break;}else{var $69=0;label=12;break;}
 case 11: 
 var $65=$c;
 var $66=($65&255);
 var $67=($66|0)!=43;
 var $69=$67;label=12;break;
 case 12: 
 var $69;
 var $70=($69&1);
 var $71=$5;
 var $72=(($71+4)|0);
 HEAP32[(($72)>>2)]=$70;
 var $73=$base;
 var $74=($73&255);
 switch(($74|0)){case 33:{ label=13;break;}case 46:{ label=14;break;}case 59:{ label=15;break;}case 72:{ label=16;break;}case 85:{ label=17;break;}default:{label=18;break;}}break;
 case 13: 
 var $76=$5;
 var $77=(($76)|0);
 HEAP32[(($77)>>2)]=29;
 label=18;break;
 case 14: 
 var $79=$5;
 var $80=(($79)|0);
 HEAP32[(($80)>>2)]=30;
 label=18;break;
 case 15: 
 var $82=$5;
 var $83=(($82)|0);
 HEAP32[(($83)>>2)]=31;
 label=18;break;
 case 16: 
 var $85=$5;
 var $86=(($85)|0);
 HEAP32[(($86)>>2)]=32;
 label=18;break;
 case 17: 
 var $88=$2;
 var $89=HEAP8[($88)];
 var $90=($89&255);
 var $91=$5;
 var $92=(($91)|0);
 HEAP32[(($92)>>2)]=$90;
 var $93=$2;
 var $94=(($93+1)|0);
 $2=$94;
 label=18;break;
 case 18: 
 var $96=$5;
 var $97=(($96)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98)&255);
 $c=$99;
 label=19;break;
 case 19: 
 var $101=$c;
 var $102=($101&255);
 switch(($102|0)){case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:{ label=20;break;}case 29:case 31:{ label=21;break;}case 30:case 32:{ label=22;break;}case 111:case 110:{ label=26;break;}default:{label=31;break;}}break;
 case 20: 
 var $104=$2;
 $1=$104;
 label=32;break;
 case 21: 
 var $106=$2;
 var $107=(($106+1)|0);
 $2=$107;
 var $108=HEAP8[($106)];
 var $109=($108&255);
 $chr=$109;
 var $110=$chr;
 var $111=$5;
 var $112=(($111+8)|0);
 HEAP32[(($112)>>2)]=$110;
 var $113=$5;
 var $114=(($113+12)|0);
 HEAP32[(($114)>>2)]=-1;
 var $115=$2;
 $1=$115;
 label=32;break;
 case 22: 
 var $117=$c;
 var $118=($117&255);
 var $119=($118|0)==30;
 var $120=($119?29:31);
 var $121=$5;
 var $122=(($121)|0);
 HEAP32[(($122)>>2)]=$120;
 var $123=$2;
 var $124=(($123+1)|0);
 $2=$124;
 var $125=HEAP8[($123)];
 var $126=($125&255);
 $chr=$126;
 var $127=$chr;
 var $128=$5;
 var $129=(($128+8)|0);
 HEAP32[(($129)>>2)]=$127;
 var $130=$chr;
 var $131=$4;
 var $132=(($131+$130)|0);
 var $133=HEAP8[($132)];
 var $134=($133&255);
 var $135=$5;
 var $136=(($135+12)|0);
 HEAP32[(($136)>>2)]=$134;
 var $137=$chr;
 var $138=$5;
 var $139=(($138+12)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($137|0)==($140|0);
 if($141){label=23;break;}else{label=24;break;}
 case 23: 
 var $143=$5;
 var $144=(($143+12)|0);
 HEAP32[(($144)>>2)]=-1;
 label=25;break;
 case 24: 
 var $146=$5;
 var $147=(($146+16)|0);
 HEAP32[(($147)>>2)]=-1;
 label=25;break;
 case 25: 
 var $149=$2;
 $1=$149;
 label=32;break;
 case 26: 
 var $151=$2;
 var $152=(($151+32)|0);
 $end=$152;
 var $153=$end;
 var $154=HEAP8[($153)];
 var $155=($154&255);
 switch(($155|0)){case 98:case 99:case 102:case 103:case 106:case 108:{ label=27;break;}case 100:case 101:case 107:{ label=28;break;}case 104:case 105:case 109:{ label=29;break;}default:{label=30;break;}}break;
 case 27: 
 var $157=$5;
 var $158=(($157+4)|0);
 HEAP32[(($158)>>2)]=1;
 var $159=$end;
 var $160=(($159+1)|0);
 $end=$160;
 label=30;break;
 case 28: 
 var $162=$end;
 var $163=(($162+1)|0);
 $end=$163;
 label=30;break;
 case 29: 
 var $165=$end;
 var $166=(($165+1)|0);
 var $167=HEAP8[($166)];
 var $168=($167&255);
 var $169=$168<<8;
 var $170=$end;
 var $171=(($170+2)|0);
 var $172=HEAP8[($171)];
 var $173=($172&255);
 var $174=$169|$173;
 var $175=($174|0)==0;
 var $176=($175&1);
 var $177=$5;
 var $178=(($177+4)|0);
 HEAP32[(($178)>>2)]=$176;
 var $179=$end;
 var $180=(($179+5)|0);
 $end=$180;
 label=30;break;
 case 30: 
 var $182=$end;
 var $183=$2;
 var $184=$182;
 var $185=$183;
 var $186=((($184)-($185))|0);
 var $187=$5;
 var $188=(($187+8)|0);
 HEAP32[(($188)>>2)]=$186;
 var $189=$end;
 $1=$189;
 label=32;break;
 case 31: 
 $1=0;
 label=32;break;
 case 32: 
 var $192=$1;
 STACKTOP=sp;return $192;
  default: assert(0, "bad label: " + label);
 }
}
function _compare_opcodes($code,$utf,$cd,$base_list,$base_end){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $c;
 var $list=sp;
 var $chr_ptr;
 var $ochr_ptr;
 var $list_ptr;
 var $next_code;
 var $class_bitset;
 var $set1;
 var $set2;
 var $set_end;
 var $chr;
 var $accepted;
 var $invert_bits;
 var $leftop;
 var $rightop;
 $2=$code;
 $3=$utf;
 $4=$cd;
 $5=$base_list;
 $6=$base_end;
 label=2;break;
 case 2: 
 var $8=$2;
 var $9=HEAP8[($8)];
 $c=$9;
 var $10=$c;
 var $11=($10&255);
 var $12=($11|0)==118;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 var $14=$c;
 var $15=($14&255);
 var $16=((6760+$15)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 var $19=$2;
 var $20=(($19+$18)|0);
 $2=$20;
 label=2;break;
 case 4: 
 var $22=$c;
 var $23=($22&255);
 var $24=($23|0)==119;
 if($24){label=5;break;}else{label=9;break;}
 case 5: 
 label=6;break;
 case 6: 
 var $27=$2;
 var $28=(($27+1)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$30<<8;
 var $32=$2;
 var $33=(($32+2)|0);
 var $34=HEAP8[($33)];
 var $35=($34&255);
 var $36=$31|$35;
 var $37=$2;
 var $38=(($37+$36)|0);
 $2=$38;
 label=7;break;
 case 7: 
 var $40=$2;
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=($42|0)==119;
 if($43){label=6;break;}else{label=8;break;}
 case 8: 
 var $45=$2;
 var $46=HEAP8[($45)];
 $c=$46;
 label=9;break;
 case 9: 
 var $48=$c;
 var $49=($48&255);
 switch(($49|0)){case 0:case 123:{ label=10;break;}case 120:{ label=11;break;}case 129:case 130:case 131:case 133:{ label=16;break;}case 146:case 147:{ label=22;break;}default:{label=33;break;}}break;
 case 10: 
 var $51=$5;
 var $52=(($51+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)!=0;
 var $55=($54&1);
 $1=$55;
 label=165;break;
 case 11: 
 var $57=$5;
 var $58=(($57+4)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==0;
 if($60){label=12;break;}else{label=13;break;}
 case 12: 
 $1=0;
 label=165;break;
 case 13: 
 var $63=$2;
 var $64=$2;
 var $65=(($64+1)|0);
 var $66=HEAP8[($65)];
 var $67=($66&255);
 var $68=$67<<8;
 var $69=$2;
 var $70=(($69+2)|0);
 var $71=HEAP8[($70)];
 var $72=($71&255);
 var $73=$68|$72;
 var $74=(((-$73))|0);
 var $75=(($63+$74)|0);
 var $76=HEAP8[($75)];
 var $77=($76&255);
 switch(($77|0)){case 125:case 126:case 127:case 128:case 129:case 130:{ label=14;break;}default:{label=15;break;}}break;
 case 14: 
 $1=1;
 label=165;break;
 case 15: 
 var $80=$c;
 var $81=($80&255);
 var $82=((6760+$81)|0);
 var $83=HEAP8[($82)];
 var $84=($83&255);
 var $85=$2;
 var $86=(($85+$84)|0);
 $2=$86;
 label=2;break;
 case 16: 
 var $88=$2;
 var $89=$2;
 var $90=(($89+1)|0);
 var $91=HEAP8[($90)];
 var $92=($91&255);
 var $93=$92<<8;
 var $94=$2;
 var $95=(($94+2)|0);
 var $96=HEAP8[($95)];
 var $97=($96&255);
 var $98=$93|$97;
 var $99=(($88+$98)|0);
 $next_code=$99;
 var $100=$c;
 var $101=($100&255);
 var $102=((6760+$101)|0);
 var $103=HEAP8[($102)];
 var $104=($103&255);
 var $105=$2;
 var $106=(($105+$104)|0);
 $2=$106;
 label=17;break;
 case 17: 
 var $108=$next_code;
 var $109=HEAP8[($108)];
 var $110=($109&255);
 var $111=($110|0)==119;
 if($111){label=18;break;}else{label=21;break;}
 case 18: 
 var $113=$2;
 var $114=$3;
 var $115=$4;
 var $116=$5;
 var $117=$6;
 var $118=_compare_opcodes($113,$114,$115,$116,$117);
 var $119=($118|0)!=0;
 if($119){label=20;break;}else{label=19;break;}
 case 19: 
 $1=0;
 label=165;break;
 case 20: 
 var $122=$next_code;
 var $123=(($122+1)|0);
 var $124=(($123+2)|0);
 $2=$124;
 var $125=$next_code;
 var $126=(($125+1)|0);
 var $127=HEAP8[($126)];
 var $128=($127&255);
 var $129=$128<<8;
 var $130=$next_code;
 var $131=(($130+2)|0);
 var $132=HEAP8[($131)];
 var $133=($132&255);
 var $134=$129|$133;
 var $135=$next_code;
 var $136=(($135+$134)|0);
 $next_code=$136;
 label=17;break;
 case 21: 
 label=2;break;
 case 22: 
 var $139=$2;
 var $140=(($139+1)|0);
 $next_code=$140;
 var $141=$next_code;
 var $142=HEAP8[($141)];
 var $143=($142&255);
 var $144=($143|0)!=131;
 if($144){label=23;break;}else{label=27;break;}
 case 23: 
 var $146=$next_code;
 var $147=HEAP8[($146)];
 var $148=($147&255);
 var $149=($148|0)!=133;
 if($149){label=24;break;}else{label=27;break;}
 case 24: 
 var $151=$next_code;
 var $152=HEAP8[($151)];
 var $153=($152&255);
 var $154=($153|0)!=129;
 if($154){label=25;break;}else{label=27;break;}
 case 25: 
 var $156=$next_code;
 var $157=HEAP8[($156)];
 var $158=($157&255);
 var $159=($158|0)!=130;
 if($159){label=26;break;}else{label=27;break;}
 case 26: 
 $1=0;
 label=165;break;
 case 27: 
 label=28;break;
 case 28: 
 var $163=$next_code;
 var $164=(($163+1)|0);
 var $165=HEAP8[($164)];
 var $166=($165&255);
 var $167=$166<<8;
 var $168=$next_code;
 var $169=(($168+2)|0);
 var $170=HEAP8[($169)];
 var $171=($170&255);
 var $172=$167|$171;
 var $173=$next_code;
 var $174=(($173+$172)|0);
 $next_code=$174;
 label=29;break;
 case 29: 
 var $176=$next_code;
 var $177=HEAP8[($176)];
 var $178=($177&255);
 var $179=($178|0)==119;
 if($179){label=28;break;}else{label=30;break;}
 case 30: 
 var $181=$next_code;
 var $182=(($181+3)|0);
 $next_code=$182;
 var $183=$next_code;
 var $184=$3;
 var $185=$4;
 var $186=$5;
 var $187=$6;
 var $188=_compare_opcodes($183,$184,$185,$186,$187);
 var $189=($188|0)!=0;
 if($189){label=32;break;}else{label=31;break;}
 case 31: 
 $1=0;
 label=165;break;
 case 32: 
 var $192=$c;
 var $193=($192&255);
 var $194=((6760+$193)|0);
 var $195=HEAP8[($194)];
 var $196=($195&255);
 var $197=$2;
 var $198=(($197+$196)|0);
 $2=$198;
 label=2;break;
 case 33: 
 var $200=$2;
 var $201=$3;
 var $202=$4;
 var $203=(($202+4)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(($list)|0);
 var $206=_get_chr_property_list($200,$201,$204,$205);
 $2=$206;
 var $207=$2;
 var $208=($207|0)==0;
 if($208){label=34;break;}else{label=35;break;}
 case 34: 
 $1=0;
 label=165;break;
 case 35: 
 var $211=$5;
 var $212=(($211)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=($213|0)==29;
 if($214){label=36;break;}else{label=37;break;}
 case 36: 
 var $216=$5;
 var $217=(($216+8)|0);
 $chr_ptr=$217;
 var $218=(($list)|0);
 $list_ptr=$218;
 label=88;break;
 case 37: 
 var $220=(($list)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==29;
 if($222){label=38;break;}else{label=39;break;}
 case 38: 
 var $224=(($list)|0);
 var $225=(($224+8)|0);
 $chr_ptr=$225;
 var $226=$5;
 $list_ptr=$226;
 label=87;break;
 case 39: 
 var $228=$5;
 var $229=(($228)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=($230|0)==110;
 if($231){label=44;break;}else{label=40;break;}
 case 40: 
 var $233=(($list)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=($234|0)==110;
 if($235){label=44;break;}else{label=41;break;}
 case 41: 
 var $237=$3;
 var $238=($237|0)!=0;
 if($238){label=77;break;}else{label=42;break;}
 case 42: 
 var $240=$5;
 var $241=(($240)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($242|0)==111;
 if($243){label=44;break;}else{label=43;break;}
 case 43: 
 var $245=(($list)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=($246|0)==111;
 if($247){label=44;break;}else{label=77;break;}
 case 44: 
 var $249=$5;
 var $250=(($249)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=($251|0)==110;
 if($252){label=47;break;}else{label=45;break;}
 case 45: 
 var $254=$3;
 var $255=($254|0)!=0;
 if($255){label=48;break;}else{label=46;break;}
 case 46: 
 var $257=$5;
 var $258=(($257)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==111;
 if($260){label=47;break;}else{label=48;break;}
 case 47: 
 var $262=$6;
 var $263=$5;
 var $264=(($263+8)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(((-$265))|0);
 var $267=(($262+$266)|0);
 $set1=$267;
 var $268=(($list)|0);
 $list_ptr=$268;
 label=49;break;
 case 48: 
 var $270=$2;
 var $271=(($list+8)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=(((-$272))|0);
 var $274=(($270+$273)|0);
 $set1=$274;
 var $275=$5;
 $list_ptr=$275;
 label=49;break;
 case 49: 
 $invert_bits=0;
 var $277=$list_ptr;
 var $278=(($277)|0);
 var $279=HEAP32[(($278)>>2)];
 switch(($279|0)){case 110:case 111:{ label=50;break;}case 6:{ label=54;break;}case 7:{ label=55;break;}case 8:{ label=56;break;}case 9:{ label=57;break;}case 10:{ label=58;break;}case 11:{ label=59;break;}default:{label=60;break;}}break;
 case 50: 
 var $281=$list_ptr;
 var $282=(($list)|0);
 var $283=($281|0)==($282|0);
 if($283){label=51;break;}else{label=52;break;}
 case 51: 
 var $285=$2;
 var $289=$285;label=53;break;
 case 52: 
 var $287=$6;
 var $289=$287;label=53;break;
 case 53: 
 var $289;
 var $290=$list_ptr;
 var $291=(($290+8)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=(((-$292))|0);
 var $294=(($289+$293)|0);
 $set2=$294;
 label=61;break;
 case 54: 
 $invert_bits=1;
 label=55;break;
 case 55: 
 var $297=$4;
 var $298=(($297+8)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=(($299+64)|0);
 $set2=$300;
 label=61;break;
 case 56: 
 $invert_bits=1;
 label=57;break;
 case 57: 
 var $303=$4;
 var $304=(($303+8)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=(($305)|0);
 $set2=$306;
 label=61;break;
 case 58: 
 $invert_bits=1;
 label=59;break;
 case 59: 
 var $309=$4;
 var $310=(($309+8)|0);
 var $311=HEAP32[(($310)>>2)];
 var $312=(($311+160)|0);
 $set2=$312;
 label=61;break;
 case 60: 
 $1=0;
 label=165;break;
 case 61: 
 var $315=$set1;
 var $316=(($315+32)|0);
 $set_end=$316;
 var $317=$invert_bits;
 var $318=($317|0)!=0;
 if($318){label=62;break;}else{label=68;break;}
 case 62: 
 label=63;break;
 case 63: 
 var $321=$set1;
 var $322=(($321+1)|0);
 $set1=$322;
 var $323=HEAP8[($321)];
 var $324=($323&255);
 var $325=$set2;
 var $326=(($325+1)|0);
 $set2=$326;
 var $327=HEAP8[($325)];
 var $328=($327&255);
 var $329=$328^-1;
 var $330=$324&$329;
 var $331=($330|0)!=0;
 if($331){label=64;break;}else{label=65;break;}
 case 64: 
 $1=0;
 label=165;break;
 case 65: 
 label=66;break;
 case 66: 
 var $335=$set1;
 var $336=$set_end;
 var $337=($335>>>0)<($336>>>0);
 if($337){label=63;break;}else{label=67;break;}
 case 67: 
 label=74;break;
 case 68: 
 label=69;break;
 case 69: 
 var $341=$set1;
 var $342=(($341+1)|0);
 $set1=$342;
 var $343=HEAP8[($341)];
 var $344=($343&255);
 var $345=$set2;
 var $346=(($345+1)|0);
 $set2=$346;
 var $347=HEAP8[($345)];
 var $348=($347&255);
 var $349=$344&$348;
 var $350=($349|0)!=0;
 if($350){label=70;break;}else{label=71;break;}
 case 70: 
 $1=0;
 label=165;break;
 case 71: 
 label=72;break;
 case 72: 
 var $354=$set1;
 var $355=$set_end;
 var $356=($354>>>0)<($355>>>0);
 if($356){label=69;break;}else{label=73;break;}
 case 73: 
 label=74;break;
 case 74: 
 var $359=(($list+4)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=($360|0)==0;
 if($361){label=75;break;}else{label=76;break;}
 case 75: 
 $1=1;
 label=165;break;
 case 76: 
 label=2;break;
 case 77: 
 var $365=$5;
 var $366=(($365)|0);
 var $367=HEAP32[(($366)>>2)];
 $leftop=$367;
 var $368=(($list)|0);
 var $369=HEAP32[(($368)>>2)];
 $rightop=$369;
 var $370=$leftop;
 var $371=($370>>>0)>=6;
 if($371){label=78;break;}else{var $392=0;label=82;break;}
 case 78: 
 var $373=$leftop;
 var $374=($373>>>0)<=22;
 if($374){label=79;break;}else{var $392=0;label=82;break;}
 case 79: 
 var $376=$rightop;
 var $377=($376>>>0)>=6;
 if($377){label=80;break;}else{var $392=0;label=82;break;}
 case 80: 
 var $379=$rightop;
 var $380=($379>>>0)<=26;
 if($380){label=81;break;}else{var $392=0;label=82;break;}
 case 81: 
 var $382=$rightop;
 var $383=((($382)-(6))|0);
 var $384=$leftop;
 var $385=((($384)-(6))|0);
 var $386=((4352+((($385)*(21))&-1))|0);
 var $387=(($386+$383)|0);
 var $388=HEAP8[($387)];
 var $389=($388&255);
 var $390=($389|0)!=0;
 var $392=$390;label=82;break;
 case 82: 
 var $392;
 var $393=($392&1);
 $accepted=$393;
 var $394=$accepted;
 var $395=($394|0)!=0;
 if($395){label=84;break;}else{label=83;break;}
 case 83: 
 $1=0;
 label=165;break;
 case 84: 
 var $398=(($list+4)|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=($399|0)==0;
 if($400){label=85;break;}else{label=86;break;}
 case 85: 
 $1=1;
 label=165;break;
 case 86: 
 label=2;break;
 case 87: 
 label=88;break;
 case 88: 
 label=89;break;
 case 89: 
 var $406=$chr_ptr;
 var $407=HEAP32[(($406)>>2)];
 $chr=$407;
 var $408=$list_ptr;
 var $409=(($408)|0);
 var $410=HEAP32[(($409)>>2)];
 switch(($410|0)){case 7:{ label=104;break;}case 6:{ label=108;break;}case 9:{ label=112;break;}case 8:{ label=116;break;}case 11:{ label=120;break;}case 10:{ label=124;break;}case 19:{ label=128;break;}case 18:{ label=132;break;}case 17:case 21:{ label=136;break;}case 20:{ label=140;break;}case 25:case 23:{ label=144;break;}case 24:{ label=147;break;}case 111:{ label=148;break;}case 110:{ label=151;break;}case 29:{ label=90;break;}case 31:{ label=96;break;}default:{label=159;break;}}break;
 case 90: 
 var $412=$list_ptr;
 var $413=(($412+8)|0);
 $ochr_ptr=$413;
 label=91;break;
 case 91: 
 var $415=$chr;
 var $416=$ochr_ptr;
 var $417=HEAP32[(($416)>>2)];
 var $418=($415|0)==($417|0);
 if($418){label=92;break;}else{label=93;break;}
 case 92: 
 $1=0;
 label=165;break;
 case 93: 
 var $421=$ochr_ptr;
 var $422=(($421+4)|0);
 $ochr_ptr=$422;
 label=94;break;
 case 94: 
 var $424=$ochr_ptr;
 var $425=HEAP32[(($424)>>2)];
 var $426=($425|0)!=-1;
 if($426){label=91;break;}else{label=95;break;}
 case 95: 
 label=160;break;
 case 96: 
 var $429=$list_ptr;
 var $430=(($429+8)|0);
 $ochr_ptr=$430;
 label=97;break;
 case 97: 
 var $432=$chr;
 var $433=$ochr_ptr;
 var $434=HEAP32[(($433)>>2)];
 var $435=($432|0)==($434|0);
 if($435){label=98;break;}else{label=99;break;}
 case 98: 
 label=101;break;
 case 99: 
 var $438=$ochr_ptr;
 var $439=(($438+4)|0);
 $ochr_ptr=$439;
 label=100;break;
 case 100: 
 var $441=$ochr_ptr;
 var $442=HEAP32[(($441)>>2)];
 var $443=($442|0)!=-1;
 if($443){label=97;break;}else{label=101;break;}
 case 101: 
 var $445=$ochr_ptr;
 var $446=HEAP32[(($445)>>2)];
 var $447=($446|0)==-1;
 if($447){label=102;break;}else{label=103;break;}
 case 102: 
 $1=0;
 label=165;break;
 case 103: 
 label=160;break;
 case 104: 
 var $451=$chr;
 var $452=($451>>>0)<256;
 if($452){label=105;break;}else{label=107;break;}
 case 105: 
 var $454=$chr;
 var $455=$4;
 var $456=(($455+12)|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=(($457+$454)|0);
 var $459=HEAP8[($458)];
 var $460=($459&255);
 var $461=$460&4;
 var $462=($461|0)!=0;
 if($462){label=106;break;}else{label=107;break;}
 case 106: 
 $1=0;
 label=165;break;
 case 107: 
 label=160;break;
 case 108: 
 var $466=$chr;
 var $467=($466>>>0)>255;
 if($467){label=110;break;}else{label=109;break;}
 case 109: 
 var $469=$chr;
 var $470=$4;
 var $471=(($470+12)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(($472+$469)|0);
 var $474=HEAP8[($473)];
 var $475=($474&255);
 var $476=$475&4;
 var $477=($476|0)==0;
 if($477){label=110;break;}else{label=111;break;}
 case 110: 
 $1=0;
 label=165;break;
 case 111: 
 label=160;break;
 case 112: 
 var $481=$chr;
 var $482=($481>>>0)<256;
 if($482){label=113;break;}else{label=115;break;}
 case 113: 
 var $484=$chr;
 var $485=$4;
 var $486=(($485+12)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=(($487+$484)|0);
 var $489=HEAP8[($488)];
 var $490=($489&255);
 var $491=$490&1;
 var $492=($491|0)!=0;
 if($492){label=114;break;}else{label=115;break;}
 case 114: 
 $1=0;
 label=165;break;
 case 115: 
 label=160;break;
 case 116: 
 var $496=$chr;
 var $497=($496>>>0)>255;
 if($497){label=118;break;}else{label=117;break;}
 case 117: 
 var $499=$chr;
 var $500=$4;
 var $501=(($500+12)|0);
 var $502=HEAP32[(($501)>>2)];
 var $503=(($502+$499)|0);
 var $504=HEAP8[($503)];
 var $505=($504&255);
 var $506=$505&1;
 var $507=($506|0)==0;
 if($507){label=118;break;}else{label=119;break;}
 case 118: 
 $1=0;
 label=165;break;
 case 119: 
 label=160;break;
 case 120: 
 var $511=$chr;
 var $512=($511>>>0)<255;
 if($512){label=121;break;}else{label=123;break;}
 case 121: 
 var $514=$chr;
 var $515=$4;
 var $516=(($515+12)|0);
 var $517=HEAP32[(($516)>>2)];
 var $518=(($517+$514)|0);
 var $519=HEAP8[($518)];
 var $520=($519&255);
 var $521=$520&16;
 var $522=($521|0)!=0;
 if($522){label=122;break;}else{label=123;break;}
 case 122: 
 $1=0;
 label=165;break;
 case 123: 
 label=160;break;
 case 124: 
 var $526=$chr;
 var $527=($526>>>0)>255;
 if($527){label=126;break;}else{label=125;break;}
 case 125: 
 var $529=$chr;
 var $530=$4;
 var $531=(($530+12)|0);
 var $532=HEAP32[(($531)>>2)];
 var $533=(($532+$529)|0);
 var $534=HEAP8[($533)];
 var $535=($534&255);
 var $536=$535&16;
 var $537=($536|0)==0;
 if($537){label=126;break;}else{label=127;break;}
 case 126: 
 $1=0;
 label=165;break;
 case 127: 
 label=160;break;
 case 128: 
 var $541=$chr;
 if(($541|0)==9|($541|0)==32|($541|0)==160|($541|0)==5760|($541|0)==6158|($541|0)==8192|($541|0)==8193|($541|0)==8194|($541|0)==8195|($541|0)==8196|($541|0)==8197|($541|0)==8198|($541|0)==8199|($541|0)==8200|($541|0)==8201|($541|0)==8202|($541|0)==8239|($541|0)==8287|($541|0)==12288){ label=129;break;}else{label=130;break;}
 case 129: 
 $1=0;
 label=165;break;
 case 130: 
 label=131;break;
 case 131: 
 label=160;break;
 case 132: 
 var $546=$chr;
 if(($546|0)==9|($546|0)==32|($546|0)==160|($546|0)==5760|($546|0)==6158|($546|0)==8192|($546|0)==8193|($546|0)==8194|($546|0)==8195|($546|0)==8196|($546|0)==8197|($546|0)==8198|($546|0)==8199|($546|0)==8200|($546|0)==8201|($546|0)==8202|($546|0)==8239|($546|0)==8287|($546|0)==12288){ label=133;break;}else{label=134;break;}
 case 133: 
 label=135;break;
 case 134: 
 $1=0;
 label=165;break;
 case 135: 
 label=160;break;
 case 136: 
 var $551=$chr;
 if(($551|0)==10|($551|0)==11|($551|0)==12|($551|0)==13|($551|0)==133|($551|0)==8232|($551|0)==8233){ label=137;break;}else{label=138;break;}
 case 137: 
 $1=0;
 label=165;break;
 case 138: 
 label=139;break;
 case 139: 
 label=160;break;
 case 140: 
 var $556=$chr;
 if(($556|0)==10|($556|0)==11|($556|0)==12|($556|0)==13|($556|0)==133|($556|0)==8232|($556|0)==8233){ label=141;break;}else{label=142;break;}
 case 141: 
 label=143;break;
 case 142: 
 $1=0;
 label=165;break;
 case 143: 
 label=160;break;
 case 144: 
 var $561=$chr;
 if(($561|0)==13|($561|0)==10|($561|0)==11|($561|0)==12|($561|0)==133|($561|0)==8232|($561|0)==8233){ label=145;break;}else{label=146;break;}
 case 145: 
 $1=0;
 label=165;break;
 case 146: 
 label=160;break;
 case 147: 
 label=160;break;
 case 148: 
 var $566=$chr;
 var $567=($566>>>0)>255;
 if($567){label=149;break;}else{label=150;break;}
 case 149: 
 $1=0;
 label=165;break;
 case 150: 
 label=151;break;
 case 151: 
 var $571=$chr;
 var $572=($571>>>0)>255;
 if($572){label=152;break;}else{label=153;break;}
 case 152: 
 label=160;break;
 case 153: 
 var $575=$list_ptr;
 var $576=(($list)|0);
 var $577=($575|0)==($576|0);
 if($577){label=154;break;}else{label=155;break;}
 case 154: 
 var $579=$2;
 var $583=$579;label=156;break;
 case 155: 
 var $581=$6;
 var $583=$581;label=156;break;
 case 156: 
 var $583;
 var $584=$list_ptr;
 var $585=(($584+8)|0);
 var $586=HEAP32[(($585)>>2)];
 var $587=(((-$586))|0);
 var $588=(($583+$587)|0);
 $class_bitset=$588;
 var $589=$chr;
 var $590=$589>>>3;
 var $591=$class_bitset;
 var $592=(($591+$590)|0);
 var $593=HEAP8[($592)];
 var $594=($593&255);
 var $595=$chr;
 var $596=$595&7;
 var $597=1<<$596;
 var $598=$594&$597;
 var $599=($598|0)!=0;
 if($599){label=157;break;}else{label=158;break;}
 case 157: 
 $1=0;
 label=165;break;
 case 158: 
 label=160;break;
 case 159: 
 $1=0;
 label=165;break;
 case 160: 
 var $604=$chr_ptr;
 var $605=(($604+4)|0);
 $chr_ptr=$605;
 label=161;break;
 case 161: 
 var $607=$chr_ptr;
 var $608=HEAP32[(($607)>>2)];
 var $609=($608|0)!=-1;
 if($609){label=89;break;}else{label=162;break;}
 case 162: 
 var $611=(($list+4)|0);
 var $612=HEAP32[(($611)>>2)];
 var $613=($612|0)==0;
 if($613){label=163;break;}else{label=164;break;}
 case 163: 
 $1=1;
 label=165;break;
 case 164: 
 label=2;break;
 case 165: 
 var $617=$1;
 STACKTOP=sp;return $617;
  default: assert(0, "bad label: " + label);
 }
}
function _compile_branch($optionsptr,$codeptr,$ptrptr,$errorcodeptr,$firstcharptr,$firstcharflagsptr,$reqcharptr,$reqcharflagsptr,$bcptr,$cond_depth,$cd,$lengthptr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $10;
 var $11;
 var $12;
 var $13;
 var $repeat_type;
 var $op_type;
 var $repeat_min=sp;
 var $repeat_max=(sp)+(8);
 var $bravalue;
 var $greedy_default;
 var $greedy_non_default;
 var $firstchar;
 var $reqchar;
 var $firstcharflags;
 var $reqcharflags;
 var $zeroreqchar;
 var $zerofirstchar;
 var $zeroreqcharflags;
 var $zerofirstcharflags;
 var $req_caseopt;
 var $reqvary;
 var $tempreqvary;
 var $options;
 var $after_manual_callout;
 var $length_prevgroup=(sp)+(16);
 var $c;
 var $escape;
 var $code;
 var $last_code;
 var $orig_code;
 var $tempcode=(sp)+(24);
 var $inescq;
 var $groupsetfirstchar;
 var $ptr=(sp)+(32);
 var $tempptr=(sp)+(40);
 var $nestptr;
 var $previous;
 var $previous_callout;
 var $save_hwm;
 var $classbits=(sp)+(48);
 var $utf;
 var $class_uchardata=(sp)+(80);
 var $negate_class;
 var $should_flip_negation;
 var $possessive_quantifier;
 var $is_quantifier;
 var $is_recurse;
 var $reset_bracount;
 var $class_has_8bitchar;
 var $class_one_char;
 var $newoptions;
 var $recno;
 var $refsign;
 var $skipbytes;
 var $subreqchar=(sp)+(88);
 var $subfirstchar=(sp)+(96);
 var $subreqcharflags=(sp)+(104);
 var $subfirstcharflags=(sp)+(112);
 var $terminator;
 var $mclength;
 var $tempbracount;
 var $ec=(sp)+(120);
 var $mcbuffer=(sp)+(128);
 var $oldptr;
 var $local_negate;
 var $posix_class;
 var $taboffset;
 var $tabopt;
 var $cbits;
 var $pbits=(sp)+(136);
 var $cbits1;
 var $d=(sp)+(168);
 var $descape;
 var $p;
 var $offset;
 var $oldcode;
 var $prop_type;
 var $prop_value;
 var $i;
 var $len;
 var $bralink;
 var $brazeroptr;
 var $offset2;
 var $delta;
 var $hc;
 var $this_hwm;
 var $save_offset;
 var $this_offset;
 var $delta3;
 var $hc4;
 var $this_hwm5;
 var $offset6;
 var $save_offset7;
 var $this_offset8;
 var $oldlinkoffset;
 var $offset9;
 var $bra;
 var $ketcode;
 var $bracode;
 var $scode;
 var $nlen;
 var $len10;
 var $repcode;
 var $i11;
 var $namelen;
 var $arglen;
 var $vn;
 var $name;
 var $arg;
 var $setverb;
 var $oc;
 var $i12;
 var $set=(sp)+(176);
 var $unset=(sp)+(184);
 var $namelen13;
 var $optset;
 var $name14;
 var $slot;
 var $offset15;
 var $count;
 var $n;
 var $ng;
 var $number;
 var $newsize;
 var $newspace;
 var $ng16;
 var $count17;
 var $index;
 var $cslot;
 var $oc18;
 var $called;
 var $tc;
 var $condcount;
 var $p19;
 var $cf;
 var $oc20;
 $2=$optionsptr;
 $3=$codeptr;
 $4=$ptrptr;
 $5=$errorcodeptr;
 $6=$firstcharptr;
 $7=$firstcharflagsptr;
 $8=$reqcharptr;
 $9=$reqcharflagsptr;
 $10=$bcptr;
 $11=$cond_depth;
 $12=$cd;
 $13=$lengthptr;
 HEAP32[(($repeat_min)>>2)]=0;
 HEAP32[(($repeat_max)>>2)]=0;
 $bravalue=0;
 var $14=$2;
 var $15=HEAP32[(($14)>>2)];
 $options=$15;
 $after_manual_callout=0;
 HEAP32[(($length_prevgroup)>>2)]=0;
 var $16=$3;
 var $17=HEAP32[(($16)>>2)];
 $code=$17;
 var $18=$code;
 $last_code=$18;
 var $19=$code;
 $orig_code=$19;
 $inescq=0;
 $groupsetfirstchar=0;
 var $20=$4;
 var $21=HEAP32[(($20)>>2)];
 HEAP32[(($ptr)>>2)]=$21;
 $nestptr=0;
 $previous=0;
 $previous_callout=0;
 $save_hwm=0;
 $utf=0;
 var $22=$options;
 var $23=$22&512;
 var $24=($23|0)!=0;
 var $25=($24&1);
 $greedy_default=$25;
 var $26=$greedy_default;
 var $27=$26^1;
 $greedy_non_default=$27;
 $zeroreqchar=0;
 $zerofirstchar=0;
 $reqchar=0;
 $firstchar=0;
 $zeroreqcharflags=-2;
 $zerofirstcharflags=-2;
 $reqcharflags=-2;
 $firstcharflags=-2;
 var $28=$options;
 var $29=$28&1;
 var $30=($29|0)!=0;
 var $31=($30?1:0);
 $req_caseopt=$31;
 label=2;break;
 case 2: 
 var $33=HEAP32[(($ptr)>>2)];
 var $34=HEAP8[($33)];
 var $35=($34&255);
 $c=$35;
 var $36=$c;
 var $37=($36|0)==0;
 if($37){label=3;break;}else{label=5;break;}
 case 3: 
 var $39=$nestptr;
 var $40=($39|0)!=0;
 if($40){label=4;break;}else{label=5;break;}
 case 4: 
 var $42=$nestptr;
 HEAP32[(($ptr)>>2)]=$42;
 $nestptr=0;
 var $43=HEAP32[(($ptr)>>2)];
 var $44=HEAP8[($43)];
 var $45=($44&255);
 $c=$45;
 label=5;break;
 case 5: 
 var $47=$13;
 var $48=($47|0)!=0;
 if($48){label=6;break;}else{label=18;break;}
 case 6: 
 var $50=$code;
 var $51=$12;
 var $52=(($51+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=$12;
 var $55=(($54+60)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($53+$56)|0);
 var $58=((($57)-(100))|0);
 var $59=($50>>>0)>($58>>>0);
 if($59){label=7;break;}else{label=8;break;}
 case 7: 
 var $61=$5;
 HEAP32[(($61)>>2)]=52;
 label=1120;break;
 case 8: 
 var $63=$code;
 var $64=$last_code;
 var $65=($63>>>0)<($64>>>0);
 if($65){label=9;break;}else{label=10;break;}
 case 9: 
 var $67=$last_code;
 $code=$67;
 label=10;break;
 case 10: 
 var $69=$13;
 var $70=HEAP32[(($69)>>2)];
 var $71=(((2147483627)-($70))|0);
 var $72=$code;
 var $73=$last_code;
 var $74=$72;
 var $75=$73;
 var $76=((($74)-($75))|0);
 var $77=($71|0)<($76|0);
 if($77){label=11;break;}else{label=12;break;}
 case 11: 
 var $79=$5;
 HEAP32[(($79)>>2)]=20;
 label=1120;break;
 case 12: 
 var $81=$code;
 var $82=$last_code;
 var $83=$81;
 var $84=$82;
 var $85=((($83)-($84))|0);
 var $86=$13;
 var $87=HEAP32[(($86)>>2)];
 var $88=((($87)+($85))|0);
 HEAP32[(($86)>>2)]=$88;
 var $89=$previous;
 var $90=($89|0)!=0;
 if($90){label=13;break;}else{label=16;break;}
 case 13: 
 var $92=$previous;
 var $93=$orig_code;
 var $94=($92>>>0)>($93>>>0);
 if($94){label=14;break;}else{label=15;break;}
 case 14: 
 var $96=$orig_code;
 var $97=$previous;
 var $98=$code;
 var $99=$previous;
 var $100=$98;
 var $101=$99;
 var $102=((($100)-($101))|0);
 _memmove($96,$97,$102,1,0);
 var $103=$previous;
 var $104=$orig_code;
 var $105=$103;
 var $106=$104;
 var $107=((($105)-($106))|0);
 var $108=$code;
 var $109=(((-$107))|0);
 var $110=(($108+$109)|0);
 $code=$110;
 var $111=$orig_code;
 $previous=$111;
 label=15;break;
 case 15: 
 label=17;break;
 case 16: 
 var $114=$orig_code;
 $code=$114;
 label=17;break;
 case 17: 
 var $116=$code;
 $last_code=$116;
 label=21;break;
 case 18: 
 var $118=$12;
 var $119=(($118+32)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=$12;
 var $122=(($121+16)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=$12;
 var $125=(($124+60)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($123+$126)|0);
 var $128=((($127)-(100))|0);
 var $129=($120>>>0)>($128>>>0);
 if($129){label=19;break;}else{label=20;break;}
 case 19: 
 var $131=$5;
 HEAP32[(($131)>>2)]=52;
 label=1120;break;
 case 20: 
 label=21;break;
 case 21: 
 var $134=$inescq;
 var $135=($134|0)!=0;
 if($135){label=22;break;}else{label=33;break;}
 case 22: 
 var $137=$c;
 var $138=($137|0)!=0;
 if($138){label=23;break;}else{label=33;break;}
 case 23: 
 var $140=$c;
 var $141=($140|0)==92;
 if($141){label=24;break;}else{label=26;break;}
 case 24: 
 var $143=HEAP32[(($ptr)>>2)];
 var $144=(($143+1)|0);
 var $145=HEAP8[($144)];
 var $146=($145&255);
 var $147=($146|0)==69;
 if($147){label=25;break;}else{label=26;break;}
 case 25: 
 $inescq=0;
 var $149=HEAP32[(($ptr)>>2)];
 var $150=(($149+1)|0);
 HEAP32[(($ptr)>>2)]=$150;
 label=1119;break;
 case 26: 
 var $152=$previous_callout;
 var $153=($152|0)!=0;
 if($153){label=27;break;}else{label=30;break;}
 case 27: 
 var $155=$13;
 var $156=($155|0)==0;
 if($156){label=28;break;}else{label=29;break;}
 case 28: 
 var $158=$previous_callout;
 var $159=HEAP32[(($ptr)>>2)];
 var $160=$12;
 _complete_callout($158,$159,$160);
 label=29;break;
 case 29: 
 $previous_callout=0;
 label=30;break;
 case 30: 
 var $163=$options;
 var $164=$163&16384;
 var $165=($164|0)!=0;
 if($165){label=31;break;}else{label=32;break;}
 case 31: 
 var $167=$code;
 $previous_callout=$167;
 var $168=$code;
 var $169=HEAP32[(($ptr)>>2)];
 var $170=$12;
 var $171=_auto_callout($168,$169,$170);
 $code=$171;
 label=32;break;
 case 32: 
 label=1097;break;
 case 33: 
 var $174=$options;
 var $175=$174&8;
 var $176=($175|0)!=0;
 if($176){label=34;break;}else{label=53;break;}
 case 34: 
 label=35;break;
 case 35: 
 label=36;break;
 case 36: 
 var $180=$c;
 var $181=$12;
 var $182=(($181+12)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+$180)|0);
 var $185=HEAP8[($184)];
 var $186=($185&255);
 var $187=$186&1;
 var $188=($187|0)!=0;
 if($188){label=37;break;}else{label=38;break;}
 case 37: 
 var $190=HEAP32[(($ptr)>>2)];
 var $191=(($190+1)|0);
 HEAP32[(($ptr)>>2)]=$191;
 var $192=HEAP8[($191)];
 var $193=($192&255);
 $c=$193;
 label=36;break;
 case 38: 
 var $195=$c;
 var $196=($195|0)!=35;
 if($196){label=39;break;}else{label=40;break;}
 case 39: 
 label=52;break;
 case 40: 
 var $199=HEAP32[(($ptr)>>2)];
 var $200=(($199+1)|0);
 HEAP32[(($ptr)>>2)]=$200;
 label=41;break;
 case 41: 
 var $202=HEAP32[(($ptr)>>2)];
 var $203=HEAP8[($202)];
 var $204=($203&255);
 var $205=($204|0)!=0;
 if($205){label=42;break;}else{label=51;break;}
 case 42: 
 var $207=$12;
 var $208=(($207+124)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($209|0)!=0;
 if($210){label=43;break;}else{label=45;break;}
 case 43: 
 var $212=HEAP32[(($ptr)>>2)];
 var $213=$12;
 var $214=(($213+28)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=($212>>>0)<($215>>>0);
 if($216){label=44;break;}else{label=50;break;}
 case 44: 
 var $218=HEAP32[(($ptr)>>2)];
 var $219=$12;
 var $220=(($219+124)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=$12;
 var $223=(($222+28)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=$12;
 var $226=(($225+128)|0);
 var $227=$utf;
 var $228=__pcre_is_newline($218,$221,$224,$226,$227);
 var $229=($228|0)!=0;
 if($229){label=49;break;}else{label=50;break;}
 case 45: 
 var $231=HEAP32[(($ptr)>>2)];
 var $232=$12;
 var $233=(($232+28)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=$12;
 var $236=(($235+128)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(((-$237))|0);
 var $239=(($234+$238)|0);
 var $240=($231>>>0)<=($239>>>0);
 if($240){label=46;break;}else{label=50;break;}
 case 46: 
 var $242=HEAP32[(($ptr)>>2)];
 var $243=HEAP8[($242)];
 var $244=($243&255);
 var $245=$12;
 var $246=(($245+132)|0);
 var $247=(($246)|0);
 var $248=HEAP8[($247)];
 var $249=($248&255);
 var $250=($244|0)==($249|0);
 if($250){label=47;break;}else{label=50;break;}
 case 47: 
 var $252=$12;
 var $253=(($252+128)|0);
 var $254=HEAP32[(($253)>>2)];
 var $255=($254|0)==1;
 if($255){label=49;break;}else{label=48;break;}
 case 48: 
 var $257=HEAP32[(($ptr)>>2)];
 var $258=(($257+1)|0);
 var $259=HEAP8[($258)];
 var $260=($259&255);
 var $261=$12;
 var $262=(($261+132)|0);
 var $263=(($262+1)|0);
 var $264=HEAP8[($263)];
 var $265=($264&255);
 var $266=($260|0)==($265|0);
 if($266){label=49;break;}else{label=50;break;}
 case 49: 
 var $268=$12;
 var $269=(($268+128)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=HEAP32[(($ptr)>>2)];
 var $272=(($271+$270)|0);
 HEAP32[(($ptr)>>2)]=$272;
 label=51;break;
 case 50: 
 var $274=HEAP32[(($ptr)>>2)];
 var $275=(($274+1)|0);
 HEAP32[(($ptr)>>2)]=$275;
 label=41;break;
 case 51: 
 var $277=HEAP32[(($ptr)>>2)];
 var $278=HEAP8[($277)];
 var $279=($278&255);
 $c=$279;
 label=35;break;
 case 52: 
 label=53;break;
 case 53: 
 var $282=$c;
 var $283=($282|0)==42;
 if($283){var $301=1;label=59;break;}else{label=54;break;}
 case 54: 
 var $285=$c;
 var $286=($285|0)==43;
 if($286){var $301=1;label=59;break;}else{label=55;break;}
 case 55: 
 var $288=$c;
 var $289=($288|0)==63;
 if($289){var $301=1;label=59;break;}else{label=56;break;}
 case 56: 
 var $291=$c;
 var $292=($291|0)==123;
 if($292){label=57;break;}else{var $299=0;label=58;break;}
 case 57: 
 var $294=HEAP32[(($ptr)>>2)];
 var $295=(($294+1)|0);
 var $296=_is_counted_repeat($295);
 var $297=($296|0)!=0;
 var $299=$297;label=58;break;
 case 58: 
 var $299;
 var $301=$299;label=59;break;
 case 59: 
 var $301;
 var $302=($301&1);
 $is_quantifier=$302;
 var $303=$is_quantifier;
 var $304=($303|0)!=0;
 if($304){label=66;break;}else{label=60;break;}
 case 60: 
 var $306=$previous_callout;
 var $307=($306|0)!=0;
 if($307){label=61;break;}else{label=66;break;}
 case 61: 
 var $309=$nestptr;
 var $310=($309|0)==0;
 if($310){label=62;break;}else{label=66;break;}
 case 62: 
 var $312=$after_manual_callout;
 var $313=((($312)-(1))|0);
 $after_manual_callout=$313;
 var $314=($312|0)<=0;
 if($314){label=63;break;}else{label=66;break;}
 case 63: 
 var $316=$13;
 var $317=($316|0)==0;
 if($317){label=64;break;}else{label=65;break;}
 case 64: 
 var $319=$previous_callout;
 var $320=HEAP32[(($ptr)>>2)];
 var $321=$12;
 _complete_callout($319,$320,$321);
 label=65;break;
 case 65: 
 $previous_callout=0;
 label=66;break;
 case 66: 
 var $324=$options;
 var $325=$324&16384;
 var $326=($325|0)!=0;
 if($326){label=67;break;}else{label=70;break;}
 case 67: 
 var $328=$is_quantifier;
 var $329=($328|0)!=0;
 if($329){label=70;break;}else{label=68;break;}
 case 68: 
 var $331=$nestptr;
 var $332=($331|0)==0;
 if($332){label=69;break;}else{label=70;break;}
 case 69: 
 var $334=$code;
 $previous_callout=$334;
 var $335=$code;
 var $336=HEAP32[(($ptr)>>2)];
 var $337=$12;
 var $338=_auto_callout($335,$336,$337);
 $code=$338;
 label=70;break;
 case 70: 
 var $340=$c;
 switch(($340|0)){case 92:{ label=1020;break;}case 123:{ label=319;break;}case 42:{ label=324;break;}case 43:{ label=325;break;}case 63:{ label=326;break;}case 40:{ label=571;break;}case 0:case 124:case 41:{ label=71;break;}case 94:{ label=76;break;}case 36:{ label=82;break;}case 46:{ label=83;break;}case 93:{ label=86;break;}case 91:{ label=89;break;}default:{label=1096;break;}}break;
 case 71: 
 var $342=$firstchar;
 var $343=$6;
 HEAP32[(($343)>>2)]=$342;
 var $344=$firstcharflags;
 var $345=$7;
 HEAP32[(($345)>>2)]=$344;
 var $346=$reqchar;
 var $347=$8;
 HEAP32[(($347)>>2)]=$346;
 var $348=$reqcharflags;
 var $349=$9;
 HEAP32[(($349)>>2)]=$348;
 var $350=$code;
 var $351=$3;
 HEAP32[(($351)>>2)]=$350;
 var $352=HEAP32[(($ptr)>>2)];
 var $353=$4;
 HEAP32[(($353)>>2)]=$352;
 var $354=$13;
 var $355=($354|0)!=0;
 if($355){label=72;break;}else{label=75;break;}
 case 72: 
 var $357=$13;
 var $358=HEAP32[(($357)>>2)];
 var $359=(((2147483627)-($358))|0);
 var $360=$code;
 var $361=$last_code;
 var $362=$360;
 var $363=$361;
 var $364=((($362)-($363))|0);
 var $365=($359|0)<($364|0);
 if($365){label=73;break;}else{label=74;break;}
 case 73: 
 var $367=$5;
 HEAP32[(($367)>>2)]=20;
 label=1120;break;
 case 74: 
 var $369=$code;
 var $370=$last_code;
 var $371=$369;
 var $372=$370;
 var $373=((($371)-($372))|0);
 var $374=$13;
 var $375=HEAP32[(($374)>>2)];
 var $376=((($375)+($373))|0);
 HEAP32[(($374)>>2)]=$376;
 label=75;break;
 case 75: 
 $1=1;
 label=1121;break;
 case 76: 
 $previous=0;
 var $379=$options;
 var $380=$379&2;
 var $381=($380|0)!=0;
 if($381){label=77;break;}else{label=80;break;}
 case 77: 
 var $383=$firstcharflags;
 var $384=($383|0)==-2;
 if($384){label=78;break;}else{label=79;break;}
 case 78: 
 $firstcharflags=-1;
 label=79;break;
 case 79: 
 var $387=$code;
 var $388=(($387+1)|0);
 $code=$388;
 HEAP8[($387)]=28;
 label=81;break;
 case 80: 
 var $390=$code;
 var $391=(($390+1)|0);
 $code=$391;
 HEAP8[($390)]=27;
 label=81;break;
 case 81: 
 label=1118;break;
 case 82: 
 $previous=0;
 var $394=$options;
 var $395=$394&2;
 var $396=($395|0)!=0;
 var $397=($396?26:25);
 var $398=(($397)&255);
 var $399=$code;
 var $400=(($399+1)|0);
 $code=$400;
 HEAP8[($399)]=$398;
 label=1118;break;
 case 83: 
 var $402=$firstcharflags;
 var $403=($402|0)==-2;
 if($403){label=84;break;}else{label=85;break;}
 case 84: 
 $firstcharflags=-1;
 label=85;break;
 case 85: 
 var $406=$firstchar;
 $zerofirstchar=$406;
 var $407=$firstcharflags;
 $zerofirstcharflags=$407;
 var $408=$reqchar;
 $zeroreqchar=$408;
 var $409=$reqcharflags;
 $zeroreqcharflags=$409;
 var $410=$code;
 $previous=$410;
 var $411=$options;
 var $412=$411&4;
 var $413=($412|0)!=0;
 var $414=($413?13:12);
 var $415=(($414)&255);
 var $416=$code;
 var $417=(($416+1)|0);
 $code=$417;
 HEAP8[($416)]=$415;
 label=1118;break;
 case 86: 
 var $419=$12;
 var $420=(($419+96)|0);
 var $421=HEAP32[(($420)>>2)];
 var $422=$421&33554432;
 var $423=($422|0)!=0;
 if($423){label=87;break;}else{label=88;break;}
 case 87: 
 var $425=$5;
 HEAP32[(($425)>>2)]=64;
 label=1120;break;
 case 88: 
 label=1097;break;
 case 89: 
 var $428=HEAP32[(($ptr)>>2)];
 var $429=(($428+1)|0);
 var $430=_strncmp($429,5320,6);
 var $431=($430|0)==0;
 if($431){label=90;break;}else{label=91;break;}
 case 90: 
 var $433=HEAP32[(($ptr)>>2)];
 var $434=(($433+7)|0);
 $nestptr=$434;
 HEAP32[(($ptr)>>2)]=167;
 label=1119;break;
 case 91: 
 var $436=HEAP32[(($ptr)>>2)];
 var $437=(($436+1)|0);
 var $438=_strncmp($437,5312,6);
 var $439=($438|0)==0;
 if($439){label=92;break;}else{label=93;break;}
 case 92: 
 var $441=HEAP32[(($ptr)>>2)];
 var $442=(($441+7)|0);
 $nestptr=$442;
 HEAP32[(($ptr)>>2)]=183;
 label=1119;break;
 case 93: 
 var $444=$code;
 $previous=$444;
 var $445=HEAP32[(($ptr)>>2)];
 var $446=(($445+1)|0);
 var $447=HEAP8[($446)];
 var $448=($447&255);
 var $449=($448|0)==58;
 if($449){label=96;break;}else{label=94;break;}
 case 94: 
 var $451=HEAP32[(($ptr)>>2)];
 var $452=(($451+1)|0);
 var $453=HEAP8[($452)];
 var $454=($453&255);
 var $455=($454|0)==46;
 if($455){label=96;break;}else{label=95;break;}
 case 95: 
 var $457=HEAP32[(($ptr)>>2)];
 var $458=(($457+1)|0);
 var $459=HEAP8[($458)];
 var $460=($459&255);
 var $461=($460|0)==61;
 if($461){label=96;break;}else{label=98;break;}
 case 96: 
 var $463=HEAP32[(($ptr)>>2)];
 var $464=_check_posix_syntax($463,$tempptr);
 var $465=($464|0)!=0;
 if($465){label=97;break;}else{label=98;break;}
 case 97: 
 var $467=HEAP32[(($ptr)>>2)];
 var $468=(($467+1)|0);
 var $469=HEAP8[($468)];
 var $470=($469&255);
 var $471=($470|0)==58;
 var $472=($471?13:31);
 var $473=$5;
 HEAP32[(($473)>>2)]=$472;
 label=1120;break;
 case 98: 
 $negate_class=0;
 label=99;break;
 case 99: 
 var $476=HEAP32[(($ptr)>>2)];
 var $477=(($476+1)|0);
 HEAP32[(($ptr)>>2)]=$477;
 var $478=HEAP8[($477)];
 var $479=($478&255);
 $c=$479;
 var $480=$c;
 var $481=($480|0)==92;
 if($481){label=100;break;}else{label=107;break;}
 case 100: 
 var $483=HEAP32[(($ptr)>>2)];
 var $484=(($483+1)|0);
 var $485=HEAP8[($484)];
 var $486=($485&255);
 var $487=($486|0)==69;
 if($487){label=101;break;}else{label=102;break;}
 case 101: 
 var $489=HEAP32[(($ptr)>>2)];
 var $490=(($489+1)|0);
 HEAP32[(($ptr)>>2)]=$490;
 label=106;break;
 case 102: 
 var $492=HEAP32[(($ptr)>>2)];
 var $493=(($492+1)|0);
 var $494=_strncmp($493,5304,3);
 var $495=($494|0)==0;
 if($495){label=103;break;}else{label=104;break;}
 case 103: 
 var $497=HEAP32[(($ptr)>>2)];
 var $498=(($497+3)|0);
 HEAP32[(($ptr)>>2)]=$498;
 label=105;break;
 case 104: 
 label=113;break;
 case 105: 
 label=106;break;
 case 106: 
 label=112;break;
 case 107: 
 var $503=$negate_class;
 var $504=($503|0)!=0;
 if($504){label=110;break;}else{label=108;break;}
 case 108: 
 var $506=$c;
 var $507=($506|0)==94;
 if($507){label=109;break;}else{label=110;break;}
 case 109: 
 $negate_class=1;
 label=111;break;
 case 110: 
 label=113;break;
 case 111: 
 label=112;break;
 case 112: 
 label=99;break;
 case 113: 
 var $513=$c;
 var $514=($513|0)==93;
 if($514){label=114;break;}else{label=118;break;}
 case 114: 
 var $516=$12;
 var $517=(($516+96)|0);
 var $518=HEAP32[(($517)>>2)];
 var $519=$518&33554432;
 var $520=($519|0)!=0;
 if($520){label=115;break;}else{label=118;break;}
 case 115: 
 var $522=$negate_class;
 var $523=($522|0)!=0;
 var $524=($523?13:157);
 var $525=(($524)&255);
 var $526=$code;
 var $527=(($526+1)|0);
 $code=$527;
 HEAP8[($526)]=$525;
 var $528=$firstcharflags;
 var $529=($528|0)==-2;
 if($529){label=116;break;}else{label=117;break;}
 case 116: 
 $firstcharflags=-1;
 label=117;break;
 case 117: 
 var $532=$firstchar;
 $zerofirstchar=$532;
 var $533=$firstcharflags;
 $zerofirstcharflags=$533;
 label=1118;break;
 case 118: 
 $should_flip_negation=0;
 $class_has_8bitchar=0;
 $class_one_char=0;
 var $535=$classbits;
 _memset($535, 0, 32)|0;
 var $536=$c;
 var $537=($536|0)!=0;
 if($537){label=119;break;}else{label=305;break;}
 case 119: 
 label=120;break;
 case 120: 
 var $540=$inescq;
 var $541=($540|0)!=0;
 if($541){label=121;break;}else{label=125;break;}
 case 121: 
 var $543=$c;
 var $544=($543|0)==92;
 if($544){label=122;break;}else{label=124;break;}
 case 122: 
 var $546=HEAP32[(($ptr)>>2)];
 var $547=(($546+1)|0);
 var $548=HEAP8[($547)];
 var $549=($548&255);
 var $550=($549|0)==69;
 if($550){label=123;break;}else{label=124;break;}
 case 123: 
 $inescq=0;
 var $552=HEAP32[(($ptr)>>2)];
 var $553=(($552+1)|0);
 HEAP32[(($ptr)>>2)]=$553;
 label=297;break;
 case 124: 
 label=233;break;
 case 125: 
 var $556=$c;
 var $557=($556|0)==91;
 if($557){label=126;break;}else{label=171;break;}
 case 126: 
 var $559=HEAP32[(($ptr)>>2)];
 var $560=(($559+1)|0);
 var $561=HEAP8[($560)];
 var $562=($561&255);
 var $563=($562|0)==58;
 if($563){label=129;break;}else{label=127;break;}
 case 127: 
 var $565=HEAP32[(($ptr)>>2)];
 var $566=(($565+1)|0);
 var $567=HEAP8[($566)];
 var $568=($567&255);
 var $569=($568|0)==46;
 if($569){label=129;break;}else{label=128;break;}
 case 128: 
 var $571=HEAP32[(($ptr)>>2)];
 var $572=(($571+1)|0);
 var $573=HEAP8[($572)];
 var $574=($573&255);
 var $575=($574|0)==61;
 if($575){label=129;break;}else{label=171;break;}
 case 129: 
 var $577=HEAP32[(($ptr)>>2)];
 var $578=_check_posix_syntax($577,$tempptr);
 var $579=($578|0)!=0;
 if($579){label=130;break;}else{label=171;break;}
 case 130: 
 $local_negate=0;
 var $581=$12;
 var $582=(($581+8)|0);
 var $583=HEAP32[(($582)>>2)];
 $cbits=$583;
 var $584=HEAP32[(($ptr)>>2)];
 var $585=(($584+1)|0);
 var $586=HEAP8[($585)];
 var $587=($586&255);
 var $588=($587|0)!=58;
 if($588){label=131;break;}else{label=132;break;}
 case 131: 
 var $590=$5;
 HEAP32[(($590)>>2)]=31;
 label=1120;break;
 case 132: 
 var $592=HEAP32[(($ptr)>>2)];
 var $593=(($592+2)|0);
 HEAP32[(($ptr)>>2)]=$593;
 var $594=HEAP32[(($ptr)>>2)];
 var $595=HEAP8[($594)];
 var $596=($595&255);
 var $597=($596|0)==94;
 if($597){label=133;break;}else{label=134;break;}
 case 133: 
 $local_negate=1;
 $should_flip_negation=1;
 var $599=HEAP32[(($ptr)>>2)];
 var $600=(($599+1)|0);
 HEAP32[(($ptr)>>2)]=$600;
 label=134;break;
 case 134: 
 var $602=HEAP32[(($ptr)>>2)];
 var $603=HEAP32[(($tempptr)>>2)];
 var $604=HEAP32[(($ptr)>>2)];
 var $605=$603;
 var $606=$604;
 var $607=((($605)-($606))|0);
 var $608=_check_posix_name($602,$607);
 $posix_class=$608;
 var $609=$posix_class;
 var $610=($609|0)<0;
 if($610){label=135;break;}else{label=136;break;}
 case 135: 
 var $612=$5;
 HEAP32[(($612)>>2)]=30;
 label=1120;break;
 case 136: 
 var $614=$options;
 var $615=$614&1;
 var $616=($615|0)!=0;
 if($616){label=137;break;}else{label=139;break;}
 case 137: 
 var $618=$posix_class;
 var $619=($618|0)<=2;
 if($619){label=138;break;}else{label=139;break;}
 case 138: 
 $posix_class=0;
 label=139;break;
 case 139: 
 var $622=$posix_class;
 var $623=((($622)*(3))&-1);
 $posix_class=$623;
 var $624=$pbits;
 var $625=$cbits;
 var $626=$posix_class;
 var $627=((336+($626<<2))|0);
 var $628=HEAP32[(($627)>>2)];
 var $629=(($625+$628)|0);
 assert(32 % 1 === 0);(_memcpy($624, $629, 32)|0);
 var $630=$posix_class;
 var $631=((($630)+(1))|0);
 var $632=((336+($631<<2))|0);
 var $633=HEAP32[(($632)>>2)];
 $taboffset=$633;
 var $634=$posix_class;
 var $635=((($634)+(2))|0);
 var $636=((336+($635<<2))|0);
 var $637=HEAP32[(($636)>>2)];
 $tabopt=$637;
 var $638=$taboffset;
 var $639=($638|0)>=0;
 if($639){label=140;break;}else{label=152;break;}
 case 140: 
 var $641=$tabopt;
 var $642=($641|0)>=0;
 if($642){label=141;break;}else{label=146;break;}
 case 141: 
 $c=0;
 label=142;break;
 case 142: 
 var $645=$c;
 var $646=($645>>>0)<32;
 if($646){label=143;break;}else{label=145;break;}
 case 143: 
 var $648=$c;
 var $649=$taboffset;
 var $650=((($648)+($649))|0);
 var $651=$cbits;
 var $652=(($651+$650)|0);
 var $653=HEAP8[($652)];
 var $654=($653&255);
 var $655=$c;
 var $656=(($pbits+$655)|0);
 var $657=HEAP8[($656)];
 var $658=($657&255);
 var $659=$658|$654;
 var $660=(($659)&255);
 HEAP8[($656)]=$660;
 label=144;break;
 case 144: 
 var $662=$c;
 var $663=((($662)+(1))|0);
 $c=$663;
 label=142;break;
 case 145: 
 label=151;break;
 case 146: 
 $c=0;
 label=147;break;
 case 147: 
 var $667=$c;
 var $668=($667>>>0)<32;
 if($668){label=148;break;}else{label=150;break;}
 case 148: 
 var $670=$c;
 var $671=$taboffset;
 var $672=((($670)+($671))|0);
 var $673=$cbits;
 var $674=(($673+$672)|0);
 var $675=HEAP8[($674)];
 var $676=($675&255);
 var $677=$676^-1;
 var $678=$c;
 var $679=(($pbits+$678)|0);
 var $680=HEAP8[($679)];
 var $681=($680&255);
 var $682=$681&$677;
 var $683=(($682)&255);
 HEAP8[($679)]=$683;
 label=149;break;
 case 149: 
 var $685=$c;
 var $686=((($685)+(1))|0);
 $c=$686;
 label=147;break;
 case 150: 
 label=151;break;
 case 151: 
 label=152;break;
 case 152: 
 var $690=$tabopt;
 var $691=($690|0)<0;
 if($691){label=153;break;}else{label=154;break;}
 case 153: 
 var $693=$tabopt;
 var $694=(((-$693))|0);
 $tabopt=$694;
 label=154;break;
 case 154: 
 var $696=$tabopt;
 var $697=($696|0)==1;
 if($697){label=155;break;}else{label=156;break;}
 case 155: 
 var $699=(($pbits+1)|0);
 var $700=HEAP8[($699)];
 var $701=($700&255);
 var $702=$701&-61;
 var $703=(($702)&255);
 HEAP8[($699)]=$703;
 label=159;break;
 case 156: 
 var $705=$tabopt;
 var $706=($705|0)==2;
 if($706){label=157;break;}else{label=158;break;}
 case 157: 
 var $708=(($pbits+11)|0);
 var $709=HEAP8[($708)];
 var $710=($709&255);
 var $711=$710&127;
 var $712=(($711)&255);
 HEAP8[($708)]=$712;
 label=158;break;
 case 158: 
 label=159;break;
 case 159: 
 var $715=$local_negate;
 var $716=($715|0)!=0;
 if($716){label=160;break;}else{label=165;break;}
 case 160: 
 $c=0;
 label=161;break;
 case 161: 
 var $719=$c;
 var $720=($719>>>0)<32;
 if($720){label=162;break;}else{label=164;break;}
 case 162: 
 var $722=$c;
 var $723=(($pbits+$722)|0);
 var $724=HEAP8[($723)];
 var $725=($724&255);
 var $726=$725^-1;
 var $727=$c;
 var $728=(($classbits+$727)|0);
 var $729=HEAP8[($728)];
 var $730=($729&255);
 var $731=$730|$726;
 var $732=(($731)&255);
 HEAP8[($728)]=$732;
 label=163;break;
 case 163: 
 var $734=$c;
 var $735=((($734)+(1))|0);
 $c=$735;
 label=161;break;
 case 164: 
 label=170;break;
 case 165: 
 $c=0;
 label=166;break;
 case 166: 
 var $739=$c;
 var $740=($739>>>0)<32;
 if($740){label=167;break;}else{label=169;break;}
 case 167: 
 var $742=$c;
 var $743=(($pbits+$742)|0);
 var $744=HEAP8[($743)];
 var $745=($744&255);
 var $746=$c;
 var $747=(($classbits+$746)|0);
 var $748=HEAP8[($747)];
 var $749=($748&255);
 var $750=$749|$745;
 var $751=(($750)&255);
 HEAP8[($747)]=$751;
 label=168;break;
 case 168: 
 var $753=$c;
 var $754=((($753)+(1))|0);
 $c=$754;
 label=166;break;
 case 169: 
 label=170;break;
 case 170: 
 var $757=HEAP32[(($tempptr)>>2)];
 var $758=(($757+1)|0);
 HEAP32[(($ptr)>>2)]=$758;
 $class_has_8bitchar=1;
 $class_one_char=2;
 label=297;break;
 case 171: 
 var $760=$c;
 var $761=($760|0)==92;
 if($761){label=172;break;}else{label=232;break;}
 case 172: 
 var $763=$5;
 var $764=$12;
 var $765=(($764+64)|0);
 var $766=HEAP32[(($765)>>2)];
 var $767=$options;
 var $768=_check_escape($ptr,$ec,$763,$766,$767,1);
 $escape=$768;
 var $769=$5;
 var $770=HEAP32[(($769)>>2)];
 var $771=($770|0)!=0;
 if($771){label=173;break;}else{label=174;break;}
 case 173: 
 label=1120;break;
 case 174: 
 var $774=$escape;
 var $775=($774|0)==0;
 if($775){label=175;break;}else{label=176;break;}
 case 175: 
 var $777=HEAP32[(($ec)>>2)];
 $c=$777;
 label=231;break;
 case 176: 
 var $779=$escape;
 var $780=($779|0)==5;
 if($780){label=177;break;}else{label=178;break;}
 case 177: 
 $c=8;
 label=230;break;
 case 178: 
 var $783=$escape;
 var $784=($783|0)==12;
 if($784){label=179;break;}else{label=180;break;}
 case 179: 
 var $786=$5;
 HEAP32[(($786)>>2)]=71;
 label=1120;break;
 case 180: 
 var $788=$escape;
 var $789=($788|0)==26;
 if($789){label=181;break;}else{label=186;break;}
 case 181: 
 var $791=HEAP32[(($ptr)>>2)];
 var $792=(($791+1)|0);
 var $793=HEAP8[($792)];
 var $794=($793&255);
 var $795=($794|0)==92;
 if($795){label=182;break;}else{label=184;break;}
 case 182: 
 var $797=HEAP32[(($ptr)>>2)];
 var $798=(($797+2)|0);
 var $799=HEAP8[($798)];
 var $800=($799&255);
 var $801=($800|0)==69;
 if($801){label=183;break;}else{label=184;break;}
 case 183: 
 var $803=HEAP32[(($ptr)>>2)];
 var $804=(($803+2)|0);
 HEAP32[(($ptr)>>2)]=$804;
 label=185;break;
 case 184: 
 $inescq=1;
 label=185;break;
 case 185: 
 label=297;break;
 case 186: 
 var $808=$escape;
 var $809=($808|0)==25;
 if($809){label=187;break;}else{label=188;break;}
 case 187: 
 label=297;break;
 case 188: 
 var $812=$12;
 var $813=(($812+8)|0);
 var $814=HEAP32[(($813)>>2)];
 $cbits1=$814;
 var $815=$class_has_8bitchar;
 var $816=((($815)+(1))|0);
 $class_has_8bitchar=$816;
 var $817=$class_one_char;
 var $818=((($817)+(2))|0);
 $class_one_char=$818;
 var $819=$escape;
 switch(($819|0)){case 7:{ label=189;break;}case 6:{ label=194;break;}case 11:{ label=199;break;}case 10:{ label=204;break;}case 9:{ label=209;break;}case 8:{ label=214;break;}case 19:{ label=219;break;}case 18:{ label=220;break;}case 21:{ label=221;break;}case 20:{ label=222;break;}default:{label=223;break;}}break;
 case 189: 
 $c=0;
 label=190;break;
 case 190: 
 var $822=$c;
 var $823=($822>>>0)<32;
 if($823){label=191;break;}else{label=193;break;}
 case 191: 
 var $825=$c;
 var $826=((($825)+(64))|0);
 var $827=$cbits1;
 var $828=(($827+$826)|0);
 var $829=HEAP8[($828)];
 var $830=($829&255);
 var $831=$c;
 var $832=(($classbits+$831)|0);
 var $833=HEAP8[($832)];
 var $834=($833&255);
 var $835=$834|$830;
 var $836=(($835)&255);
 HEAP8[($832)]=$836;
 label=192;break;
 case 192: 
 var $838=$c;
 var $839=((($838)+(1))|0);
 $c=$839;
 label=190;break;
 case 193: 
 label=297;break;
 case 194: 
 $should_flip_negation=1;
 $c=0;
 label=195;break;
 case 195: 
 var $843=$c;
 var $844=($843>>>0)<32;
 if($844){label=196;break;}else{label=198;break;}
 case 196: 
 var $846=$c;
 var $847=((($846)+(64))|0);
 var $848=$cbits1;
 var $849=(($848+$847)|0);
 var $850=HEAP8[($849)];
 var $851=($850&255);
 var $852=$851^-1;
 var $853=$c;
 var $854=(($classbits+$853)|0);
 var $855=HEAP8[($854)];
 var $856=($855&255);
 var $857=$856|$852;
 var $858=(($857)&255);
 HEAP8[($854)]=$858;
 label=197;break;
 case 197: 
 var $860=$c;
 var $861=((($860)+(1))|0);
 $c=$861;
 label=195;break;
 case 198: 
 label=297;break;
 case 199: 
 $c=0;
 label=200;break;
 case 200: 
 var $865=$c;
 var $866=($865>>>0)<32;
 if($866){label=201;break;}else{label=203;break;}
 case 201: 
 var $868=$c;
 var $869=((($868)+(160))|0);
 var $870=$cbits1;
 var $871=(($870+$869)|0);
 var $872=HEAP8[($871)];
 var $873=($872&255);
 var $874=$c;
 var $875=(($classbits+$874)|0);
 var $876=HEAP8[($875)];
 var $877=($876&255);
 var $878=$877|$873;
 var $879=(($878)&255);
 HEAP8[($875)]=$879;
 label=202;break;
 case 202: 
 var $881=$c;
 var $882=((($881)+(1))|0);
 $c=$882;
 label=200;break;
 case 203: 
 label=297;break;
 case 204: 
 $should_flip_negation=1;
 $c=0;
 label=205;break;
 case 205: 
 var $886=$c;
 var $887=($886>>>0)<32;
 if($887){label=206;break;}else{label=208;break;}
 case 206: 
 var $889=$c;
 var $890=((($889)+(160))|0);
 var $891=$cbits1;
 var $892=(($891+$890)|0);
 var $893=HEAP8[($892)];
 var $894=($893&255);
 var $895=$894^-1;
 var $896=$c;
 var $897=(($classbits+$896)|0);
 var $898=HEAP8[($897)];
 var $899=($898&255);
 var $900=$899|$895;
 var $901=(($900)&255);
 HEAP8[($897)]=$901;
 label=207;break;
 case 207: 
 var $903=$c;
 var $904=((($903)+(1))|0);
 $c=$904;
 label=205;break;
 case 208: 
 label=297;break;
 case 209: 
 $c=0;
 label=210;break;
 case 210: 
 var $908=$c;
 var $909=($908>>>0)<32;
 if($909){label=211;break;}else{label=213;break;}
 case 211: 
 var $911=$c;
 var $912=(($911)|0);
 var $913=$cbits1;
 var $914=(($913+$912)|0);
 var $915=HEAP8[($914)];
 var $916=($915&255);
 var $917=$c;
 var $918=(($classbits+$917)|0);
 var $919=HEAP8[($918)];
 var $920=($919&255);
 var $921=$920|$916;
 var $922=(($921)&255);
 HEAP8[($918)]=$922;
 label=212;break;
 case 212: 
 var $924=$c;
 var $925=((($924)+(1))|0);
 $c=$925;
 label=210;break;
 case 213: 
 label=297;break;
 case 214: 
 $should_flip_negation=1;
 $c=0;
 label=215;break;
 case 215: 
 var $929=$c;
 var $930=($929>>>0)<32;
 if($930){label=216;break;}else{label=218;break;}
 case 216: 
 var $932=$c;
 var $933=(($932)|0);
 var $934=$cbits1;
 var $935=(($934+$933)|0);
 var $936=HEAP8[($935)];
 var $937=($936&255);
 var $938=$937^-1;
 var $939=$c;
 var $940=(($classbits+$939)|0);
 var $941=HEAP8[($940)];
 var $942=($941&255);
 var $943=$942|$938;
 var $944=(($943)&255);
 HEAP8[($940)]=$944;
 label=217;break;
 case 217: 
 var $946=$c;
 var $947=((($946)+(1))|0);
 $c=$947;
 label=215;break;
 case 218: 
 label=297;break;
 case 219: 
 var $950=(($classbits)|0);
 var $951=$options;
 var $952=$12;
 var $953=_add_list_to_class($950,$class_uchardata,$951,$952,5592,-1);
 label=297;break;
 case 220: 
 var $955=(($classbits)|0);
 var $956=$options;
 var $957=$12;
 var $958=_add_not_list_to_class($955,$class_uchardata,$956,$957,5592);
 label=297;break;
 case 221: 
 var $960=(($classbits)|0);
 var $961=$options;
 var $962=$12;
 var $963=_add_list_to_class($960,$class_uchardata,$961,$962,5560,-1);
 label=297;break;
 case 222: 
 var $965=(($classbits)|0);
 var $966=$options;
 var $967=$12;
 var $968=_add_not_list_to_class($965,$class_uchardata,$966,$967,5560);
 label=297;break;
 case 223: 
 var $970=$options;
 var $971=$970&64;
 var $972=($971|0)!=0;
 if($972){label=224;break;}else{label=225;break;}
 case 224: 
 var $974=$5;
 HEAP32[(($974)>>2)]=7;
 label=1120;break;
 case 225: 
 var $976=$class_has_8bitchar;
 var $977=((($976)-(1))|0);
 $class_has_8bitchar=$977;
 var $978=$class_one_char;
 var $979=((($978)-(2))|0);
 $class_one_char=$979;
 var $980=HEAP32[(($ptr)>>2)];
 var $981=HEAP8[($980)];
 var $982=($981&255);
 $c=$982;
 label=226;break;
 case 226: 
 label=227;break;
 case 227: 
 label=228;break;
 case 228: 
 label=229;break;
 case 229: 
 label=230;break;
 case 230: 
 label=231;break;
 case 231: 
 $escape=0;
 label=232;break;
 case 232: 
 label=233;break;
 case 233: 
 label=234;break;
 case 234: 
 var $992=HEAP32[(($ptr)>>2)];
 var $993=(($992+1)|0);
 var $994=HEAP8[($993)];
 var $995=($994&255);
 var $996=($995|0)==92;
 if($996){label=235;break;}else{var $1004=0;label=236;break;}
 case 235: 
 var $998=HEAP32[(($ptr)>>2)];
 var $999=(($998+2)|0);
 var $1000=HEAP8[($999)];
 var $1001=($1000&255);
 var $1002=($1001|0)==69;
 var $1004=$1002;label=236;break;
 case 236: 
 var $1004;
 if($1004){label=237;break;}else{label=238;break;}
 case 237: 
 $inescq=0;
 var $1006=HEAP32[(($ptr)>>2)];
 var $1007=(($1006+2)|0);
 HEAP32[(($ptr)>>2)]=$1007;
 label=234;break;
 case 238: 
 var $1009=HEAP32[(($ptr)>>2)];
 $oldptr=$1009;
 var $1010=$c;
 var $1011=($1010|0)==13;
 if($1011){label=240;break;}else{label=239;break;}
 case 239: 
 var $1013=$c;
 var $1014=($1013|0)==10;
 if($1014){label=240;break;}else{label=241;break;}
 case 240: 
 var $1016=$12;
 var $1017=(($1016+100)|0);
 var $1018=HEAP32[(($1017)>>2)];
 var $1019=$1018|2048;
 HEAP32[(($1017)>>2)]=$1019;
 label=241;break;
 case 241: 
 var $1021=$inescq;
 var $1022=($1021|0)!=0;
 if($1022){label=286;break;}else{label=242;break;}
 case 242: 
 var $1024=HEAP32[(($ptr)>>2)];
 var $1025=(($1024+1)|0);
 var $1026=HEAP8[($1025)];
 var $1027=($1026&255);
 var $1028=($1027|0)==45;
 if($1028){label=243;break;}else{label=286;break;}
 case 243: 
 var $1030=HEAP32[(($ptr)>>2)];
 var $1031=(($1030+2)|0);
 HEAP32[(($ptr)>>2)]=$1031;
 label=244;break;
 case 244: 
 var $1033=HEAP32[(($ptr)>>2)];
 var $1034=HEAP8[($1033)];
 var $1035=($1034&255);
 var $1036=($1035|0)==92;
 if($1036){label=245;break;}else{var $1044=0;label=246;break;}
 case 245: 
 var $1038=HEAP32[(($ptr)>>2)];
 var $1039=(($1038+1)|0);
 var $1040=HEAP8[($1039)];
 var $1041=($1040&255);
 var $1042=($1041|0)==69;
 var $1044=$1042;label=246;break;
 case 246: 
 var $1044;
 if($1044){label=247;break;}else{label=248;break;}
 case 247: 
 var $1046=HEAP32[(($ptr)>>2)];
 var $1047=(($1046+2)|0);
 HEAP32[(($ptr)>>2)]=$1047;
 label=244;break;
 case 248: 
 label=249;break;
 case 249: 
 var $1050=HEAP32[(($ptr)>>2)];
 var $1051=HEAP8[($1050)];
 var $1052=($1051&255);
 var $1053=($1052|0)==92;
 if($1053){label=250;break;}else{var $1061=0;label=251;break;}
 case 250: 
 var $1055=HEAP32[(($ptr)>>2)];
 var $1056=(($1055+1)|0);
 var $1057=HEAP8[($1056)];
 var $1058=($1057&255);
 var $1059=($1058|0)==81;
 var $1061=$1059;label=251;break;
 case 251: 
 var $1061;
 if($1061){label=252;break;}else{label=256;break;}
 case 252: 
 var $1063=HEAP32[(($ptr)>>2)];
 var $1064=(($1063+2)|0);
 HEAP32[(($ptr)>>2)]=$1064;
 var $1065=HEAP32[(($ptr)>>2)];
 var $1066=HEAP8[($1065)];
 var $1067=($1066&255);
 var $1068=($1067|0)==92;
 if($1068){label=253;break;}else{label=255;break;}
 case 253: 
 var $1070=HEAP32[(($ptr)>>2)];
 var $1071=(($1070+1)|0);
 var $1072=HEAP8[($1071)];
 var $1073=($1072&255);
 var $1074=($1073|0)==69;
 if($1074){label=254;break;}else{label=255;break;}
 case 254: 
 var $1076=HEAP32[(($ptr)>>2)];
 var $1077=(($1076+2)|0);
 HEAP32[(($ptr)>>2)]=$1077;
 label=249;break;
 case 255: 
 $inescq=1;
 label=256;break;
 case 256: 
 var $1080=HEAP32[(($ptr)>>2)];
 var $1081=HEAP8[($1080)];
 var $1082=($1081&255);
 var $1083=($1082|0)==0;
 if($1083){label=259;break;}else{label=257;break;}
 case 257: 
 var $1085=$inescq;
 var $1086=($1085|0)!=0;
 if($1086){label=260;break;}else{label=258;break;}
 case 258: 
 var $1088=HEAP32[(($ptr)>>2)];
 var $1089=HEAP8[($1088)];
 var $1090=($1089&255);
 var $1091=($1090|0)==93;
 if($1091){label=259;break;}else{label=260;break;}
 case 259: 
 var $1093=$oldptr;
 HEAP32[(($ptr)>>2)]=$1093;
 label=287;break;
 case 260: 
 var $1095=HEAP32[(($ptr)>>2)];
 var $1096=HEAP8[($1095)];
 var $1097=($1096&255);
 HEAP32[(($d)>>2)]=$1097;
 var $1098=$inescq;
 var $1099=($1098|0)!=0;
 if($1099){label=278;break;}else{label=261;break;}
 case 261: 
 var $1101=HEAP32[(($d)>>2)];
 var $1102=($1101|0)==92;
 if($1102){label=262;break;}else{label=270;break;}
 case 262: 
 var $1104=$5;
 var $1105=$12;
 var $1106=(($1105+64)|0);
 var $1107=HEAP32[(($1106)>>2)];
 var $1108=$options;
 var $1109=_check_escape($ptr,$d,$1104,$1107,$1108,1);
 $descape=$1109;
 var $1110=$5;
 var $1111=HEAP32[(($1110)>>2)];
 var $1112=($1111|0)!=0;
 if($1112){label=263;break;}else{label=264;break;}
 case 263: 
 label=1120;break;
 case 264: 
 var $1115=$descape;
 var $1116=($1115|0)!=0;
 if($1116){label=265;break;}else{label=269;break;}
 case 265: 
 var $1118=$descape;
 var $1119=($1118|0)==5;
 if($1119){label=266;break;}else{label=267;break;}
 case 266: 
 HEAP32[(($d)>>2)]=8;
 label=268;break;
 case 267: 
 var $1122=$5;
 HEAP32[(($1122)>>2)]=83;
 label=1120;break;
 case 268: 
 label=269;break;
 case 269: 
 label=277;break;
 case 270: 
 var $1126=HEAP32[(($d)>>2)];
 var $1127=($1126|0)==91;
 if($1127){label=271;break;}else{label=276;break;}
 case 271: 
 var $1129=HEAP32[(($ptr)>>2)];
 var $1130=(($1129+1)|0);
 var $1131=HEAP8[($1130)];
 var $1132=($1131&255);
 var $1133=($1132|0)==58;
 if($1133){label=274;break;}else{label=272;break;}
 case 272: 
 var $1135=HEAP32[(($ptr)>>2)];
 var $1136=(($1135+1)|0);
 var $1137=HEAP8[($1136)];
 var $1138=($1137&255);
 var $1139=($1138|0)==46;
 if($1139){label=274;break;}else{label=273;break;}
 case 273: 
 var $1141=HEAP32[(($ptr)>>2)];
 var $1142=(($1141+1)|0);
 var $1143=HEAP8[($1142)];
 var $1144=($1143&255);
 var $1145=($1144|0)==61;
 if($1145){label=274;break;}else{label=276;break;}
 case 274: 
 var $1147=HEAP32[(($ptr)>>2)];
 var $1148=_check_posix_syntax($1147,$tempptr);
 var $1149=($1148|0)!=0;
 if($1149){label=275;break;}else{label=276;break;}
 case 275: 
 var $1151=$5;
 HEAP32[(($1151)>>2)]=83;
 label=1120;break;
 case 276: 
 label=277;break;
 case 277: 
 label=278;break;
 case 278: 
 var $1155=HEAP32[(($d)>>2)];
 var $1156=$c;
 var $1157=($1155>>>0)<($1156>>>0);
 if($1157){label=279;break;}else{label=280;break;}
 case 279: 
 var $1159=$5;
 HEAP32[(($1159)>>2)]=8;
 label=1120;break;
 case 280: 
 var $1161=HEAP32[(($d)>>2)];
 var $1162=$c;
 var $1163=($1161|0)==($1162|0);
 if($1163){label=281;break;}else{label=282;break;}
 case 281: 
 label=287;break;
 case 282: 
 $class_one_char=2;
 var $1166=HEAP32[(($d)>>2)];
 var $1167=($1166|0)==13;
 if($1167){label=284;break;}else{label=283;break;}
 case 283: 
 var $1169=HEAP32[(($d)>>2)];
 var $1170=($1169|0)==10;
 if($1170){label=284;break;}else{label=285;break;}
 case 284: 
 var $1172=$12;
 var $1173=(($1172+100)|0);
 var $1174=HEAP32[(($1173)>>2)];
 var $1175=$1174|2048;
 HEAP32[(($1173)>>2)]=$1175;
 label=285;break;
 case 285: 
 var $1177=(($classbits)|0);
 var $1178=$options;
 var $1179=$12;
 var $1180=$c;
 var $1181=HEAP32[(($d)>>2)];
 var $1182=_add_to_class($1177,$class_uchardata,$1178,$1179,$1180,$1181);
 var $1183=$class_has_8bitchar;
 var $1184=((($1183)+($1182))|0);
 $class_has_8bitchar=$1184;
 label=297;break;
 case 286: 
 label=287;break;
 case 287: 
 var $1187=$class_one_char;
 var $1188=($1187|0)<2;
 if($1188){label=288;break;}else{label=289;break;}
 case 288: 
 var $1190=$class_one_char;
 var $1191=((($1190)+(1))|0);
 $class_one_char=$1191;
 label=289;break;
 case 289: 
 var $1193=$class_one_char;
 var $1194=($1193|0)==1;
 if($1194){label=290;break;}else{label=296;break;}
 case 290: 
 var $1196=HEAP32[(($ptr)>>2)];
 var $1197=(($1196+1)|0);
 var $1198=HEAP8[($1197)];
 var $1199=($1198&255);
 var $1200=($1199|0)==93;
 if($1200){label=291;break;}else{label=296;break;}
 case 291: 
 var $1202=HEAP32[(($ptr)>>2)];
 var $1203=(($1202+1)|0);
 HEAP32[(($ptr)>>2)]=$1203;
 var $1204=$reqchar;
 $zeroreqchar=$1204;
 var $1205=$reqcharflags;
 $zeroreqcharflags=$1205;
 var $1206=$negate_class;
 var $1207=($1206|0)!=0;
 if($1207){label=292;break;}else{label=295;break;}
 case 292: 
 var $1209=$firstcharflags;
 var $1210=($1209|0)==-2;
 if($1210){label=293;break;}else{label=294;break;}
 case 293: 
 $firstcharflags=-1;
 label=294;break;
 case 294: 
 var $1213=$firstchar;
 $zerofirstchar=$1213;
 var $1214=$firstcharflags;
 $zerofirstcharflags=$1214;
 var $1215=$options;
 var $1216=$1215&1;
 var $1217=($1216|0)!=0;
 var $1218=($1217?32:31);
 var $1219=(($1218)&255);
 var $1220=$code;
 var $1221=(($1220+1)|0);
 $code=$1221;
 HEAP8[($1220)]=$1219;
 var $1222=$c;
 var $1223=(($1222)&255);
 var $1224=$code;
 var $1225=(($1224+1)|0);
 $code=$1225;
 HEAP8[($1224)]=$1223;
 label=318;break;
 case 295: 
 var $1227=$c;
 var $1228=(($1227)&255);
 var $1229=(($mcbuffer)|0);
 HEAP8[($1229)]=$1228;
 $mclength=1;
 label=1098;break;
 case 296: 
 var $1231=(($classbits)|0);
 var $1232=$options;
 var $1233=$12;
 var $1234=$c;
 var $1235=$c;
 var $1236=_add_to_class($1231,$class_uchardata,$1232,$1233,$1234,$1235);
 var $1237=$class_has_8bitchar;
 var $1238=((($1237)+($1236))|0);
 $class_has_8bitchar=$1238;
 label=297;break;
 case 297: 
 var $1240=HEAP32[(($ptr)>>2)];
 var $1241=(($1240+1)|0);
 HEAP32[(($ptr)>>2)]=$1241;
 var $1242=HEAP8[($1241)];
 var $1243=($1242&255);
 $c=$1243;
 var $1244=($1243|0)!=0;
 if($1244){label=300;break;}else{label=298;break;}
 case 298: 
 var $1246=$nestptr;
 var $1247=($1246|0)!=0;
 if($1247){label=299;break;}else{var $1264=0;label=303;break;}
 case 299: 
 var $1249=$nestptr;
 HEAP32[(($ptr)>>2)]=$1249;
 $nestptr=0;
 var $1250=HEAP32[(($ptr)>>2)];
 var $1251=(($1250+1)|0);
 HEAP32[(($ptr)>>2)]=$1251;
 var $1252=HEAP8[($1251)];
 var $1253=($1252&255);
 $c=$1253;
 var $1254=($1253|0)!=0;
 if($1254){label=300;break;}else{var $1264=0;label=303;break;}
 case 300: 
 var $1256=$c;
 var $1257=($1256|0)!=93;
 if($1257){var $1262=1;label=302;break;}else{label=301;break;}
 case 301: 
 var $1259=$inescq;
 var $1260=($1259|0)!=0;
 var $1262=$1260;label=302;break;
 case 302: 
 var $1262;
 var $1264=$1262;label=303;break;
 case 303: 
 var $1264;
 if($1264){label=120;break;}else{label=304;break;}
 case 304: 
 label=305;break;
 case 305: 
 var $1267=$c;
 var $1268=($1267|0)==0;
 if($1268){label=306;break;}else{label=307;break;}
 case 306: 
 var $1270=$5;
 HEAP32[(($1270)>>2)]=6;
 label=1120;break;
 case 307: 
 var $1272=$firstcharflags;
 var $1273=($1272|0)==-2;
 if($1273){label=308;break;}else{label=309;break;}
 case 308: 
 $firstcharflags=-1;
 label=309;break;
 case 309: 
 var $1276=$firstchar;
 $zerofirstchar=$1276;
 var $1277=$firstcharflags;
 $zerofirstcharflags=$1277;
 var $1278=$reqchar;
 $zeroreqchar=$1278;
 var $1279=$reqcharflags;
 $zeroreqcharflags=$1279;
 var $1280=$negate_class;
 var $1281=$should_flip_negation;
 var $1282=($1280|0)==($1281|0);
 var $1283=($1282?110:111);
 var $1284=(($1283)&255);
 var $1285=$code;
 var $1286=(($1285+1)|0);
 $code=$1286;
 HEAP8[($1285)]=$1284;
 var $1287=$13;
 var $1288=($1287|0)==0;
 if($1288){label=310;break;}else{label=317;break;}
 case 310: 
 var $1290=$negate_class;
 var $1291=($1290|0)!=0;
 if($1291){label=311;break;}else{label=316;break;}
 case 311: 
 $c=0;
 label=312;break;
 case 312: 
 var $1294=$c;
 var $1295=($1294>>>0)<32;
 if($1295){label=313;break;}else{label=315;break;}
 case 313: 
 var $1297=$c;
 var $1298=(($classbits+$1297)|0);
 var $1299=HEAP8[($1298)];
 var $1300=($1299&255);
 var $1301=$1300^-1;
 var $1302=(($1301)&255);
 var $1303=$c;
 var $1304=(($classbits+$1303)|0);
 HEAP8[($1304)]=$1302;
 label=314;break;
 case 314: 
 var $1306=$c;
 var $1307=((($1306)+(1))|0);
 $c=$1307;
 label=312;break;
 case 315: 
 label=316;break;
 case 316: 
 var $1310=$code;
 var $1311=$classbits;
 assert(32 % 1 === 0);(_memcpy($1310, $1311, 32)|0);
 label=317;break;
 case 317: 
 var $1313=$code;
 var $1314=(($1313+32)|0);
 $code=$1314;
 label=318;break;
 case 318: 
 label=1118;break;
 case 319: 
 var $1317=$is_quantifier;
 var $1318=($1317|0)!=0;
 if($1318){label=321;break;}else{label=320;break;}
 case 320: 
 label=1097;break;
 case 321: 
 var $1321=HEAP32[(($ptr)>>2)];
 var $1322=(($1321+1)|0);
 var $1323=$5;
 var $1324=_read_repeat_counts($1322,$repeat_min,$repeat_max,$1323);
 HEAP32[(($ptr)>>2)]=$1324;
 var $1325=$5;
 var $1326=HEAP32[(($1325)>>2)];
 var $1327=($1326|0)!=0;
 if($1327){label=322;break;}else{label=323;break;}
 case 322: 
 label=1120;break;
 case 323: 
 label=327;break;
 case 324: 
 HEAP32[(($repeat_min)>>2)]=0;
 HEAP32[(($repeat_max)>>2)]=-1;
 label=327;break;
 case 325: 
 HEAP32[(($repeat_min)>>2)]=1;
 HEAP32[(($repeat_max)>>2)]=-1;
 label=327;break;
 case 326: 
 HEAP32[(($repeat_min)>>2)]=0;
 HEAP32[(($repeat_max)>>2)]=1;
 label=327;break;
 case 327: 
 var $1334=$previous;
 var $1335=($1334|0)==0;
 if($1335){label=328;break;}else{label=329;break;}
 case 328: 
 var $1337=$5;
 HEAP32[(($1337)>>2)]=9;
 label=1120;break;
 case 329: 
 var $1339=HEAP32[(($repeat_min)>>2)];
 var $1340=($1339|0)==0;
 if($1340){label=330;break;}else{label=331;break;}
 case 330: 
 var $1342=$zerofirstchar;
 $firstchar=$1342;
 var $1343=$zerofirstcharflags;
 $firstcharflags=$1343;
 var $1344=$zeroreqchar;
 $reqchar=$1344;
 var $1345=$zeroreqcharflags;
 $reqcharflags=$1345;
 label=331;break;
 case 331: 
 var $1347=HEAP32[(($repeat_min)>>2)];
 var $1348=HEAP32[(($repeat_max)>>2)];
 var $1349=($1347|0)==($1348|0);
 var $1350=($1349?0:2);
 $reqvary=$1350;
 $op_type=0;
 $possessive_quantifier=0;
 var $1351=$previous;
 HEAP32[(($tempcode)>>2)]=$1351;
 var $1352=$options;
 var $1353=$1352&8;
 var $1354=($1353|0)!=0;
 if($1354){label=332;break;}else{label=351;break;}
 case 332: 
 var $1356=HEAP32[(($ptr)>>2)];
 var $1357=(($1356+1)|0);
 $p=$1357;
 label=333;break;
 case 333: 
 label=334;break;
 case 334: 
 var $1360=$p;
 var $1361=HEAP8[($1360)];
 var $1362=($1361&255);
 var $1363=$12;
 var $1364=(($1363+12)|0);
 var $1365=HEAP32[(($1364)>>2)];
 var $1366=(($1365+$1362)|0);
 var $1367=HEAP8[($1366)];
 var $1368=($1367&255);
 var $1369=$1368&1;
 var $1370=($1369|0)!=0;
 if($1370){label=335;break;}else{label=336;break;}
 case 335: 
 var $1372=$p;
 var $1373=(($1372+1)|0);
 $p=$1373;
 label=334;break;
 case 336: 
 var $1375=$p;
 var $1376=HEAP8[($1375)];
 var $1377=($1376&255);
 var $1378=($1377|0)!=35;
 if($1378){label=337;break;}else{label=338;break;}
 case 337: 
 label=350;break;
 case 338: 
 var $1381=$p;
 var $1382=(($1381+1)|0);
 $p=$1382;
 label=339;break;
 case 339: 
 var $1384=$p;
 var $1385=HEAP8[($1384)];
 var $1386=($1385&255);
 var $1387=($1386|0)!=0;
 if($1387){label=340;break;}else{label=349;break;}
 case 340: 
 var $1389=$12;
 var $1390=(($1389+124)|0);
 var $1391=HEAP32[(($1390)>>2)];
 var $1392=($1391|0)!=0;
 if($1392){label=341;break;}else{label=343;break;}
 case 341: 
 var $1394=$p;
 var $1395=$12;
 var $1396=(($1395+28)|0);
 var $1397=HEAP32[(($1396)>>2)];
 var $1398=($1394>>>0)<($1397>>>0);
 if($1398){label=342;break;}else{label=348;break;}
 case 342: 
 var $1400=$p;
 var $1401=$12;
 var $1402=(($1401+124)|0);
 var $1403=HEAP32[(($1402)>>2)];
 var $1404=$12;
 var $1405=(($1404+28)|0);
 var $1406=HEAP32[(($1405)>>2)];
 var $1407=$12;
 var $1408=(($1407+128)|0);
 var $1409=$utf;
 var $1410=__pcre_is_newline($1400,$1403,$1406,$1408,$1409);
 var $1411=($1410|0)!=0;
 if($1411){label=347;break;}else{label=348;break;}
 case 343: 
 var $1413=$p;
 var $1414=$12;
 var $1415=(($1414+28)|0);
 var $1416=HEAP32[(($1415)>>2)];
 var $1417=$12;
 var $1418=(($1417+128)|0);
 var $1419=HEAP32[(($1418)>>2)];
 var $1420=(((-$1419))|0);
 var $1421=(($1416+$1420)|0);
 var $1422=($1413>>>0)<=($1421>>>0);
 if($1422){label=344;break;}else{label=348;break;}
 case 344: 
 var $1424=$p;
 var $1425=HEAP8[($1424)];
 var $1426=($1425&255);
 var $1427=$12;
 var $1428=(($1427+132)|0);
 var $1429=(($1428)|0);
 var $1430=HEAP8[($1429)];
 var $1431=($1430&255);
 var $1432=($1426|0)==($1431|0);
 if($1432){label=345;break;}else{label=348;break;}
 case 345: 
 var $1434=$12;
 var $1435=(($1434+128)|0);
 var $1436=HEAP32[(($1435)>>2)];
 var $1437=($1436|0)==1;
 if($1437){label=347;break;}else{label=346;break;}
 case 346: 
 var $1439=$p;
 var $1440=(($1439+1)|0);
 var $1441=HEAP8[($1440)];
 var $1442=($1441&255);
 var $1443=$12;
 var $1444=(($1443+132)|0);
 var $1445=(($1444+1)|0);
 var $1446=HEAP8[($1445)];
 var $1447=($1446&255);
 var $1448=($1442|0)==($1447|0);
 if($1448){label=347;break;}else{label=348;break;}
 case 347: 
 var $1450=$12;
 var $1451=(($1450+128)|0);
 var $1452=HEAP32[(($1451)>>2)];
 var $1453=$p;
 var $1454=(($1453+$1452)|0);
 $p=$1454;
 label=349;break;
 case 348: 
 var $1456=$p;
 var $1457=(($1456+1)|0);
 $p=$1457;
 label=339;break;
 case 349: 
 label=333;break;
 case 350: 
 var $1460=$p;
 var $1461=((($1460)-(1))|0);
 HEAP32[(($ptr)>>2)]=$1461;
 label=351;break;
 case 351: 
 var $1463=HEAP32[(($ptr)>>2)];
 var $1464=(($1463+1)|0);
 var $1465=HEAP8[($1464)];
 var $1466=($1465&255);
 var $1467=($1466|0)==43;
 if($1467){label=352;break;}else{label=353;break;}
 case 352: 
 $repeat_type=0;
 $possessive_quantifier=1;
 var $1469=HEAP32[(($ptr)>>2)];
 var $1470=(($1469+1)|0);
 HEAP32[(($ptr)>>2)]=$1470;
 label=357;break;
 case 353: 
 var $1472=HEAP32[(($ptr)>>2)];
 var $1473=(($1472+1)|0);
 var $1474=HEAP8[($1473)];
 var $1475=($1474&255);
 var $1476=($1475|0)==63;
 if($1476){label=354;break;}else{label=355;break;}
 case 354: 
 var $1478=$greedy_non_default;
 $repeat_type=$1478;
 var $1479=HEAP32[(($ptr)>>2)];
 var $1480=(($1479+1)|0);
 HEAP32[(($ptr)>>2)]=$1480;
 label=356;break;
 case 355: 
 var $1482=$greedy_default;
 $repeat_type=$1482;
 label=356;break;
 case 356: 
 label=357;break;
 case 357: 
 var $1485=$previous;
 var $1486=HEAP8[($1485)];
 var $1487=($1486&255);
 var $1488=($1487|0)==117;
 if($1488){label=358;break;}else{label=364;break;}
 case 358: 
 var $1490=$previous;
 var $1491=(($1490+1)|0);
 var $1492=(($1491+2)|0);
 var $1493=$previous;
 _memmove($1492,$1493,3,1,0);
 var $1494=$previous;
 HEAP8[($1494)]=-127;
 var $1495=$previous;
 var $1496=(($1495+1)|0);
 HEAP8[($1496)]=0;
 var $1497=$previous;
 var $1498=(($1497+2)|0);
 HEAP8[($1498)]=6;
 var $1499=$previous;
 var $1500=(($1499+6)|0);
 HEAP8[($1500)]=120;
 var $1501=$previous;
 var $1502=(($1501+7)|0);
 HEAP8[($1502)]=0;
 var $1503=$previous;
 var $1504=(($1503+8)|0);
 HEAP8[($1504)]=6;
 var $1505=$code;
 var $1506=(($1505+6)|0);
 $code=$1506;
 HEAP32[(($length_prevgroup)>>2)]=9;
 var $1507=$13;
 var $1508=($1507|0)==0;
 if($1508){label=359;break;}else{label=363;break;}
 case 359: 
 var $1510=$12;
 var $1511=(($1510+32)|0);
 var $1512=HEAP32[(($1511)>>2)];
 var $1513=$12;
 var $1514=(($1513+16)|0);
 var $1515=HEAP32[(($1514)>>2)];
 var $1516=(($1515+2)|0);
 var $1517=($1512>>>0)>=($1516>>>0);
 if($1517){label=360;break;}else{label=363;break;}
 case 360: 
 var $1519=$12;
 var $1520=(($1519+32)|0);
 var $1521=HEAP32[(($1520)>>2)];
 var $1522=((($1521)-(2))|0);
 var $1523=HEAP8[($1522)];
 var $1524=($1523&255);
 var $1525=$1524<<8;
 var $1526=$12;
 var $1527=(($1526+32)|0);
 var $1528=HEAP32[(($1527)>>2)];
 var $1529=((($1528)-(1))|0);
 var $1530=HEAP8[($1529)];
 var $1531=($1530&255);
 var $1532=$1525|$1531;
 $offset=$1532;
 var $1533=$offset;
 var $1534=$previous;
 var $1535=(($1534+1)|0);
 var $1536=$12;
 var $1537=(($1536+20)|0);
 var $1538=HEAP32[(($1537)>>2)];
 var $1539=$1535;
 var $1540=$1538;
 var $1541=((($1539)-($1540))|0);
 var $1542=($1533|0)==($1541|0);
 if($1542){label=361;break;}else{label=362;break;}
 case 361: 
 var $1544=$offset;
 var $1545=((($1544)+(1))|0);
 var $1546=((($1545)+(2))|0);
 var $1547=$1546>>8;
 var $1548=(($1547)&255);
 var $1549=$12;
 var $1550=(($1549+32)|0);
 var $1551=HEAP32[(($1550)>>2)];
 var $1552=((($1551)-(2))|0);
 HEAP8[($1552)]=$1548;
 var $1553=$offset;
 var $1554=((($1553)+(1))|0);
 var $1555=((($1554)+(2))|0);
 var $1556=$1555&255;
 var $1557=(($1556)&255);
 var $1558=$12;
 var $1559=(($1558+32)|0);
 var $1560=HEAP32[(($1559)>>2)];
 var $1561=((($1560)-(1))|0);
 HEAP8[($1561)]=$1557;
 label=362;break;
 case 362: 
 label=363;break;
 case 363: 
 label=364;break;
 case 364: 
 var $1565=$previous;
 var $1566=HEAP8[($1565)];
 var $1567=($1566&255);
 var $1568=($1567|0)==29;
 if($1568){label=368;break;}else{label=365;break;}
 case 365: 
 var $1570=$previous;
 var $1571=HEAP8[($1570)];
 var $1572=($1571&255);
 var $1573=($1572|0)==30;
 if($1573){label=368;break;}else{label=366;break;}
 case 366: 
 var $1575=$previous;
 var $1576=HEAP8[($1575)];
 var $1577=($1576&255);
 var $1578=($1577|0)==31;
 if($1578){label=368;break;}else{label=367;break;}
 case 367: 
 var $1580=$previous;
 var $1581=HEAP8[($1580)];
 var $1582=($1581&255);
 var $1583=($1582|0)==32;
 if($1583){label=368;break;}else{label=378;break;}
 case 368: 
 var $1585=$previous;
 var $1586=HEAP8[($1585)];
 var $1587=($1586&255);
 if(($1587|0)==29){ label=370;break;}else if(($1587|0)==30){ label=371;break;}else if(($1587|0)==31){ label=372;break;}else if(($1587|0)==32){ label=373;break;}else{label=369;break;}
 case 369: 
 label=370;break;
 case 370: 
 $op_type=0;
 label=374;break;
 case 371: 
 $op_type=13;
 label=374;break;
 case 372: 
 $op_type=26;
 label=374;break;
 case 373: 
 $op_type=39;
 label=374;break;
 case 374: 
 var $1594=$code;
 var $1595=((($1594)-(1))|0);
 var $1596=HEAP8[($1595)];
 var $1597=($1596&255);
 $c=$1597;
 var $1598=$previous;
 var $1599=HEAP8[($1598)];
 var $1600=($1599&255);
 var $1601=($1600|0)<=30;
 if($1601){label=375;break;}else{label=377;break;}
 case 375: 
 var $1603=HEAP32[(($repeat_min)>>2)];
 var $1604=($1603|0)>1;
 if($1604){label=376;break;}else{label=377;break;}
 case 376: 
 var $1606=$c;
 $reqchar=$1606;
 var $1607=$req_caseopt;
 var $1608=$12;
 var $1609=(($1608+104)|0);
 var $1610=HEAP32[(($1609)>>2)];
 var $1611=$1607|$1610;
 $reqcharflags=$1611;
 label=377;break;
 case 377: 
 label=380;break;
 case 378: 
 var $1614=$previous;
 var $1615=HEAP8[($1614)];
 var $1616=($1615&255);
 var $1617=($1616|0)<23;
 if($1617){label=379;break;}else{label=416;break;}
 case 379: 
 $op_type=52;
 var $1619=$previous;
 var $1620=HEAP8[($1619)];
 var $1621=($1620&255);
 $c=$1621;
 label=380;break;
 case 380: 
 var $1623=$previous;
 var $1624=HEAP8[($1623)];
 var $1625=($1624&255);
 var $1626=($1625|0)==16;
 if($1626){label=382;break;}else{label=381;break;}
 case 381: 
 var $1628=$previous;
 var $1629=HEAP8[($1628)];
 var $1630=($1629&255);
 var $1631=($1630|0)==15;
 if($1631){label=382;break;}else{label=383;break;}
 case 382: 
 var $1633=$previous;
 var $1634=(($1633+1)|0);
 var $1635=HEAP8[($1634)];
 var $1636=($1635&255);
 $prop_type=$1636;
 var $1637=$previous;
 var $1638=(($1637+2)|0);
 var $1639=HEAP8[($1638)];
 var $1640=($1639&255);
 $prop_value=$1640;
 label=384;break;
 case 383: 
 $prop_value=-1;
 $prop_type=-1;
 label=384;break;
 case 384: 
 var $1643=$code;
 $oldcode=$1643;
 var $1644=$previous;
 $code=$1644;
 var $1645=HEAP32[(($repeat_max)>>2)];
 var $1646=($1645|0)==0;
 if($1646){label=385;break;}else{label=386;break;}
 case 385: 
 label=570;break;
 case 386: 
 var $1649=$op_type;
 var $1650=$repeat_type;
 var $1651=((($1650)+($1649))|0);
 $repeat_type=$1651;
 var $1652=HEAP32[(($repeat_min)>>2)];
 var $1653=($1652|0)==0;
 if($1653){label=387;break;}else{label=394;break;}
 case 387: 
 var $1655=HEAP32[(($repeat_max)>>2)];
 var $1656=($1655|0)==-1;
 if($1656){label=388;break;}else{label=389;break;}
 case 388: 
 var $1658=$repeat_type;
 var $1659=((($1658)+(33))|0);
 var $1660=(($1659)&255);
 var $1661=$code;
 var $1662=(($1661+1)|0);
 $code=$1662;
 HEAP8[($1661)]=$1660;
 label=393;break;
 case 389: 
 var $1664=HEAP32[(($repeat_max)>>2)];
 var $1665=($1664|0)==1;
 if($1665){label=390;break;}else{label=391;break;}
 case 390: 
 var $1667=$repeat_type;
 var $1668=((($1667)+(37))|0);
 var $1669=(($1668)&255);
 var $1670=$code;
 var $1671=(($1670+1)|0);
 $code=$1671;
 HEAP8[($1670)]=$1669;
 label=392;break;
 case 391: 
 var $1673=$repeat_type;
 var $1674=((($1673)+(39))|0);
 var $1675=(($1674)&255);
 var $1676=$code;
 var $1677=(($1676+1)|0);
 $code=$1677;
 HEAP8[($1676)]=$1675;
 var $1678=HEAP32[(($repeat_max)>>2)];
 var $1679=$1678>>8;
 var $1680=(($1679)&255);
 var $1681=$code;
 var $1682=(($1681)|0);
 HEAP8[($1682)]=$1680;
 var $1683=HEAP32[(($repeat_max)>>2)];
 var $1684=$1683&255;
 var $1685=(($1684)&255);
 var $1686=$code;
 var $1687=(($1686+1)|0);
 HEAP8[($1687)]=$1685;
 var $1688=$code;
 var $1689=(($1688+2)|0);
 $code=$1689;
 label=392;break;
 case 392: 
 label=393;break;
 case 393: 
 label=415;break;
 case 394: 
 var $1693=HEAP32[(($repeat_min)>>2)];
 var $1694=($1693|0)==1;
 if($1694){label=395;break;}else{label=401;break;}
 case 395: 
 var $1696=HEAP32[(($repeat_max)>>2)];
 var $1697=($1696|0)==-1;
 if($1697){label=396;break;}else{label=397;break;}
 case 396: 
 var $1699=$repeat_type;
 var $1700=((($1699)+(35))|0);
 var $1701=(($1700)&255);
 var $1702=$code;
 var $1703=(($1702+1)|0);
 $code=$1703;
 HEAP8[($1702)]=$1701;
 label=400;break;
 case 397: 
 var $1705=$oldcode;
 $code=$1705;
 var $1706=HEAP32[(($repeat_max)>>2)];
 var $1707=($1706|0)==1;
 if($1707){label=398;break;}else{label=399;break;}
 case 398: 
 label=570;break;
 case 399: 
 var $1710=$repeat_type;
 var $1711=((($1710)+(39))|0);
 var $1712=(($1711)&255);
 var $1713=$code;
 var $1714=(($1713+1)|0);
 $code=$1714;
 HEAP8[($1713)]=$1712;
 var $1715=HEAP32[(($repeat_max)>>2)];
 var $1716=((($1715)-(1))|0);
 var $1717=$1716>>8;
 var $1718=(($1717)&255);
 var $1719=$code;
 var $1720=(($1719)|0);
 HEAP8[($1720)]=$1718;
 var $1721=HEAP32[(($repeat_max)>>2)];
 var $1722=((($1721)-(1))|0);
 var $1723=$1722&255;
 var $1724=(($1723)&255);
 var $1725=$code;
 var $1726=(($1725+1)|0);
 HEAP8[($1726)]=$1724;
 var $1727=$code;
 var $1728=(($1727+2)|0);
 $code=$1728;
 label=400;break;
 case 400: 
 label=414;break;
 case 401: 
 var $1731=$op_type;
 var $1732=((($1731)+(41))|0);
 var $1733=(($1732)&255);
 var $1734=$code;
 var $1735=(($1734+1)|0);
 $code=$1735;
 HEAP8[($1734)]=$1733;
 var $1736=HEAP32[(($repeat_min)>>2)];
 var $1737=$1736>>8;
 var $1738=(($1737)&255);
 var $1739=$code;
 var $1740=(($1739)|0);
 HEAP8[($1740)]=$1738;
 var $1741=HEAP32[(($repeat_min)>>2)];
 var $1742=$1741&255;
 var $1743=(($1742)&255);
 var $1744=$code;
 var $1745=(($1744+1)|0);
 HEAP8[($1745)]=$1743;
 var $1746=$code;
 var $1747=(($1746+2)|0);
 $code=$1747;
 var $1748=HEAP32[(($repeat_max)>>2)];
 var $1749=($1748|0)<0;
 if($1749){label=402;break;}else{label=405;break;}
 case 402: 
 var $1751=$c;
 var $1752=(($1751)&255);
 var $1753=$code;
 var $1754=(($1753+1)|0);
 $code=$1754;
 HEAP8[($1753)]=$1752;
 var $1755=$prop_type;
 var $1756=($1755|0)>=0;
 if($1756){label=403;break;}else{label=404;break;}
 case 403: 
 var $1758=$prop_type;
 var $1759=(($1758)&255);
 var $1760=$code;
 var $1761=(($1760+1)|0);
 $code=$1761;
 HEAP8[($1760)]=$1759;
 var $1762=$prop_value;
 var $1763=(($1762)&255);
 var $1764=$code;
 var $1765=(($1764+1)|0);
 $code=$1765;
 HEAP8[($1764)]=$1763;
 label=404;break;
 case 404: 
 var $1767=$repeat_type;
 var $1768=((($1767)+(33))|0);
 var $1769=(($1768)&255);
 var $1770=$code;
 var $1771=(($1770+1)|0);
 $code=$1771;
 HEAP8[($1770)]=$1769;
 label=413;break;
 case 405: 
 var $1773=HEAP32[(($repeat_max)>>2)];
 var $1774=HEAP32[(($repeat_min)>>2)];
 var $1775=($1773|0)!=($1774|0);
 if($1775){label=406;break;}else{label=412;break;}
 case 406: 
 var $1777=$c;
 var $1778=(($1777)&255);
 var $1779=$code;
 var $1780=(($1779+1)|0);
 $code=$1780;
 HEAP8[($1779)]=$1778;
 var $1781=$prop_type;
 var $1782=($1781|0)>=0;
 if($1782){label=407;break;}else{label=408;break;}
 case 407: 
 var $1784=$prop_type;
 var $1785=(($1784)&255);
 var $1786=$code;
 var $1787=(($1786+1)|0);
 $code=$1787;
 HEAP8[($1786)]=$1785;
 var $1788=$prop_value;
 var $1789=(($1788)&255);
 var $1790=$code;
 var $1791=(($1790+1)|0);
 $code=$1791;
 HEAP8[($1790)]=$1789;
 label=408;break;
 case 408: 
 var $1793=HEAP32[(($repeat_min)>>2)];
 var $1794=HEAP32[(($repeat_max)>>2)];
 var $1795=((($1794)-($1793))|0);
 HEAP32[(($repeat_max)>>2)]=$1795;
 var $1796=HEAP32[(($repeat_max)>>2)];
 var $1797=($1796|0)==1;
 if($1797){label=409;break;}else{label=410;break;}
 case 409: 
 var $1799=$repeat_type;
 var $1800=((($1799)+(37))|0);
 var $1801=(($1800)&255);
 var $1802=$code;
 var $1803=(($1802+1)|0);
 $code=$1803;
 HEAP8[($1802)]=$1801;
 label=411;break;
 case 410: 
 var $1805=$repeat_type;
 var $1806=((($1805)+(39))|0);
 var $1807=(($1806)&255);
 var $1808=$code;
 var $1809=(($1808+1)|0);
 $code=$1809;
 HEAP8[($1808)]=$1807;
 var $1810=HEAP32[(($repeat_max)>>2)];
 var $1811=$1810>>8;
 var $1812=(($1811)&255);
 var $1813=$code;
 var $1814=(($1813)|0);
 HEAP8[($1814)]=$1812;
 var $1815=HEAP32[(($repeat_max)>>2)];
 var $1816=$1815&255;
 var $1817=(($1816)&255);
 var $1818=$code;
 var $1819=(($1818+1)|0);
 HEAP8[($1819)]=$1817;
 var $1820=$code;
 var $1821=(($1820+2)|0);
 $code=$1821;
 label=411;break;
 case 411: 
 label=412;break;
 case 412: 
 label=413;break;
 case 413: 
 label=414;break;
 case 414: 
 label=415;break;
 case 415: 
 var $1827=$c;
 var $1828=(($1827)&255);
 var $1829=$code;
 var $1830=(($1829+1)|0);
 $code=$1830;
 HEAP8[($1829)]=$1828;
 label=554;break;
 case 416: 
 var $1832=$previous;
 var $1833=HEAP8[($1832)];
 var $1834=($1833&255);
 var $1835=($1834|0)==110;
 if($1835){label=422;break;}else{label=417;break;}
 case 417: 
 var $1837=$previous;
 var $1838=HEAP8[($1837)];
 var $1839=($1838&255);
 var $1840=($1839|0)==111;
 if($1840){label=422;break;}else{label=418;break;}
 case 418: 
 var $1842=$previous;
 var $1843=HEAP8[($1842)];
 var $1844=($1843&255);
 var $1845=($1844|0)==113;
 if($1845){label=422;break;}else{label=419;break;}
 case 419: 
 var $1847=$previous;
 var $1848=HEAP8[($1847)];
 var $1849=($1848&255);
 var $1850=($1849|0)==114;
 if($1850){label=422;break;}else{label=420;break;}
 case 420: 
 var $1852=$previous;
 var $1853=HEAP8[($1852)];
 var $1854=($1853&255);
 var $1855=($1854|0)==115;
 if($1855){label=422;break;}else{label=421;break;}
 case 421: 
 var $1857=$previous;
 var $1858=HEAP8[($1857)];
 var $1859=($1858&255);
 var $1860=($1859|0)==116;
 if($1860){label=422;break;}else{label=439;break;}
 case 422: 
 var $1862=HEAP32[(($repeat_max)>>2)];
 var $1863=($1862|0)==0;
 if($1863){label=423;break;}else{label=424;break;}
 case 423: 
 var $1865=$previous;
 $code=$1865;
 label=570;break;
 case 424: 
 var $1867=HEAP32[(($repeat_min)>>2)];
 var $1868=($1867|0)==0;
 if($1868){label=425;break;}else{label=427;break;}
 case 425: 
 var $1870=HEAP32[(($repeat_max)>>2)];
 var $1871=($1870|0)==-1;
 if($1871){label=426;break;}else{label=427;break;}
 case 426: 
 var $1873=$repeat_type;
 var $1874=((($1873)+(98))|0);
 var $1875=(($1874)&255);
 var $1876=$code;
 var $1877=(($1876+1)|0);
 $code=$1877;
 HEAP8[($1876)]=$1875;
 label=438;break;
 case 427: 
 var $1879=HEAP32[(($repeat_min)>>2)];
 var $1880=($1879|0)==1;
 if($1880){label=428;break;}else{label=430;break;}
 case 428: 
 var $1882=HEAP32[(($repeat_max)>>2)];
 var $1883=($1882|0)==-1;
 if($1883){label=429;break;}else{label=430;break;}
 case 429: 
 var $1885=$repeat_type;
 var $1886=((($1885)+(100))|0);
 var $1887=(($1886)&255);
 var $1888=$code;
 var $1889=(($1888+1)|0);
 $code=$1889;
 HEAP8[($1888)]=$1887;
 label=437;break;
 case 430: 
 var $1891=HEAP32[(($repeat_min)>>2)];
 var $1892=($1891|0)==0;
 if($1892){label=431;break;}else{label=433;break;}
 case 431: 
 var $1894=HEAP32[(($repeat_max)>>2)];
 var $1895=($1894|0)==1;
 if($1895){label=432;break;}else{label=433;break;}
 case 432: 
 var $1897=$repeat_type;
 var $1898=((($1897)+(102))|0);
 var $1899=(($1898)&255);
 var $1900=$code;
 var $1901=(($1900+1)|0);
 $code=$1901;
 HEAP8[($1900)]=$1899;
 label=436;break;
 case 433: 
 var $1903=$repeat_type;
 var $1904=((($1903)+(104))|0);
 var $1905=(($1904)&255);
 var $1906=$code;
 var $1907=(($1906+1)|0);
 $code=$1907;
 HEAP8[($1906)]=$1905;
 var $1908=HEAP32[(($repeat_min)>>2)];
 var $1909=$1908>>8;
 var $1910=(($1909)&255);
 var $1911=$code;
 var $1912=(($1911)|0);
 HEAP8[($1912)]=$1910;
 var $1913=HEAP32[(($repeat_min)>>2)];
 var $1914=$1913&255;
 var $1915=(($1914)&255);
 var $1916=$code;
 var $1917=(($1916+1)|0);
 HEAP8[($1917)]=$1915;
 var $1918=$code;
 var $1919=(($1918+2)|0);
 $code=$1919;
 var $1920=HEAP32[(($repeat_max)>>2)];
 var $1921=($1920|0)==-1;
 if($1921){label=434;break;}else{label=435;break;}
 case 434: 
 HEAP32[(($repeat_max)>>2)]=0;
 label=435;break;
 case 435: 
 var $1924=HEAP32[(($repeat_max)>>2)];
 var $1925=$1924>>8;
 var $1926=(($1925)&255);
 var $1927=$code;
 var $1928=(($1927)|0);
 HEAP8[($1928)]=$1926;
 var $1929=HEAP32[(($repeat_max)>>2)];
 var $1930=$1929&255;
 var $1931=(($1930)&255);
 var $1932=$code;
 var $1933=(($1932+1)|0);
 HEAP8[($1933)]=$1931;
 var $1934=$code;
 var $1935=(($1934+2)|0);
 $code=$1935;
 label=436;break;
 case 436: 
 label=437;break;
 case 437: 
 label=438;break;
 case 438: 
 label=553;break;
 case 439: 
 var $1940=$previous;
 var $1941=HEAP8[($1940)];
 var $1942=($1941&255);
 var $1943=($1942|0)>=125;
 if($1943){label=440;break;}else{label=549;break;}
 case 440: 
 var $1945=$previous;
 var $1946=HEAP8[($1945)];
 var $1947=($1946&255);
 var $1948=($1947|0)<=135;
 if($1948){label=441;break;}else{label=549;break;}
 case 441: 
 var $1950=$code;
 var $1951=$previous;
 var $1952=$1950;
 var $1953=$1951;
 var $1954=((($1952)-($1953))|0);
 $len=$1954;
 $bralink=0;
 $brazeroptr=0;
 var $1955=$previous;
 var $1956=HEAP8[($1955)];
 var $1957=($1956&255);
 var $1958=($1957|0)==135;
 if($1958){label=442;break;}else{label=444;break;}
 case 442: 
 var $1960=$previous;
 var $1961=(($1960+3)|0);
 var $1962=HEAP8[($1961)];
 var $1963=($1962&255);
 var $1964=($1963|0)==145;
 if($1964){label=443;break;}else{label=444;break;}
 case 443: 
 label=570;break;
 case 444: 
 var $1967=$previous;
 var $1968=HEAP8[($1967)];
 var $1969=($1968&255);
 var $1970=($1969|0)<129;
 if($1970){label=445;break;}else{label=451;break;}
 case 445: 
 var $1972=HEAP32[(($repeat_min)>>2)];
 var $1973=($1972|0)>0;
 if($1973){label=446;break;}else{label=447;break;}
 case 446: 
 label=570;break;
 case 447: 
 var $1976=HEAP32[(($repeat_max)>>2)];
 var $1977=($1976|0)<0;
 if($1977){label=449;break;}else{label=448;break;}
 case 448: 
 var $1979=HEAP32[(($repeat_max)>>2)];
 var $1980=($1979|0)>1;
 if($1980){label=449;break;}else{label=450;break;}
 case 449: 
 HEAP32[(($repeat_max)>>2)]=1;
 label=450;break;
 case 450: 
 label=451;break;
 case 451: 
 var $1984=HEAP32[(($repeat_min)>>2)];
 var $1985=($1984|0)==0;
 if($1985){label=452;break;}else{label=461;break;}
 case 452: 
 var $1987=HEAP32[(($repeat_max)>>2)];
 var $1988=($1987|0)<=1;
 if($1988){label=453;break;}else{label=456;break;}
 case 453: 
 var $1990=$code;
 HEAP8[($1990)]=0;
 var $1991=$previous;
 var $1992=$utf;
 var $1993=$12;
 var $1994=$save_hwm;
 _adjust_recurse($1991,1,$1992,$1993,$1994);
 var $1995=$previous;
 var $1996=(($1995+1)|0);
 var $1997=$previous;
 var $1998=$len;
 _memmove($1996,$1997,$1998,1,0);
 var $1999=$code;
 var $2000=(($1999+1)|0);
 $code=$2000;
 var $2001=HEAP32[(($repeat_max)>>2)];
 var $2002=($2001|0)==0;
 if($2002){label=454;break;}else{label=455;break;}
 case 454: 
 var $2004=$previous;
 var $2005=(($2004+1)|0);
 $previous=$2005;
 HEAP8[($2004)]=-95;
 label=570;break;
 case 455: 
 var $2007=$previous;
 $brazeroptr=$2007;
 var $2008=$repeat_type;
 var $2009=((($2008)+(146))|0);
 var $2010=(($2009)&255);
 var $2011=$previous;
 var $2012=(($2011+1)|0);
 $previous=$2012;
 HEAP8[($2011)]=$2010;
 label=460;break;
 case 456: 
 var $2014=$code;
 HEAP8[($2014)]=0;
 var $2015=$previous;
 var $2016=$utf;
 var $2017=$12;
 var $2018=$save_hwm;
 _adjust_recurse($2015,4,$2016,$2017,$2018);
 var $2019=$previous;
 var $2020=(($2019+2)|0);
 var $2021=(($2020+2)|0);
 var $2022=$previous;
 var $2023=$len;
 _memmove($2021,$2022,$2023,1,0);
 var $2024=$code;
 var $2025=(($2024+4)|0);
 $code=$2025;
 var $2026=$repeat_type;
 var $2027=((($2026)+(146))|0);
 var $2028=(($2027)&255);
 var $2029=$previous;
 var $2030=(($2029+1)|0);
 $previous=$2030;
 HEAP8[($2029)]=$2028;
 var $2031=$previous;
 var $2032=(($2031+1)|0);
 $previous=$2032;
 HEAP8[($2031)]=-125;
 var $2033=$bralink;
 var $2034=($2033|0)==0;
 if($2034){label=457;break;}else{label=458;break;}
 case 457: 
 var $2043=0;label=459;break;
 case 458: 
 var $2037=$previous;
 var $2038=$bralink;
 var $2039=$2037;
 var $2040=$2038;
 var $2041=((($2039)-($2040))|0);
 var $2043=$2041;label=459;break;
 case 459: 
 var $2043;
 $offset2=$2043;
 var $2044=$previous;
 $bralink=$2044;
 var $2045=$offset2;
 var $2046=$2045>>8;
 var $2047=(($2046)&255);
 var $2048=$previous;
 var $2049=(($2048)|0);
 HEAP8[($2049)]=$2047;
 var $2050=$offset2;
 var $2051=$2050&255;
 var $2052=(($2051)&255);
 var $2053=$previous;
 var $2054=(($2053+1)|0);
 HEAP8[($2054)]=$2052;
 var $2055=$previous;
 var $2056=(($2055+2)|0);
 $previous=$2056;
 label=460;break;
 case 460: 
 var $2058=HEAP32[(($repeat_max)>>2)];
 var $2059=((($2058)-(1))|0);
 HEAP32[(($repeat_max)>>2)]=$2059;
 label=488;break;
 case 461: 
 var $2061=HEAP32[(($repeat_min)>>2)];
 var $2062=($2061|0)>1;
 if($2062){label=462;break;}else{label=485;break;}
 case 462: 
 var $2064=$13;
 var $2065=($2064|0)!=0;
 if($2065){label=463;break;}else{label=467;break;}
 case 463: 
 var $2067=HEAP32[(($repeat_min)>>2)];
 var $2068=((($2067)-(1))|0);
 var $2069=HEAP32[(($length_prevgroup)>>2)];
 var $2070=(Math_imul($2068,$2069)|0);
 $delta=$2070;
 var $2071=HEAP32[(($repeat_min)>>2)];
 var $2072=((($2071)-(1))|0);
 var $2073$0=$2072;
 var $2073$1=((((($2072|0)<0))|0)?-1:0);
 var $2074=HEAP32[(($length_prevgroup)>>2)];
 var $2075$0=$2074;
 var $2075$1=((((($2074|0)<0))|0)?-1:0);
 var $2076$0=___muldi3($2073$0,$2073$1,$2075$0,$2075$1);var $2076$1=tempRet0;
 var $$etemp$0$0=2147483647;
 var $$etemp$0$1=0;
 var $2077=(($2076$1|0) > ($$etemp$0$1|0)) | (((($2076$1|0) == ($$etemp$0$1|0) & ($2076$0>>>0) >  ($$etemp$0$0>>>0))));
 if($2077){label=465;break;}else{label=464;break;}
 case 464: 
 var $2079=$13;
 var $2080=HEAP32[(($2079)>>2)];
 var $2081=(((2147483627)-($2080))|0);
 var $2082=$delta;
 var $2083=($2081|0)<($2082|0);
 if($2083){label=465;break;}else{label=466;break;}
 case 465: 
 var $2085=$5;
 HEAP32[(($2085)>>2)]=20;
 label=1120;break;
 case 466: 
 var $2087=$delta;
 var $2088=$13;
 var $2089=HEAP32[(($2088)>>2)];
 var $2090=((($2089)+($2087))|0);
 HEAP32[(($2088)>>2)]=$2090;
 label=484;break;
 case 467: 
 var $2092=$groupsetfirstchar;
 var $2093=($2092|0)!=0;
 if($2093){label=468;break;}else{label=470;break;}
 case 468: 
 var $2095=$reqcharflags;
 var $2096=($2095|0)<0;
 if($2096){label=469;break;}else{label=470;break;}
 case 469: 
 var $2098=$firstchar;
 $reqchar=$2098;
 var $2099=$firstcharflags;
 $reqcharflags=$2099;
 label=470;break;
 case 470: 
 $i=1;
 label=471;break;
 case 471: 
 var $2102=$i;
 var $2103=HEAP32[(($repeat_min)>>2)];
 var $2104=($2102|0)<($2103|0);
 if($2104){label=472;break;}else{label=483;break;}
 case 472: 
 var $2106=$12;
 var $2107=(($2106+32)|0);
 var $2108=HEAP32[(($2107)>>2)];
 $this_hwm=$2108;
 var $2109=$code;
 var $2110=$previous;
 var $2111=$len;
 assert($2111 % 1 === 0);(_memcpy($2109, $2110, $2111)|0);
 label=473;break;
 case 473: 
 var $2113=$12;
 var $2114=(($2113+32)|0);
 var $2115=HEAP32[(($2114)>>2)];
 var $2116=$12;
 var $2117=(($2116+16)|0);
 var $2118=HEAP32[(($2117)>>2)];
 var $2119=$12;
 var $2120=(($2119+60)|0);
 var $2121=HEAP32[(($2120)>>2)];
 var $2122=(($2118+$2121)|0);
 var $2123=((($2122)-(100))|0);
 var $2124=$this_hwm;
 var $2125=$save_hwm;
 var $2126=$2124;
 var $2127=$2125;
 var $2128=((($2126)-($2127))|0);
 var $2129=(((-$2128))|0);
 var $2130=(($2123+$2129)|0);
 var $2131=($2115>>>0)>($2130>>>0);
 if($2131){label=474;break;}else{label=477;break;}
 case 474: 
 var $2133=$save_hwm;
 var $2134=$12;
 var $2135=(($2134+16)|0);
 var $2136=HEAP32[(($2135)>>2)];
 var $2137=$2133;
 var $2138=$2136;
 var $2139=((($2137)-($2138))|0);
 $save_offset=$2139;
 var $2140=$this_hwm;
 var $2141=$12;
 var $2142=(($2141+16)|0);
 var $2143=HEAP32[(($2142)>>2)];
 var $2144=$2140;
 var $2145=$2143;
 var $2146=((($2144)-($2145))|0);
 $this_offset=$2146;
 var $2147=$12;
 var $2148=_expand_workspace($2147);
 var $2149=$5;
 HEAP32[(($2149)>>2)]=$2148;
 var $2150=$5;
 var $2151=HEAP32[(($2150)>>2)];
 var $2152=($2151|0)!=0;
 if($2152){label=475;break;}else{label=476;break;}
 case 475: 
 label=1120;break;
 case 476: 
 var $2155=$12;
 var $2156=(($2155+16)|0);
 var $2157=HEAP32[(($2156)>>2)];
 var $2158=$save_offset;
 var $2159=(($2157+$2158)|0);
 $save_hwm=$2159;
 var $2160=$12;
 var $2161=(($2160+16)|0);
 var $2162=HEAP32[(($2161)>>2)];
 var $2163=$this_offset;
 var $2164=(($2162+$2163)|0);
 $this_hwm=$2164;
 label=473;break;
 case 477: 
 var $2166=$save_hwm;
 $hc=$2166;
 label=478;break;
 case 478: 
 var $2168=$hc;
 var $2169=$this_hwm;
 var $2170=($2168>>>0)<($2169>>>0);
 if($2170){label=479;break;}else{label=481;break;}
 case 479: 
 var $2172=$hc;
 var $2173=(($2172)|0);
 var $2174=HEAP8[($2173)];
 var $2175=($2174&255);
 var $2176=$2175<<8;
 var $2177=$hc;
 var $2178=(($2177+1)|0);
 var $2179=HEAP8[($2178)];
 var $2180=($2179&255);
 var $2181=$2176|$2180;
 var $2182=$len;
 var $2183=((($2181)+($2182))|0);
 var $2184=$2183>>8;
 var $2185=(($2184)&255);
 var $2186=$12;
 var $2187=(($2186+32)|0);
 var $2188=HEAP32[(($2187)>>2)];
 var $2189=(($2188)|0);
 HEAP8[($2189)]=$2185;
 var $2190=$hc;
 var $2191=(($2190)|0);
 var $2192=HEAP8[($2191)];
 var $2193=($2192&255);
 var $2194=$2193<<8;
 var $2195=$hc;
 var $2196=(($2195+1)|0);
 var $2197=HEAP8[($2196)];
 var $2198=($2197&255);
 var $2199=$2194|$2198;
 var $2200=$len;
 var $2201=((($2199)+($2200))|0);
 var $2202=$2201&255;
 var $2203=(($2202)&255);
 var $2204=$12;
 var $2205=(($2204+32)|0);
 var $2206=HEAP32[(($2205)>>2)];
 var $2207=(($2206+1)|0);
 HEAP8[($2207)]=$2203;
 var $2208=$12;
 var $2209=(($2208+32)|0);
 var $2210=HEAP32[(($2209)>>2)];
 var $2211=(($2210+2)|0);
 HEAP32[(($2209)>>2)]=$2211;
 label=480;break;
 case 480: 
 var $2213=$hc;
 var $2214=(($2213+2)|0);
 $hc=$2214;
 label=478;break;
 case 481: 
 var $2216=$this_hwm;
 $save_hwm=$2216;
 var $2217=$len;
 var $2218=$code;
 var $2219=(($2218+$2217)|0);
 $code=$2219;
 label=482;break;
 case 482: 
 var $2221=$i;
 var $2222=((($2221)+(1))|0);
 $i=$2222;
 label=471;break;
 case 483: 
 label=484;break;
 case 484: 
 label=485;break;
 case 485: 
 var $2226=HEAP32[(($repeat_max)>>2)];
 var $2227=($2226|0)>0;
 if($2227){label=486;break;}else{label=487;break;}
 case 486: 
 var $2229=HEAP32[(($repeat_min)>>2)];
 var $2230=HEAP32[(($repeat_max)>>2)];
 var $2231=((($2230)-($2229))|0);
 HEAP32[(($repeat_max)>>2)]=$2231;
 label=487;break;
 case 487: 
 label=488;break;
 case 488: 
 var $2234=HEAP32[(($repeat_max)>>2)];
 var $2235=($2234|0)>=0;
 if($2235){label=489;break;}else{label=521;break;}
 case 489: 
 var $2237=$13;
 var $2238=($2237|0)!=0;
 if($2238){label=490;break;}else{label=495;break;}
 case 490: 
 var $2240=HEAP32[(($repeat_max)>>2)];
 var $2241=($2240|0)>0;
 if($2241){label=491;break;}else{label=495;break;}
 case 491: 
 var $2243=HEAP32[(($repeat_max)>>2)];
 var $2244=HEAP32[(($length_prevgroup)>>2)];
 var $2245=((($2244)+(1))|0);
 var $2246=((($2245)+(2))|0);
 var $2247=((($2246)+(4))|0);
 var $2248=(Math_imul($2243,$2247)|0);
 var $2249=((($2248)-(2))|0);
 var $2250=((($2249)-(4))|0);
 $delta3=$2250;
 var $2251=HEAP32[(($repeat_max)>>2)];
 var $2252$0=$2251;
 var $2252$1=((((($2251|0)<0))|0)?-1:0);
 var $2253=HEAP32[(($length_prevgroup)>>2)];
 var $2254=((($2253)+(1))|0);
 var $2255=((($2254)+(2))|0);
 var $2256=((($2255)+(4))|0);
 var $2257$0=$2256;
 var $2257$1=((((($2256|0)<0))|0)?-1:0);
 var $2258$0=___muldi3($2252$0,$2252$1,$2257$0,$2257$1);var $2258$1=tempRet0;
 var $$etemp$1$0=2147483647;
 var $$etemp$1$1=0;
 var $2259=(($2258$1|0) > ($$etemp$1$1|0)) | (((($2258$1|0) == ($$etemp$1$1|0) & ($2258$0>>>0) >  ($$etemp$1$0>>>0))));
 if($2259){label=493;break;}else{label=492;break;}
 case 492: 
 var $2261=$13;
 var $2262=HEAP32[(($2261)>>2)];
 var $2263=(((2147483627)-($2262))|0);
 var $2264=$delta3;
 var $2265=($2263|0)<($2264|0);
 if($2265){label=493;break;}else{label=494;break;}
 case 493: 
 var $2267=$5;
 HEAP32[(($2267)>>2)]=20;
 label=1120;break;
 case 494: 
 var $2269=$delta3;
 var $2270=$13;
 var $2271=HEAP32[(($2270)>>2)];
 var $2272=((($2271)+($2269))|0);
 HEAP32[(($2270)>>2)]=$2272;
 label=514;break;
 case 495: 
 var $2274=HEAP32[(($repeat_max)>>2)];
 var $2275=((($2274)-(1))|0);
 $i=$2275;
 label=496;break;
 case 496: 
 var $2277=$i;
 var $2278=($2277|0)>=0;
 if($2278){label=497;break;}else{label=513;break;}
 case 497: 
 var $2280=$12;
 var $2281=(($2280+32)|0);
 var $2282=HEAP32[(($2281)>>2)];
 $this_hwm5=$2282;
 var $2283=$repeat_type;
 var $2284=((($2283)+(146))|0);
 var $2285=(($2284)&255);
 var $2286=$code;
 var $2287=(($2286+1)|0);
 $code=$2287;
 HEAP8[($2286)]=$2285;
 var $2288=$i;
 var $2289=($2288|0)!=0;
 if($2289){label=498;break;}else{label=502;break;}
 case 498: 
 var $2291=$code;
 var $2292=(($2291+1)|0);
 $code=$2292;
 HEAP8[($2291)]=-125;
 var $2293=$bralink;
 var $2294=($2293|0)==0;
 if($2294){label=499;break;}else{label=500;break;}
 case 499: 
 var $2303=0;label=501;break;
 case 500: 
 var $2297=$code;
 var $2298=$bralink;
 var $2299=$2297;
 var $2300=$2298;
 var $2301=((($2299)-($2300))|0);
 var $2303=$2301;label=501;break;
 case 501: 
 var $2303;
 $offset6=$2303;
 var $2304=$code;
 $bralink=$2304;
 var $2305=$offset6;
 var $2306=$2305>>8;
 var $2307=(($2306)&255);
 var $2308=$code;
 var $2309=(($2308)|0);
 HEAP8[($2309)]=$2307;
 var $2310=$offset6;
 var $2311=$2310&255;
 var $2312=(($2311)&255);
 var $2313=$code;
 var $2314=(($2313+1)|0);
 HEAP8[($2314)]=$2312;
 var $2315=$code;
 var $2316=(($2315+2)|0);
 $code=$2316;
 label=502;break;
 case 502: 
 var $2318=$code;
 var $2319=$previous;
 var $2320=$len;
 assert($2320 % 1 === 0);(_memcpy($2318, $2319, $2320)|0);
 label=503;break;
 case 503: 
 var $2322=$12;
 var $2323=(($2322+32)|0);
 var $2324=HEAP32[(($2323)>>2)];
 var $2325=$12;
 var $2326=(($2325+16)|0);
 var $2327=HEAP32[(($2326)>>2)];
 var $2328=$12;
 var $2329=(($2328+60)|0);
 var $2330=HEAP32[(($2329)>>2)];
 var $2331=(($2327+$2330)|0);
 var $2332=((($2331)-(100))|0);
 var $2333=$this_hwm5;
 var $2334=$save_hwm;
 var $2335=$2333;
 var $2336=$2334;
 var $2337=((($2335)-($2336))|0);
 var $2338=(((-$2337))|0);
 var $2339=(($2332+$2338)|0);
 var $2340=($2324>>>0)>($2339>>>0);
 if($2340){label=504;break;}else{label=507;break;}
 case 504: 
 var $2342=$save_hwm;
 var $2343=$12;
 var $2344=(($2343+16)|0);
 var $2345=HEAP32[(($2344)>>2)];
 var $2346=$2342;
 var $2347=$2345;
 var $2348=((($2346)-($2347))|0);
 $save_offset7=$2348;
 var $2349=$this_hwm5;
 var $2350=$12;
 var $2351=(($2350+16)|0);
 var $2352=HEAP32[(($2351)>>2)];
 var $2353=$2349;
 var $2354=$2352;
 var $2355=((($2353)-($2354))|0);
 $this_offset8=$2355;
 var $2356=$12;
 var $2357=_expand_workspace($2356);
 var $2358=$5;
 HEAP32[(($2358)>>2)]=$2357;
 var $2359=$5;
 var $2360=HEAP32[(($2359)>>2)];
 var $2361=($2360|0)!=0;
 if($2361){label=505;break;}else{label=506;break;}
 case 505: 
 label=1120;break;
 case 506: 
 var $2364=$12;
 var $2365=(($2364+16)|0);
 var $2366=HEAP32[(($2365)>>2)];
 var $2367=$save_offset7;
 var $2368=(($2366+$2367)|0);
 $save_hwm=$2368;
 var $2369=$12;
 var $2370=(($2369+16)|0);
 var $2371=HEAP32[(($2370)>>2)];
 var $2372=$this_offset8;
 var $2373=(($2371+$2372)|0);
 $this_hwm5=$2373;
 label=503;break;
 case 507: 
 var $2375=$save_hwm;
 $hc4=$2375;
 label=508;break;
 case 508: 
 var $2377=$hc4;
 var $2378=$this_hwm5;
 var $2379=($2377>>>0)<($2378>>>0);
 if($2379){label=509;break;}else{label=511;break;}
 case 509: 
 var $2381=$hc4;
 var $2382=(($2381)|0);
 var $2383=HEAP8[($2382)];
 var $2384=($2383&255);
 var $2385=$2384<<8;
 var $2386=$hc4;
 var $2387=(($2386+1)|0);
 var $2388=HEAP8[($2387)];
 var $2389=($2388&255);
 var $2390=$2385|$2389;
 var $2391=$len;
 var $2392=((($2390)+($2391))|0);
 var $2393=$i;
 var $2394=($2393|0)!=0;
 var $2395=($2394?4:1);
 var $2396=((($2392)+($2395))|0);
 var $2397=$2396>>8;
 var $2398=(($2397)&255);
 var $2399=$12;
 var $2400=(($2399+32)|0);
 var $2401=HEAP32[(($2400)>>2)];
 var $2402=(($2401)|0);
 HEAP8[($2402)]=$2398;
 var $2403=$hc4;
 var $2404=(($2403)|0);
 var $2405=HEAP8[($2404)];
 var $2406=($2405&255);
 var $2407=$2406<<8;
 var $2408=$hc4;
 var $2409=(($2408+1)|0);
 var $2410=HEAP8[($2409)];
 var $2411=($2410&255);
 var $2412=$2407|$2411;
 var $2413=$len;
 var $2414=((($2412)+($2413))|0);
 var $2415=$i;
 var $2416=($2415|0)!=0;
 var $2417=($2416?4:1);
 var $2418=((($2414)+($2417))|0);
 var $2419=$2418&255;
 var $2420=(($2419)&255);
 var $2421=$12;
 var $2422=(($2421+32)|0);
 var $2423=HEAP32[(($2422)>>2)];
 var $2424=(($2423+1)|0);
 HEAP8[($2424)]=$2420;
 var $2425=$12;
 var $2426=(($2425+32)|0);
 var $2427=HEAP32[(($2426)>>2)];
 var $2428=(($2427+2)|0);
 HEAP32[(($2426)>>2)]=$2428;
 label=510;break;
 case 510: 
 var $2430=$hc4;
 var $2431=(($2430+2)|0);
 $hc4=$2431;
 label=508;break;
 case 511: 
 var $2433=$this_hwm5;
 $save_hwm=$2433;
 var $2434=$len;
 var $2435=$code;
 var $2436=(($2435+$2434)|0);
 $code=$2436;
 label=512;break;
 case 512: 
 var $2438=$i;
 var $2439=((($2438)-(1))|0);
 $i=$2439;
 label=496;break;
 case 513: 
 label=514;break;
 case 514: 
 label=515;break;
 case 515: 
 var $2443=$bralink;
 var $2444=($2443|0)!=0;
 if($2444){label=516;break;}else{label=520;break;}
 case 516: 
 var $2446=$code;
 var $2447=$bralink;
 var $2448=$2446;
 var $2449=$2447;
 var $2450=((($2448)-($2449))|0);
 var $2451=((($2450)+(1))|0);
 $offset9=$2451;
 var $2452=$code;
 var $2453=$offset9;
 var $2454=(((-$2453))|0);
 var $2455=(($2452+$2454)|0);
 $bra=$2455;
 var $2456=$bra;
 var $2457=(($2456+1)|0);
 var $2458=HEAP8[($2457)];
 var $2459=($2458&255);
 var $2460=$2459<<8;
 var $2461=$bra;
 var $2462=(($2461+2)|0);
 var $2463=HEAP8[($2462)];
 var $2464=($2463&255);
 var $2465=$2460|$2464;
 $oldlinkoffset=$2465;
 var $2466=$oldlinkoffset;
 var $2467=($2466|0)==0;
 if($2467){label=517;break;}else{label=518;break;}
 case 517: 
 var $2475=0;label=519;break;
 case 518: 
 var $2470=$bralink;
 var $2471=$oldlinkoffset;
 var $2472=(((-$2471))|0);
 var $2473=(($2470+$2472)|0);
 var $2475=$2473;label=519;break;
 case 519: 
 var $2475;
 $bralink=$2475;
 var $2476=$code;
 var $2477=(($2476+1)|0);
 $code=$2477;
 HEAP8[($2476)]=120;
 var $2478=$offset9;
 var $2479=$2478>>8;
 var $2480=(($2479)&255);
 var $2481=$code;
 var $2482=(($2481)|0);
 HEAP8[($2482)]=$2480;
 var $2483=$offset9;
 var $2484=$2483&255;
 var $2485=(($2484)&255);
 var $2486=$code;
 var $2487=(($2486+1)|0);
 HEAP8[($2487)]=$2485;
 var $2488=$code;
 var $2489=(($2488+2)|0);
 $code=$2489;
 var $2490=$offset9;
 var $2491=$2490>>8;
 var $2492=(($2491)&255);
 var $2493=$bra;
 var $2494=(($2493+1)|0);
 HEAP8[($2494)]=$2492;
 var $2495=$offset9;
 var $2496=$2495&255;
 var $2497=(($2496)&255);
 var $2498=$bra;
 var $2499=(($2498+2)|0);
 HEAP8[($2499)]=$2497;
 label=515;break;
 case 520: 
 label=548;break;
 case 521: 
 var $2502=$code;
 var $2503=((($2502)-(1))|0);
 var $2504=((($2503)-(2))|0);
 $ketcode=$2504;
 var $2505=$ketcode;
 var $2506=$ketcode;
 var $2507=(($2506+1)|0);
 var $2508=HEAP8[($2507)];
 var $2509=($2508&255);
 var $2510=$2509<<8;
 var $2511=$ketcode;
 var $2512=(($2511+2)|0);
 var $2513=HEAP8[($2512)];
 var $2514=($2513&255);
 var $2515=$2510|$2514;
 var $2516=(((-$2515))|0);
 var $2517=(($2505+$2516)|0);
 $bracode=$2517;
 var $2518=$bracode;
 var $2519=HEAP8[($2518)];
 var $2520=($2519&255);
 var $2521=($2520|0)==129;
 if($2521){label=523;break;}else{label=522;break;}
 case 522: 
 var $2523=$bracode;
 var $2524=HEAP8[($2523)];
 var $2525=($2524&255);
 var $2526=($2525|0)==130;
 if($2526){label=523;break;}else{label=525;break;}
 case 523: 
 var $2528=$possessive_quantifier;
 var $2529=($2528|0)!=0;
 if($2529){label=524;break;}else{label=525;break;}
 case 524: 
 var $2531=$bracode;
 HEAP8[($2531)]=-125;
 label=525;break;
 case 525: 
 var $2533=$bracode;
 var $2534=HEAP8[($2533)];
 var $2535=($2534&255);
 var $2536=($2535|0)==129;
 if($2536){label=527;break;}else{label=526;break;}
 case 526: 
 var $2538=$bracode;
 var $2539=HEAP8[($2538)];
 var $2540=($2539&255);
 var $2541=($2540|0)==130;
 if($2541){label=527;break;}else{label=528;break;}
 case 527: 
 var $2543=$repeat_type;
 var $2544=((($2543)+(121))|0);
 var $2545=(($2544)&255);
 var $2546=$ketcode;
 HEAP8[($2546)]=$2545;
 label=547;break;
 case 528: 
 var $2548=$13;
 var $2549=($2548|0)==0;
 if($2549){label=529;break;}else{label=535;break;}
 case 529: 
 var $2551=$bracode;
 $scode=$2551;
 label=530;break;
 case 530: 
 var $2553=$scode;
 var $2554=$ketcode;
 var $2555=$utf;
 var $2556=$12;
 var $2557=_could_be_empty_branch($2553,$2554,$2555,$2556,0);
 var $2558=($2557|0)!=0;
 if($2558){label=531;break;}else{label=532;break;}
 case 531: 
 var $2560=$bracode;
 var $2561=HEAP8[($2560)];
 var $2562=($2561&255);
 var $2563=((($2562)+(5))|0);
 var $2564=(($2563)&255);
 HEAP8[($2560)]=$2564;
 label=534;break;
 case 532: 
 var $2566=$scode;
 var $2567=(($2566+1)|0);
 var $2568=HEAP8[($2567)];
 var $2569=($2568&255);
 var $2570=$2569<<8;
 var $2571=$scode;
 var $2572=(($2571+2)|0);
 var $2573=HEAP8[($2572)];
 var $2574=($2573&255);
 var $2575=$2570|$2574;
 var $2576=$scode;
 var $2577=(($2576+$2575)|0);
 $scode=$2577;
 label=533;break;
 case 533: 
 var $2579=$scode;
 var $2580=HEAP8[($2579)];
 var $2581=($2580&255);
 var $2582=($2581|0)==119;
 if($2582){label=530;break;}else{label=534;break;}
 case 534: 
 label=535;break;
 case 535: 
 var $2585=$possessive_quantifier;
 var $2586=($2585|0)!=0;
 if($2586){label=536;break;}else{label=545;break;}
 case 536: 
 var $2588=$bracode;
 var $2589=HEAP8[($2588)];
 var $2590=($2589&255);
 var $2591=($2590|0)==135;
 if($2591){label=538;break;}else{label=537;break;}
 case 537: 
 var $2593=$bracode;
 var $2594=HEAP8[($2593)];
 var $2595=($2594&255);
 var $2596=($2595|0)==140;
 if($2596){label=538;break;}else{label=539;break;}
 case 538: 
 var $2598=$code;
 var $2599=$bracode;
 var $2600=$2598;
 var $2601=$2599;
 var $2602=((($2600)-($2601))|0);
 $nlen=$2602;
 var $2603=$code;
 HEAP8[($2603)]=0;
 var $2604=$bracode;
 var $2605=$utf;
 var $2606=$12;
 var $2607=$save_hwm;
 _adjust_recurse($2604,3,$2605,$2606,$2607);
 var $2608=$bracode;
 var $2609=(($2608+1)|0);
 var $2610=(($2609+2)|0);
 var $2611=$bracode;
 var $2612=$nlen;
 _memmove($2610,$2611,$2612,1,0);
 var $2613=$code;
 var $2614=(($2613+3)|0);
 $code=$2614;
 var $2615=$nlen;
 var $2616=((($2615)+(3))|0);
 $nlen=$2616;
 var $2617=$bracode;
 HEAP8[($2617)]=-124;
 var $2618=$code;
 var $2619=(($2618+1)|0);
 $code=$2619;
 HEAP8[($2618)]=123;
 var $2620=$nlen;
 var $2621=$2620>>8;
 var $2622=(($2621)&255);
 var $2623=$code;
 var $2624=(($2623)|0);
 HEAP8[($2624)]=$2622;
 var $2625=$nlen;
 var $2626=$2625&255;
 var $2627=(($2626)&255);
 var $2628=$code;
 var $2629=(($2628+1)|0);
 HEAP8[($2629)]=$2627;
 var $2630=$code;
 var $2631=(($2630+2)|0);
 $code=$2631;
 var $2632=$nlen;
 var $2633=$2632>>8;
 var $2634=(($2633)&255);
 var $2635=$bracode;
 var $2636=(($2635+1)|0);
 HEAP8[($2636)]=$2634;
 var $2637=$nlen;
 var $2638=$2637&255;
 var $2639=(($2638)&255);
 var $2640=$bracode;
 var $2641=(($2640+2)|0);
 HEAP8[($2641)]=$2639;
 label=540;break;
 case 539: 
 var $2643=$bracode;
 var $2644=HEAP8[($2643)];
 var $2645=($2644&255);
 var $2646=((($2645)+(1))|0);
 var $2647=(($2646)&255);
 HEAP8[($2643)]=$2647;
 var $2648=$ketcode;
 HEAP8[($2648)]=123;
 label=540;break;
 case 540: 
 var $2650=$brazeroptr;
 var $2651=($2650|0)!=0;
 if($2651){label=541;break;}else{label=542;break;}
 case 541: 
 var $2653=$brazeroptr;
 HEAP8[($2653)]=-108;
 label=542;break;
 case 542: 
 var $2655=HEAP32[(($repeat_min)>>2)];
 var $2656=($2655|0)<2;
 if($2656){label=543;break;}else{label=544;break;}
 case 543: 
 $possessive_quantifier=0;
 label=544;break;
 case 544: 
 label=546;break;
 case 545: 
 var $2660=$repeat_type;
 var $2661=((($2660)+(121))|0);
 var $2662=(($2661)&255);
 var $2663=$ketcode;
 HEAP8[($2663)]=$2662;
 label=546;break;
 case 546: 
 label=547;break;
 case 547: 
 label=548;break;
 case 548: 
 label=552;break;
 case 549: 
 var $2668=$previous;
 var $2669=HEAP8[($2668)];
 var $2670=($2669&255);
 var $2671=($2670|0)==157;
 if($2671){label=550;break;}else{label=551;break;}
 case 550: 
 label=570;break;
 case 551: 
 var $2674=$5;
 HEAP32[(($2674)>>2)]=11;
 label=1120;break;
 case 552: 
 label=553;break;
 case 553: 
 label=554;break;
 case 554: 
 label=555;break;
 case 555: 
 var $2679=$possessive_quantifier;
 var $2680=($2679|0)!=0;
 if($2680){label=556;break;}else{label=569;break;}
 case 556: 
 var $2682=HEAP32[(($tempcode)>>2)];
 var $2683=HEAP8[($2682)];
 var $2684=($2683&255);
 switch(($2684|0)){case 93:{ label=557;break;}case 29:case 30:case 31:case 32:case 41:case 54:case 67:case 80:{ label=560;break;}case 110:case 111:{ label=561;break;}default:{label=562;break;}}break;
 case 557: 
 var $2686=HEAP32[(($tempcode)>>2)];
 var $2687=HEAP8[($2686)];
 var $2688=($2687&255);
 var $2689=((6760+$2688)|0);
 var $2690=HEAP8[($2689)];
 var $2691=($2690&255);
 var $2692=HEAP32[(($tempcode)>>2)];
 var $2693=(($2692+3)|0);
 var $2694=HEAP8[($2693)];
 var $2695=($2694&255);
 var $2696=($2695|0)==16;
 if($2696){var $2704=1;label=559;break;}else{label=558;break;}
 case 558: 
 var $2698=HEAP32[(($tempcode)>>2)];
 var $2699=(($2698+3)|0);
 var $2700=HEAP8[($2699)];
 var $2701=($2700&255);
 var $2702=($2701|0)==15;
 var $2704=$2702;label=559;break;
 case 559: 
 var $2704;
 var $2705=($2704?2:0);
 var $2706=((($2691)+($2705))|0);
 var $2707=HEAP32[(($tempcode)>>2)];
 var $2708=(($2707+$2706)|0);
 HEAP32[(($tempcode)>>2)]=$2708;
 label=562;break;
 case 560: 
 var $2710=HEAP32[(($tempcode)>>2)];
 var $2711=HEAP8[($2710)];
 var $2712=($2711&255);
 var $2713=((6760+$2712)|0);
 var $2714=HEAP8[($2713)];
 var $2715=($2714&255);
 var $2716=HEAP32[(($tempcode)>>2)];
 var $2717=(($2716+$2715)|0);
 HEAP32[(($tempcode)>>2)]=$2717;
 label=562;break;
 case 561: 
 var $2719=HEAP32[(($tempcode)>>2)];
 var $2720=(($2719+33)|0);
 HEAP32[(($tempcode)>>2)]=$2720;
 label=562;break;
 case 562: 
 var $2722=$code;
 var $2723=HEAP32[(($tempcode)>>2)];
 var $2724=$2722;
 var $2725=$2723;
 var $2726=((($2724)-($2725))|0);
 $len10=$2726;
 var $2727=$len10;
 var $2728=($2727|0)>0;
 if($2728){label=563;break;}else{label=568;break;}
 case 563: 
 var $2730=HEAP32[(($tempcode)>>2)];
 var $2731=HEAP8[($2730)];
 var $2732=($2731&255);
 $repcode=$2732;
 var $2733=$repcode;
 var $2734=($2733>>>0)<118;
 if($2734){label=564;break;}else{label=566;break;}
 case 564: 
 var $2736=$repcode;
 var $2737=((520+$2736)|0);
 var $2738=HEAP8[($2737)];
 var $2739=($2738&255);
 var $2740=($2739|0)>0;
 if($2740){label=565;break;}else{label=566;break;}
 case 565: 
 var $2742=$repcode;
 var $2743=((520+$2742)|0);
 var $2744=HEAP8[($2743)];
 var $2745=HEAP32[(($tempcode)>>2)];
 HEAP8[($2745)]=$2744;
 label=567;break;
 case 566: 
 var $2747=$code;
 HEAP8[($2747)]=0;
 var $2748=HEAP32[(($tempcode)>>2)];
 var $2749=$utf;
 var $2750=$12;
 var $2751=$save_hwm;
 _adjust_recurse($2748,3,$2749,$2750,$2751);
 var $2752=HEAP32[(($tempcode)>>2)];
 var $2753=(($2752+1)|0);
 var $2754=(($2753+2)|0);
 var $2755=HEAP32[(($tempcode)>>2)];
 var $2756=$len10;
 _memmove($2754,$2755,$2756,1,0);
 var $2757=$code;
 var $2758=(($2757+3)|0);
 $code=$2758;
 var $2759=$len10;
 var $2760=((($2759)+(3))|0);
 $len10=$2760;
 var $2761=HEAP32[(($tempcode)>>2)];
 var $2762=(($2761)|0);
 HEAP8[($2762)]=-127;
 var $2763=$code;
 var $2764=(($2763+1)|0);
 $code=$2764;
 HEAP8[($2763)]=120;
 var $2765=$len10;
 var $2766=$2765>>8;
 var $2767=(($2766)&255);
 var $2768=$code;
 var $2769=(($2768)|0);
 HEAP8[($2769)]=$2767;
 var $2770=$len10;
 var $2771=$2770&255;
 var $2772=(($2771)&255);
 var $2773=$code;
 var $2774=(($2773+1)|0);
 HEAP8[($2774)]=$2772;
 var $2775=$code;
 var $2776=(($2775+2)|0);
 $code=$2776;
 var $2777=$len10;
 var $2778=$2777>>8;
 var $2779=(($2778)&255);
 var $2780=HEAP32[(($tempcode)>>2)];
 var $2781=(($2780+1)|0);
 HEAP8[($2781)]=$2779;
 var $2782=$len10;
 var $2783=$2782&255;
 var $2784=(($2783)&255);
 var $2785=HEAP32[(($tempcode)>>2)];
 var $2786=(($2785+2)|0);
 HEAP8[($2786)]=$2784;
 label=567;break;
 case 567: 
 label=568;break;
 case 568: 
 label=569;break;
 case 569: 
 label=570;break;
 case 570: 
 $previous=0;
 var $2791=$reqvary;
 var $2792=$12;
 var $2793=(($2792+104)|0);
 var $2794=HEAP32[(($2793)>>2)];
 var $2795=$2794|$2791;
 HEAP32[(($2793)>>2)]=$2795;
 label=1118;break;
 case 571: 
 var $2797=$options;
 $newoptions=$2797;
 $skipbytes=0;
 $bravalue=133;
 var $2798=$12;
 var $2799=(($2798+32)|0);
 var $2800=HEAP32[(($2799)>>2)];
 $save_hwm=$2800;
 $reset_bracount=0;
 var $2801=HEAP32[(($ptr)>>2)];
 var $2802=(($2801+1)|0);
 HEAP32[(($ptr)>>2)]=$2802;
 var $2803=HEAP32[(($ptr)>>2)];
 var $2804=(($2803)|0);
 var $2805=HEAP8[($2804)];
 var $2806=($2805&255);
 var $2807=($2806|0)==42;
 if($2807){label=572;break;}else{label=619;break;}
 case 572: 
 var $2809=HEAP32[(($ptr)>>2)];
 var $2810=(($2809+1)|0);
 var $2811=HEAP8[($2810)];
 var $2812=($2811&255);
 var $2813=($2812|0)==58;
 if($2813){label=574;break;}else{label=573;break;}
 case 573: 
 var $2815=HEAP32[(($ptr)>>2)];
 var $2816=(($2815+1)|0);
 var $2817=HEAP8[($2816)];
 var $2818=($2817&255);
 var $2819=$12;
 var $2820=(($2819+12)|0);
 var $2821=HEAP32[(($2820)>>2)];
 var $2822=(($2821+$2818)|0);
 var $2823=HEAP8[($2822)];
 var $2824=($2823&255);
 var $2825=$2824&2;
 var $2826=($2825|0)!=0;
 if($2826){label=574;break;}else{label=619;break;}
 case 574: 
 $arglen=0;
 $vn=120;
 var $2828=HEAP32[(($ptr)>>2)];
 var $2829=(($2828+1)|0);
 $name=$2829;
 $arg=0;
 $previous=0;
 var $2830=HEAP32[(($ptr)>>2)];
 var $2831=(($2830+1)|0);
 HEAP32[(($ptr)>>2)]=$2831;
 label=575;break;
 case 575: 
 var $2833=HEAP32[(($ptr)>>2)];
 var $2834=HEAP8[($2833)];
 var $2835=($2834&255);
 var $2836=$12;
 var $2837=(($2836+12)|0);
 var $2838=HEAP32[(($2837)>>2)];
 var $2839=(($2838+$2835)|0);
 var $2840=HEAP8[($2839)];
 var $2841=($2840&255);
 var $2842=$2841&2;
 var $2843=($2842|0)!=0;
 if($2843){label=576;break;}else{label=577;break;}
 case 576: 
 var $2845=HEAP32[(($ptr)>>2)];
 var $2846=(($2845+1)|0);
 HEAP32[(($ptr)>>2)]=$2846;
 label=575;break;
 case 577: 
 var $2848=HEAP32[(($ptr)>>2)];
 var $2849=$name;
 var $2850=$2848;
 var $2851=$2849;
 var $2852=((($2850)-($2851))|0);
 $namelen=$2852;
 var $2853=HEAP32[(($ptr)>>2)];
 var $2854=HEAP8[($2853)];
 var $2855=($2854&255);
 var $2856=($2855|0)==58;
 if($2856){label=578;break;}else{label=586;break;}
 case 578: 
 var $2858=HEAP32[(($ptr)>>2)];
 var $2859=(($2858+1)|0);
 HEAP32[(($ptr)>>2)]=$2859;
 $arg=$2859;
 label=579;break;
 case 579: 
 var $2861=HEAP32[(($ptr)>>2)];
 var $2862=HEAP8[($2861)];
 var $2863=($2862&255);
 var $2864=($2863|0)!=0;
 if($2864){label=580;break;}else{var $2871=0;label=581;break;}
 case 580: 
 var $2866=HEAP32[(($ptr)>>2)];
 var $2867=HEAP8[($2866)];
 var $2868=($2867&255);
 var $2869=($2868|0)!=41;
 var $2871=$2869;label=581;break;
 case 581: 
 var $2871;
 if($2871){label=582;break;}else{label=583;break;}
 case 582: 
 var $2873=HEAP32[(($ptr)>>2)];
 var $2874=(($2873+1)|0);
 HEAP32[(($ptr)>>2)]=$2874;
 label=579;break;
 case 583: 
 var $2876=HEAP32[(($ptr)>>2)];
 var $2877=$arg;
 var $2878=$2876;
 var $2879=$2877;
 var $2880=((($2878)-($2879))|0);
 $arglen=$2880;
 var $2881=$arglen;
 var $2882=($2881>>>0)>255;
 if($2882){label=584;break;}else{label=585;break;}
 case 584: 
 var $2884=$5;
 HEAP32[(($2884)>>2)]=75;
 label=1120;break;
 case 585: 
 label=586;break;
 case 586: 
 var $2887=HEAP32[(($ptr)>>2)];
 var $2888=HEAP8[($2887)];
 var $2889=($2888&255);
 var $2890=($2889|0)!=41;
 if($2890){label=587;break;}else{label=588;break;}
 case 587: 
 var $2892=$5;
 HEAP32[(($2892)>>2)]=60;
 label=1120;break;
 case 588: 
 $i11=0;
 label=589;break;
 case 589: 
 var $2895=$i11;
 var $2896=($2895|0)<9;
 if($2896){label=590;break;}else{label=616;break;}
 case 590: 
 var $2898=$namelen;
 var $2899=$i11;
 var $2900=((8+((($2899)*(12))&-1))|0);
 var $2901=(($2900)|0);
 var $2902=HEAP32[(($2901)>>2)];
 var $2903=($2898|0)==($2902|0);
 if($2903){label=591;break;}else{label=614;break;}
 case 591: 
 var $2905=$name;
 var $2906=$vn;
 var $2907=$namelen;
 var $2908=_strncmp($2905,$2906,$2907);
 var $2909=($2908|0)==0;
 if($2909){label=592;break;}else{label=614;break;}
 case 592: 
 var $2911=$i11;
 var $2912=((8+((($2911)*(12))&-1))|0);
 var $2913=(($2912+4)|0);
 var $2914=HEAP32[(($2913)>>2)];
 var $2915=($2914|0)==158;
 if($2915){label=593;break;}else{label=602;break;}
 case 593: 
 var $2917=$arglen;
 var $2918=($2917|0)!=0;
 if($2918){label=594;break;}else{label=595;break;}
 case 594: 
 var $2920=$5;
 HEAP32[(($2920)>>2)]=59;
 label=1120;break;
 case 595: 
 var $2922=$12;
 var $2923=(($2922+108)|0);
 HEAP32[(($2923)>>2)]=1;
 var $2924=$12;
 var $2925=(($2924+36)|0);
 var $2926=HEAP32[(($2925)>>2)];
 $oc=$2926;
 label=596;break;
 case 596: 
 var $2928=$oc;
 var $2929=($2928|0)!=0;
 if($2929){label=597;break;}else{label=599;break;}
 case 597: 
 var $2931=$code;
 var $2932=(($2931+1)|0);
 $code=$2932;
 HEAP8[($2931)]=-96;
 var $2933=$oc;
 var $2934=(($2933+4)|0);
 var $2935=HEAP16[(($2934)>>1)];
 var $2936=($2935&65535);
 var $2937=$2936>>8;
 var $2938=(($2937)&255);
 var $2939=$code;
 var $2940=(($2939)|0);
 HEAP8[($2940)]=$2938;
 var $2941=$oc;
 var $2942=(($2941+4)|0);
 var $2943=HEAP16[(($2942)>>1)];
 var $2944=($2943&65535);
 var $2945=$2944&255;
 var $2946=(($2945)&255);
 var $2947=$code;
 var $2948=(($2947+1)|0);
 HEAP8[($2948)]=$2946;
 var $2949=$code;
 var $2950=(($2949+2)|0);
 $code=$2950;
 label=598;break;
 case 598: 
 var $2952=$oc;
 var $2953=(($2952)|0);
 var $2954=HEAP32[(($2953)>>2)];
 $oc=$2954;
 label=596;break;
 case 599: 
 var $2956=$12;
 var $2957=(($2956+92)|0);
 var $2958=HEAP32[(($2957)>>2)];
 var $2959=($2958|0)>0;
 var $2960=($2959?159:158);
 var $2961=(($2960)&255);
 var $2962=$code;
 var $2963=(($2962+1)|0);
 $code=$2963;
 HEAP8[($2962)]=$2961;
 var $2964=($2961&255);
 $setverb=$2964;
 var $2965=$firstcharflags;
 var $2966=($2965|0)==-2;
 if($2966){label=600;break;}else{label=601;break;}
 case 600: 
 $firstcharflags=-1;
 label=601;break;
 case 601: 
 label=610;break;
 case 602: 
 var $2970=$arglen;
 var $2971=($2970|0)==0;
 if($2971){label=603;break;}else{label=606;break;}
 case 603: 
 var $2973=$i11;
 var $2974=((8+((($2973)*(12))&-1))|0);
 var $2975=(($2974+4)|0);
 var $2976=HEAP32[(($2975)>>2)];
 var $2977=($2976|0)<0;
 if($2977){label=604;break;}else{label=605;break;}
 case 604: 
 var $2979=$5;
 HEAP32[(($2979)>>2)]=66;
 label=1120;break;
 case 605: 
 var $2981=$i11;
 var $2982=((8+((($2981)*(12))&-1))|0);
 var $2983=(($2982+4)|0);
 var $2984=HEAP32[(($2983)>>2)];
 var $2985=(($2984)&255);
 var $2986=$code;
 var $2987=(($2986+1)|0);
 $code=$2987;
 HEAP8[($2986)]=$2985;
 var $2988=($2985&255);
 $setverb=$2988;
 label=609;break;
 case 606: 
 var $2990=$i11;
 var $2991=((8+((($2990)*(12))&-1))|0);
 var $2992=(($2991+8)|0);
 var $2993=HEAP32[(($2992)>>2)];
 var $2994=($2993|0)<0;
 if($2994){label=607;break;}else{label=608;break;}
 case 607: 
 var $2996=$5;
 HEAP32[(($2996)>>2)]=59;
 label=1120;break;
 case 608: 
 var $2998=$i11;
 var $2999=((8+((($2998)*(12))&-1))|0);
 var $3000=(($2999+8)|0);
 var $3001=HEAP32[(($3000)>>2)];
 var $3002=(($3001)&255);
 var $3003=$code;
 var $3004=(($3003+1)|0);
 $code=$3004;
 HEAP8[($3003)]=$3002;
 var $3005=($3002&255);
 $setverb=$3005;
 var $3006=$arglen;
 var $3007=(($3006)&255);
 var $3008=$code;
 var $3009=(($3008+1)|0);
 $code=$3009;
 HEAP8[($3008)]=$3007;
 var $3010=$code;
 var $3011=$arg;
 var $3012=$arglen;
 assert($3012 % 1 === 0);(_memcpy($3010, $3011, $3012)|0);
 var $3013=$arglen;
 var $3014=$code;
 var $3015=(($3014+$3013)|0);
 $code=$3015;
 var $3016=$code;
 var $3017=(($3016+1)|0);
 $code=$3017;
 HEAP8[($3016)]=0;
 label=609;break;
 case 609: 
 label=610;break;
 case 610: 
 var $3020=$setverb;
 switch(($3020|0)){case 154:case 155:{ label=611;break;}case 150:case 151:case 152:case 153:{ label=612;break;}default:{label=613;break;}}break;
 case 611: 
 var $3022=$12;
 var $3023=(($3022+100)|0);
 var $3024=HEAP32[(($3023)>>2)];
 var $3025=$3024|4096;
 HEAP32[(($3023)>>2)]=$3025;
 label=613;break;
 case 612: 
 var $3027=$12;
 var $3028=(($3027+112)|0);
 HEAP32[(($3028)>>2)]=1;
 label=613;break;
 case 613: 
 label=616;break;
 case 614: 
 var $3031=$i11;
 var $3032=((8+((($3031)*(12))&-1))|0);
 var $3033=(($3032)|0);
 var $3034=HEAP32[(($3033)>>2)];
 var $3035=((($3034)+(1))|0);
 var $3036=$vn;
 var $3037=(($3036+$3035)|0);
 $vn=$3037;
 label=615;break;
 case 615: 
 var $3039=$i11;
 var $3040=((($3039)+(1))|0);
 $i11=$3040;
 label=589;break;
 case 616: 
 var $3042=$i11;
 var $3043=($3042|0)<9;
 if($3043){label=617;break;}else{label=618;break;}
 case 617: 
 label=1119;break;
 case 618: 
 var $3046=$5;
 HEAP32[(($3046)>>2)]=60;
 label=1120;break;
 case 619: 
 var $3048=HEAP32[(($ptr)>>2)];
 var $3049=HEAP8[($3048)];
 var $3050=($3049&255);
 var $3051=($3050|0)==63;
 if($3051){label=620;break;}else{label=958;break;}
 case 620: 
 var $3053=HEAP32[(($ptr)>>2)];
 var $3054=(($3053+1)|0);
 HEAP32[(($ptr)>>2)]=$3054;
 var $3055=HEAP8[($3054)];
 var $3056=($3055&255);
 switch(($3056|0)){case 35:{ label=621;break;}case 124:{ label=629;break;}case 58:{ label=630;break;}case 40:{ label=631;break;}case 61:{ label=738;break;}case 33:{ label=739;break;}case 60:{ label=747;break;}case 62:{ label=754;break;}case 67:{ label=755;break;}case 80:{ label=765;break;}case 39:{ label=773;break;}case 38:{ label=812;break;}case 82:{ label=881;break;}case 45:case 43:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{ label=882;break;}default:{label=933;break;}}break;
 case 621: 
 var $3058=HEAP32[(($ptr)>>2)];
 var $3059=(($3058+1)|0);
 HEAP32[(($ptr)>>2)]=$3059;
 label=622;break;
 case 622: 
 var $3061=HEAP32[(($ptr)>>2)];
 var $3062=HEAP8[($3061)];
 var $3063=($3062&255);
 var $3064=($3063|0)!=0;
 if($3064){label=623;break;}else{var $3071=0;label=624;break;}
 case 623: 
 var $3066=HEAP32[(($ptr)>>2)];
 var $3067=HEAP8[($3066)];
 var $3068=($3067&255);
 var $3069=($3068|0)!=41;
 var $3071=$3069;label=624;break;
 case 624: 
 var $3071;
 if($3071){label=625;break;}else{label=626;break;}
 case 625: 
 var $3073=HEAP32[(($ptr)>>2)];
 var $3074=(($3073+1)|0);
 HEAP32[(($ptr)>>2)]=$3074;
 label=622;break;
 case 626: 
 var $3076=HEAP32[(($ptr)>>2)];
 var $3077=HEAP8[($3076)];
 var $3078=($3077&255);
 var $3079=($3078|0)==0;
 if($3079){label=627;break;}else{label=628;break;}
 case 627: 
 var $3081=$5;
 HEAP32[(($3081)>>2)]=18;
 label=1120;break;
 case 628: 
 label=1119;break;
 case 629: 
 $reset_bracount=1;
 label=630;break;
 case 630: 
 $bravalue=131;
 var $3085=HEAP32[(($ptr)>>2)];
 var $3086=(($3085+1)|0);
 HEAP32[(($ptr)>>2)]=$3086;
 label=957;break;
 case 631: 
 $bravalue=135;
 var $3088=HEAP32[(($ptr)>>2)];
 HEAP32[(($tempptr)>>2)]=$3088;
 var $3089=HEAP32[(($ptr)>>2)];
 var $3090=(($3089+1)|0);
 var $3091=HEAP8[($3090)];
 var $3092=($3091&255);
 var $3093=($3092|0)==63;
 if($3093){label=632;break;}else{label=642;break;}
 case 632: 
 var $3095=HEAP32[(($ptr)>>2)];
 var $3096=(($3095+2)|0);
 var $3097=HEAP8[($3096)];
 var $3098=($3097&255);
 var $3099=($3098|0)==67;
 if($3099){label=633;break;}else{label=642;break;}
 case 633: 
 $i12=3;
 label=634;break;
 case 634: 
 var $3102=$i12;
 var $3103=HEAP32[(($ptr)>>2)];
 var $3104=(($3103+$3102)|0);
 var $3105=HEAP8[($3104)];
 var $3106=($3105&255);
 var $3107=($3106|0)>=48;
 if($3107){label=635;break;}else{label=636;break;}
 case 635: 
 var $3109=$i12;
 var $3110=HEAP32[(($ptr)>>2)];
 var $3111=(($3110+$3109)|0);
 var $3112=HEAP8[($3111)];
 var $3113=($3112&255);
 var $3114=($3113|0)<=57;
 if($3114){label=637;break;}else{label=636;break;}
 case 636: 
 label=639;break;
 case 637: 
 label=638;break;
 case 638: 
 var $3118=$i12;
 var $3119=((($3118)+(1))|0);
 $i12=$3119;
 label=634;break;
 case 639: 
 var $3121=$i12;
 var $3122=HEAP32[(($ptr)>>2)];
 var $3123=(($3122+$3121)|0);
 var $3124=HEAP8[($3123)];
 var $3125=($3124&255);
 var $3126=($3125|0)==41;
 if($3126){label=640;break;}else{label=641;break;}
 case 640: 
 var $3128=$i12;
 var $3129=((($3128)+(1))|0);
 var $3130=HEAP32[(($tempptr)>>2)];
 var $3131=(($3130+$3129)|0);
 HEAP32[(($tempptr)>>2)]=$3131;
 label=641;break;
 case 641: 
 label=642;break;
 case 642: 
 var $3134=HEAP32[(($tempptr)>>2)];
 var $3135=(($3134+1)|0);
 var $3136=HEAP8[($3135)];
 var $3137=($3136&255);
 var $3138=($3137|0)==63;
 if($3138){label=643;break;}else{label=647;break;}
 case 643: 
 var $3140=HEAP32[(($tempptr)>>2)];
 var $3141=(($3140+2)|0);
 var $3142=HEAP8[($3141)];
 var $3143=($3142&255);
 var $3144=($3143|0)==61;
 if($3144){label=646;break;}else{label=644;break;}
 case 644: 
 var $3146=HEAP32[(($tempptr)>>2)];
 var $3147=(($3146+2)|0);
 var $3148=HEAP8[($3147)];
 var $3149=($3148&255);
 var $3150=($3149|0)==33;
 if($3150){label=646;break;}else{label=645;break;}
 case 645: 
 var $3152=HEAP32[(($tempptr)>>2)];
 var $3153=(($3152+2)|0);
 var $3154=HEAP8[($3153)];
 var $3155=($3154&255);
 var $3156=($3155|0)==60;
 if($3156){label=646;break;}else{label=647;break;}
 case 646: 
 label=957;break;
 case 647: 
 var $3159=$code;
 var $3160=(($3159+3)|0);
 HEAP8[($3160)]=-115;
 $skipbytes=3;
 $refsign=-1;
 $namelen13=-1;
 $name14=0;
 $recno=0;
 var $3161=HEAP32[(($ptr)>>2)];
 var $3162=(($3161+1)|0);
 HEAP32[(($ptr)>>2)]=$3162;
 var $3163=HEAP32[(($ptr)>>2)];
 var $3164=HEAP8[($3163)];
 var $3165=($3164&255);
 var $3166=($3165|0)==82;
 if($3166){label=648;break;}else{label=650;break;}
 case 648: 
 var $3168=HEAP32[(($ptr)>>2)];
 var $3169=(($3168+1)|0);
 var $3170=HEAP8[($3169)];
 var $3171=($3170&255);
 var $3172=($3171|0)==38;
 if($3172){label=649;break;}else{label=650;break;}
 case 649: 
 $terminator=-1;
 var $3174=HEAP32[(($ptr)>>2)];
 var $3175=(($3174+2)|0);
 HEAP32[(($ptr)>>2)]=$3175;
 var $3176=$code;
 var $3177=(($3176+3)|0);
 HEAP8[($3177)]=-113;
 label=664;break;
 case 650: 
 var $3179=HEAP32[(($ptr)>>2)];
 var $3180=HEAP8[($3179)];
 var $3181=($3180&255);
 var $3182=($3181|0)==60;
 if($3182){label=651;break;}else{label=652;break;}
 case 651: 
 $terminator=62;
 var $3184=HEAP32[(($ptr)>>2)];
 var $3185=(($3184+1)|0);
 HEAP32[(($ptr)>>2)]=$3185;
 label=663;break;
 case 652: 
 var $3187=HEAP32[(($ptr)>>2)];
 var $3188=HEAP8[($3187)];
 var $3189=($3188&255);
 var $3190=($3189|0)==39;
 if($3190){label=653;break;}else{label=654;break;}
 case 653: 
 $terminator=39;
 var $3192=HEAP32[(($ptr)>>2)];
 var $3193=(($3192+1)|0);
 HEAP32[(($ptr)>>2)]=$3193;
 label=662;break;
 case 654: 
 $terminator=0;
 var $3195=HEAP32[(($ptr)>>2)];
 var $3196=HEAP8[($3195)];
 var $3197=($3196&255);
 var $3198=($3197|0)==45;
 if($3198){label=656;break;}else{label=655;break;}
 case 655: 
 var $3200=HEAP32[(($ptr)>>2)];
 var $3201=HEAP8[($3200)];
 var $3202=($3201&255);
 var $3203=($3202|0)==43;
 if($3203){label=656;break;}else{label=657;break;}
 case 656: 
 var $3205=HEAP32[(($ptr)>>2)];
 var $3206=(($3205+1)|0);
 HEAP32[(($ptr)>>2)]=$3206;
 var $3207=HEAP8[($3205)];
 var $3208=($3207&255);
 $refsign=$3208;
 label=661;break;
 case 657: 
 var $3210=HEAP32[(($ptr)>>2)];
 var $3211=HEAP8[($3210)];
 var $3212=($3211&255);
 var $3213=($3212|0)>=48;
 if($3213){label=658;break;}else{label=660;break;}
 case 658: 
 var $3215=HEAP32[(($ptr)>>2)];
 var $3216=HEAP8[($3215)];
 var $3217=($3216&255);
 var $3218=($3217|0)<=57;
 if($3218){label=659;break;}else{label=660;break;}
 case 659: 
 $refsign=0;
 label=660;break;
 case 660: 
 label=661;break;
 case 661: 
 label=662;break;
 case 662: 
 label=663;break;
 case 663: 
 label=664;break;
 case 664: 
 var $3225=$refsign;
 var $3226=($3225|0)>=0;
 if($3226){label=665;break;}else{label=671;break;}
 case 665: 
 label=666;break;
 case 666: 
 var $3229=HEAP32[(($ptr)>>2)];
 var $3230=HEAP8[($3229)];
 var $3231=($3230&255);
 var $3232=($3231|0)>=48;
 if($3232){label=667;break;}else{var $3239=0;label=668;break;}
 case 667: 
 var $3234=HEAP32[(($ptr)>>2)];
 var $3235=HEAP8[($3234)];
 var $3236=($3235&255);
 var $3237=($3236|0)<=57;
 var $3239=$3237;label=668;break;
 case 668: 
 var $3239;
 if($3239){label=669;break;}else{label=670;break;}
 case 669: 
 var $3241=$recno;
 var $3242=((($3241)*(10))&-1);
 var $3243=HEAP32[(($ptr)>>2)];
 var $3244=HEAP8[($3243)];
 var $3245=($3244&255);
 var $3246=((($3245)-(48))|0);
 var $3247=((($3242)+($3246))|0);
 $recno=$3247;
 var $3248=HEAP32[(($ptr)>>2)];
 var $3249=(($3248+1)|0);
 HEAP32[(($ptr)>>2)]=$3249;
 label=666;break;
 case 670: 
 label=682;break;
 case 671: 
 var $3252=HEAP32[(($ptr)>>2)];
 var $3253=HEAP8[($3252)];
 var $3254=($3253&255);
 var $3255=($3254|0)>=48;
 if($3255){label=672;break;}else{label=674;break;}
 case 672: 
 var $3257=HEAP32[(($ptr)>>2)];
 var $3258=HEAP8[($3257)];
 var $3259=($3258&255);
 var $3260=($3259|0)<=57;
 if($3260){label=673;break;}else{label=674;break;}
 case 673: 
 var $3262=$5;
 HEAP32[(($3262)>>2)]=84;
 label=1120;break;
 case 674: 
 var $3264=HEAP32[(($ptr)>>2)];
 var $3265=HEAP8[($3264)];
 var $3266=($3265&255);
 var $3267=$12;
 var $3268=(($3267+12)|0);
 var $3269=HEAP32[(($3268)>>2)];
 var $3270=(($3269+$3266)|0);
 var $3271=HEAP8[($3270)];
 var $3272=($3271&255);
 var $3273=$3272&16;
 var $3274=($3273|0)==0;
 if($3274){label=675;break;}else{label=676;break;}
 case 675: 
 var $3276=$5;
 HEAP32[(($3276)>>2)]=28;
 label=1120;break;
 case 676: 
 var $3278=HEAP32[(($ptr)>>2)];
 var $3279=(($3278+1)|0);
 HEAP32[(($ptr)>>2)]=$3279;
 $name14=$3278;
 label=677;break;
 case 677: 
 var $3281=HEAP32[(($ptr)>>2)];
 var $3282=HEAP8[($3281)];
 var $3283=($3282&255);
 var $3284=$12;
 var $3285=(($3284+12)|0);
 var $3286=HEAP32[(($3285)>>2)];
 var $3287=(($3286+$3283)|0);
 var $3288=HEAP8[($3287)];
 var $3289=($3288&255);
 var $3290=$3289&16;
 var $3291=($3290|0)!=0;
 if($3291){label=678;break;}else{label=679;break;}
 case 678: 
 var $3293=HEAP32[(($ptr)>>2)];
 var $3294=(($3293+1)|0);
 HEAP32[(($ptr)>>2)]=$3294;
 label=677;break;
 case 679: 
 var $3296=HEAP32[(($ptr)>>2)];
 var $3297=$name14;
 var $3298=$3296;
 var $3299=$3297;
 var $3300=((($3298)-($3299))|0);
 $namelen13=$3300;
 var $3301=$13;
 var $3302=($3301|0)!=0;
 if($3302){label=680;break;}else{label=681;break;}
 case 680: 
 var $3304=$13;
 var $3305=HEAP32[(($3304)>>2)];
 var $3306=((($3305)+(2))|0);
 HEAP32[(($3304)>>2)]=$3306;
 label=681;break;
 case 681: 
 label=682;break;
 case 682: 
 var $3309=$terminator;
 var $3310=($3309|0)>0;
 if($3310){label=683;break;}else{label=684;break;}
 case 683: 
 var $3312=HEAP32[(($ptr)>>2)];
 var $3313=(($3312+1)|0);
 HEAP32[(($ptr)>>2)]=$3313;
 var $3314=HEAP8[($3312)];
 var $3315=($3314&255);
 var $3316=$terminator;
 var $3317=(($3316)&255);
 var $3318=($3317&255);
 var $3319=($3315|0)!=($3318|0);
 if($3319){label=685;break;}else{label=684;break;}
 case 684: 
 var $3321=HEAP32[(($ptr)>>2)];
 var $3322=(($3321+1)|0);
 HEAP32[(($ptr)>>2)]=$3322;
 var $3323=HEAP8[($3321)];
 var $3324=($3323&255);
 var $3325=($3324|0)!=41;
 if($3325){label=685;break;}else{label=686;break;}
 case 685: 
 var $3327=HEAP32[(($ptr)>>2)];
 var $3328=((($3327)-(1))|0);
 HEAP32[(($ptr)>>2)]=$3328;
 var $3329=$5;
 HEAP32[(($3329)>>2)]=26;
 label=1120;break;
 case 686: 
 var $3331=$13;
 var $3332=($3331|0)!=0;
 if($3332){label=687;break;}else{label=688;break;}
 case 687: 
 label=957;break;
 case 688: 
 var $3335=$refsign;
 var $3336=($3335|0)>=0;
 if($3336){label=689;break;}else{label=700;break;}
 case 689: 
 var $3338=$recno;
 var $3339=($3338|0)<=0;
 if($3339){label=690;break;}else{label=691;break;}
 case 690: 
 var $3341=$5;
 HEAP32[(($3341)>>2)]=35;
 label=1120;break;
 case 691: 
 var $3343=$refsign;
 var $3344=($3343|0)!=0;
 if($3344){label=692;break;}else{label=696;break;}
 case 692: 
 var $3346=$refsign;
 var $3347=($3346|0)==45;
 if($3347){label=693;break;}else{label=694;break;}
 case 693: 
 var $3349=$12;
 var $3350=(($3349+64)|0);
 var $3351=HEAP32[(($3350)>>2)];
 var $3352=$recno;
 var $3353=((($3351)-($3352))|0);
 var $3354=((($3353)+(1))|0);
 var $3362=$3354;label=695;break;
 case 694: 
 var $3356=$recno;
 var $3357=$12;
 var $3358=(($3357+64)|0);
 var $3359=HEAP32[(($3358)>>2)];
 var $3360=((($3356)+($3359))|0);
 var $3362=$3360;label=695;break;
 case 695: 
 var $3362;
 $recno=$3362;
 label=696;break;
 case 696: 
 var $3364=$recno;
 var $3365=($3364|0)<=0;
 if($3365){label=698;break;}else{label=697;break;}
 case 697: 
 var $3367=$recno;
 var $3368=$12;
 var $3369=(($3368+68)|0);
 var $3370=HEAP32[(($3369)>>2)];
 var $3371=($3367|0)>($3370|0);
 if($3371){label=698;break;}else{label=699;break;}
 case 698: 
 var $3373=$5;
 HEAP32[(($3373)>>2)]=15;
 label=1120;break;
 case 699: 
 var $3375=$recno;
 var $3376=$3375>>8;
 var $3377=(($3376)&255);
 var $3378=$code;
 var $3379=(($3378+4)|0);
 HEAP8[($3379)]=$3377;
 var $3380=$recno;
 var $3381=$3380&255;
 var $3382=(($3381)&255);
 var $3383=$code;
 var $3384=(($3383+5)|0);
 HEAP8[($3384)]=$3382;
 label=957;break;
 case 700: 
 var $3386=$12;
 var $3387=(($3386+44)|0);
 var $3388=HEAP32[(($3387)>>2)];
 $slot=$3388;
 $i12=0;
 label=701;break;
 case 701: 
 var $3390=$i12;
 var $3391=$12;
 var $3392=(($3391+48)|0);
 var $3393=HEAP32[(($3392)>>2)];
 var $3394=($3390|0)<($3393|0);
 if($3394){label=702;break;}else{label=706;break;}
 case 702: 
 var $3396=$name14;
 var $3397=$slot;
 var $3398=(($3397+2)|0);
 var $3399=$namelen13;
 var $3400=_strncmp($3396,$3398,$3399);
 var $3401=($3400|0)==0;
 if($3401){label=703;break;}else{label=704;break;}
 case 703: 
 label=706;break;
 case 704: 
 var $3404=$12;
 var $3405=(($3404+52)|0);
 var $3406=HEAP32[(($3405)>>2)];
 var $3407=$slot;
 var $3408=(($3407+$3406)|0);
 $slot=$3408;
 label=705;break;
 case 705: 
 var $3410=$i12;
 var $3411=((($3410)+(1))|0);
 $i12=$3411;
 label=701;break;
 case 706: 
 var $3413=$i12;
 var $3414=$12;
 var $3415=(($3414+48)|0);
 var $3416=HEAP32[(($3415)>>2)];
 var $3417=($3413|0)<($3416|0);
 if($3417){label=707;break;}else{label=717;break;}
 case 707: 
 var $3419=$i12;
 var $3420=((($3419)+(1))|0);
 $i12=$3420;
 $offset15=$3419;
 $count=1;
 var $3421=$slot;
 var $3422=(($3421)|0);
 var $3423=HEAP8[($3422)];
 var $3424=($3423&255);
 var $3425=$3424<<8;
 var $3426=$slot;
 var $3427=(($3426+1)|0);
 var $3428=HEAP8[($3427)];
 var $3429=($3428&255);
 var $3430=$3425|$3429;
 $recno=$3430;
 label=708;break;
 case 708: 
 var $3432=$i12;
 var $3433=$12;
 var $3434=(($3433+48)|0);
 var $3435=HEAP32[(($3434)>>2)];
 var $3436=($3432|0)<($3435|0);
 if($3436){label=709;break;}else{label=713;break;}
 case 709: 
 var $3438=$12;
 var $3439=(($3438+52)|0);
 var $3440=HEAP32[(($3439)>>2)];
 var $3441=$slot;
 var $3442=(($3441+$3440)|0);
 $slot=$3442;
 var $3443=$name14;
 var $3444=$slot;
 var $3445=(($3444+2)|0);
 var $3446=$namelen13;
 var $3447=_strncmp($3443,$3445,$3446);
 var $3448=($3447|0)!=0;
 if($3448){label=710;break;}else{label=711;break;}
 case 710: 
 label=713;break;
 case 711: 
 var $3451=$count;
 var $3452=((($3451)+(1))|0);
 $count=$3452;
 label=712;break;
 case 712: 
 var $3454=$i12;
 var $3455=((($3454)+(1))|0);
 $i12=$3455;
 label=708;break;
 case 713: 
 var $3457=$count;
 var $3458=($3457|0)>1;
 if($3458){label=714;break;}else{label=715;break;}
 case 714: 
 var $3460=$offset15;
 var $3461=$3460>>8;
 var $3462=(($3461)&255);
 var $3463=$code;
 var $3464=(($3463+4)|0);
 HEAP8[($3464)]=$3462;
 var $3465=$offset15;
 var $3466=$3465&255;
 var $3467=(($3466)&255);
 var $3468=$code;
 var $3469=(($3468+5)|0);
 HEAP8[($3469)]=$3467;
 var $3470=$count;
 var $3471=$3470>>8;
 var $3472=(($3471)&255);
 var $3473=$code;
 var $3474=(($3473+6)|0);
 HEAP8[($3474)]=$3472;
 var $3475=$count;
 var $3476=$3475&255;
 var $3477=(($3476)&255);
 var $3478=$code;
 var $3479=(($3478+7)|0);
 HEAP8[($3479)]=$3477;
 var $3480=$skipbytes;
 var $3481=((($3480)+(2))|0);
 $skipbytes=$3481;
 var $3482=$code;
 var $3483=(($3482+3)|0);
 var $3484=HEAP8[($3483)];
 var $3485=((($3484)+(1))&255);
 HEAP8[($3483)]=$3485;
 label=716;break;
 case 715: 
 var $3487=$recno;
 var $3488=$3487>>8;
 var $3489=(($3488)&255);
 var $3490=$code;
 var $3491=(($3490+4)|0);
 HEAP8[($3491)]=$3489;
 var $3492=$recno;
 var $3493=$3492&255;
 var $3494=(($3493)&255);
 var $3495=$code;
 var $3496=(($3495+5)|0);
 HEAP8[($3496)]=$3494;
 label=716;break;
 case 716: 
 label=737;break;
 case 717: 
 var $3499=$terminator;
 var $3500=($3499|0)!=0;
 if($3500){label=718;break;}else{label=719;break;}
 case 718: 
 var $3502=$5;
 HEAP32[(($3502)>>2)]=15;
 label=1120;break;
 case 719: 
 var $3504=$name14;
 var $3505=HEAP8[($3504)];
 var $3506=($3505&255);
 var $3507=($3506|0)==82;
 if($3507){label=720;break;}else{label=730;break;}
 case 720: 
 $recno=0;
 $i12=1;
 label=721;break;
 case 721: 
 var $3510=$i12;
 var $3511=$namelen13;
 var $3512=($3510|0)<($3511|0);
 if($3512){label=722;break;}else{label=727;break;}
 case 722: 
 var $3514=$i12;
 var $3515=$name14;
 var $3516=(($3515+$3514)|0);
 var $3517=HEAP8[($3516)];
 var $3518=($3517&255);
 var $3519=($3518|0)>=48;
 if($3519){label=723;break;}else{label=724;break;}
 case 723: 
 var $3521=$i12;
 var $3522=$name14;
 var $3523=(($3522+$3521)|0);
 var $3524=HEAP8[($3523)];
 var $3525=($3524&255);
 var $3526=($3525|0)<=57;
 if($3526){label=725;break;}else{label=724;break;}
 case 724: 
 var $3528=$5;
 HEAP32[(($3528)>>2)]=15;
 label=1120;break;
 case 725: 
 var $3530=$recno;
 var $3531=((($3530)*(10))&-1);
 var $3532=$i12;
 var $3533=$name14;
 var $3534=(($3533+$3532)|0);
 var $3535=HEAP8[($3534)];
 var $3536=($3535&255);
 var $3537=((($3531)+($3536))|0);
 var $3538=((($3537)-(48))|0);
 $recno=$3538;
 label=726;break;
 case 726: 
 var $3540=$i12;
 var $3541=((($3540)+(1))|0);
 $i12=$3541;
 label=721;break;
 case 727: 
 var $3543=$recno;
 var $3544=($3543|0)==0;
 if($3544){label=728;break;}else{label=729;break;}
 case 728: 
 $recno=65535;
 label=729;break;
 case 729: 
 var $3547=$code;
 var $3548=(($3547+3)|0);
 HEAP8[($3548)]=-113;
 var $3549=$recno;
 var $3550=$3549>>8;
 var $3551=(($3550)&255);
 var $3552=$code;
 var $3553=(($3552+4)|0);
 HEAP8[($3553)]=$3551;
 var $3554=$recno;
 var $3555=$3554&255;
 var $3556=(($3555)&255);
 var $3557=$code;
 var $3558=(($3557+5)|0);
 HEAP8[($3558)]=$3556;
 label=735;break;
 case 730: 
 var $3560=$namelen13;
 var $3561=($3560|0)==6;
 if($3561){label=731;break;}else{label=733;break;}
 case 731: 
 var $3563=$name14;
 var $3564=_strncmp($3563,5296,6);
 var $3565=($3564|0)==0;
 if($3565){label=732;break;}else{label=733;break;}
 case 732: 
 var $3567=$code;
 var $3568=(($3567+3)|0);
 HEAP8[($3568)]=-111;
 $skipbytes=1;
 label=734;break;
 case 733: 
 var $3570=$5;
 HEAP32[(($3570)>>2)]=15;
 label=1120;break;
 case 734: 
 label=735;break;
 case 735: 
 label=736;break;
 case 736: 
 label=737;break;
 case 737: 
 label=957;break;
 case 738: 
 $bravalue=125;
 var $3576=$12;
 var $3577=(($3576+92)|0);
 var $3578=HEAP32[(($3577)>>2)];
 var $3579=((($3578)+(1))|0);
 HEAP32[(($3577)>>2)]=$3579;
 var $3580=HEAP32[(($ptr)>>2)];
 var $3581=(($3580+1)|0);
 HEAP32[(($ptr)>>2)]=$3581;
 label=957;break;
 case 739: 
 var $3583=HEAP32[(($ptr)>>2)];
 var $3584=(($3583+1)|0);
 HEAP32[(($ptr)>>2)]=$3584;
 var $3585=HEAP32[(($ptr)>>2)];
 var $3586=HEAP8[($3585)];
 var $3587=($3586&255);
 var $3588=($3587|0)==41;
 if($3588){label=740;break;}else{label=746;break;}
 case 740: 
 var $3590=HEAP32[(($ptr)>>2)];
 var $3591=(($3590+1)|0);
 var $3592=HEAP8[($3591)];
 var $3593=($3592&255);
 var $3594=($3593|0)!=42;
 if($3594){label=741;break;}else{label=746;break;}
 case 741: 
 var $3596=HEAP32[(($ptr)>>2)];
 var $3597=(($3596+1)|0);
 var $3598=HEAP8[($3597)];
 var $3599=($3598&255);
 var $3600=($3599|0)!=43;
 if($3600){label=742;break;}else{label=746;break;}
 case 742: 
 var $3602=HEAP32[(($ptr)>>2)];
 var $3603=(($3602+1)|0);
 var $3604=HEAP8[($3603)];
 var $3605=($3604&255);
 var $3606=($3605|0)!=63;
 if($3606){label=743;break;}else{label=746;break;}
 case 743: 
 var $3608=HEAP32[(($ptr)>>2)];
 var $3609=(($3608+1)|0);
 var $3610=HEAP8[($3609)];
 var $3611=($3610&255);
 var $3612=($3611|0)!=123;
 if($3612){label=745;break;}else{label=744;break;}
 case 744: 
 var $3614=HEAP32[(($ptr)>>2)];
 var $3615=(($3614+2)|0);
 var $3616=_is_counted_repeat($3615);
 var $3617=($3616|0)!=0;
 if($3617){label=746;break;}else{label=745;break;}
 case 745: 
 var $3619=$code;
 var $3620=(($3619+1)|0);
 $code=$3620;
 HEAP8[($3619)]=-99;
 $previous=0;
 label=1119;break;
 case 746: 
 $bravalue=126;
 var $3622=$12;
 var $3623=(($3622+92)|0);
 var $3624=HEAP32[(($3623)>>2)];
 var $3625=((($3624)+(1))|0);
 HEAP32[(($3623)>>2)]=$3625;
 label=957;break;
 case 747: 
 var $3627=HEAP32[(($ptr)>>2)];
 var $3628=(($3627+1)|0);
 var $3629=HEAP8[($3628)];
 var $3630=($3629&255);
 if(($3630|0)==61){ label=748;break;}else if(($3630|0)==33){ label=749;break;}else{label=750;break;}
 case 748: 
 $bravalue=127;
 var $3632=$12;
 var $3633=(($3632+92)|0);
 var $3634=HEAP32[(($3633)>>2)];
 var $3635=((($3634)+(1))|0);
 HEAP32[(($3633)>>2)]=$3635;
 var $3636=HEAP32[(($ptr)>>2)];
 var $3637=(($3636+2)|0);
 HEAP32[(($ptr)>>2)]=$3637;
 label=753;break;
 case 749: 
 $bravalue=128;
 var $3639=$12;
 var $3640=(($3639+92)|0);
 var $3641=HEAP32[(($3640)>>2)];
 var $3642=((($3641)+(1))|0);
 HEAP32[(($3640)>>2)]=$3642;
 var $3643=HEAP32[(($ptr)>>2)];
 var $3644=(($3643+2)|0);
 HEAP32[(($ptr)>>2)]=$3644;
 label=753;break;
 case 750: 
 var $3646=HEAP32[(($ptr)>>2)];
 var $3647=(($3646+1)|0);
 var $3648=HEAP8[($3647)];
 var $3649=($3648&255);
 var $3650=$12;
 var $3651=(($3650+12)|0);
 var $3652=HEAP32[(($3651)>>2)];
 var $3653=(($3652+$3649)|0);
 var $3654=HEAP8[($3653)];
 var $3655=($3654&255);
 var $3656=$3655&16;
 var $3657=($3656|0)!=0;
 if($3657){label=751;break;}else{label=752;break;}
 case 751: 
 label=772;break;
 case 752: 
 var $3660=HEAP32[(($ptr)>>2)];
 var $3661=(($3660+1)|0);
 HEAP32[(($ptr)>>2)]=$3661;
 var $3662=$5;
 HEAP32[(($3662)>>2)]=24;
 label=1120;break;
 case 753: 
 label=957;break;
 case 754: 
 $bravalue=129;
 var $3665=HEAP32[(($ptr)>>2)];
 var $3666=(($3665+1)|0);
 HEAP32[(($ptr)>>2)]=$3666;
 label=957;break;
 case 755: 
 var $3668=$code;
 $previous_callout=$3668;
 $after_manual_callout=1;
 var $3669=$code;
 var $3670=(($3669+1)|0);
 $code=$3670;
 HEAP8[($3669)]=118;
 $n=0;
 var $3671=HEAP32[(($ptr)>>2)];
 var $3672=(($3671+1)|0);
 HEAP32[(($ptr)>>2)]=$3672;
 label=756;break;
 case 756: 
 var $3674=HEAP32[(($ptr)>>2)];
 var $3675=HEAP8[($3674)];
 var $3676=($3675&255);
 var $3677=($3676|0)>=48;
 if($3677){label=757;break;}else{var $3684=0;label=758;break;}
 case 757: 
 var $3679=HEAP32[(($ptr)>>2)];
 var $3680=HEAP8[($3679)];
 var $3681=($3680&255);
 var $3682=($3681|0)<=57;
 var $3684=$3682;label=758;break;
 case 758: 
 var $3684;
 if($3684){label=759;break;}else{label=760;break;}
 case 759: 
 var $3686=$n;
 var $3687=((($3686)*(10))&-1);
 var $3688=HEAP32[(($ptr)>>2)];
 var $3689=(($3688+1)|0);
 HEAP32[(($ptr)>>2)]=$3689;
 var $3690=HEAP8[($3688)];
 var $3691=($3690&255);
 var $3692=((($3687)+($3691))|0);
 var $3693=((($3692)-(48))|0);
 $n=$3693;
 label=756;break;
 case 760: 
 var $3695=HEAP32[(($ptr)>>2)];
 var $3696=HEAP8[($3695)];
 var $3697=($3696&255);
 var $3698=($3697|0)!=41;
 if($3698){label=761;break;}else{label=762;break;}
 case 761: 
 var $3700=$5;
 HEAP32[(($3700)>>2)]=39;
 label=1120;break;
 case 762: 
 var $3702=$n;
 var $3703=($3702|0)>255;
 if($3703){label=763;break;}else{label=764;break;}
 case 763: 
 var $3705=$5;
 HEAP32[(($3705)>>2)]=38;
 label=1120;break;
 case 764: 
 var $3707=$n;
 var $3708=(($3707)&255);
 var $3709=$code;
 var $3710=(($3709+1)|0);
 $code=$3710;
 HEAP8[($3709)]=$3708;
 var $3711=HEAP32[(($ptr)>>2)];
 var $3712=$12;
 var $3713=(($3712+24)|0);
 var $3714=HEAP32[(($3713)>>2)];
 var $3715=$3711;
 var $3716=$3714;
 var $3717=((($3715)-($3716))|0);
 var $3718=((($3717)+(1))|0);
 var $3719=$3718>>8;
 var $3720=(($3719)&255);
 var $3721=$code;
 var $3722=(($3721)|0);
 HEAP8[($3722)]=$3720;
 var $3723=HEAP32[(($ptr)>>2)];
 var $3724=$12;
 var $3725=(($3724+24)|0);
 var $3726=HEAP32[(($3725)>>2)];
 var $3727=$3723;
 var $3728=$3726;
 var $3729=((($3727)-($3728))|0);
 var $3730=((($3729)+(1))|0);
 var $3731=$3730&255;
 var $3732=(($3731)&255);
 var $3733=$code;
 var $3734=(($3733+1)|0);
 HEAP8[($3734)]=$3732;
 var $3735=$code;
 var $3736=(($3735+2)|0);
 HEAP8[($3736)]=0;
 var $3737=$code;
 var $3738=(($3737+3)|0);
 HEAP8[($3738)]=0;
 var $3739=$code;
 var $3740=(($3739+4)|0);
 $code=$3740;
 $previous=0;
 label=1119;break;
 case 765: 
 var $3742=HEAP32[(($ptr)>>2)];
 var $3743=(($3742+1)|0);
 HEAP32[(($ptr)>>2)]=$3743;
 var $3744=HEAP8[($3743)];
 var $3745=($3744&255);
 var $3746=($3745|0)==61;
 if($3746){label=767;break;}else{label=766;break;}
 case 766: 
 var $3748=HEAP32[(($ptr)>>2)];
 var $3749=HEAP8[($3748)];
 var $3750=($3749&255);
 var $3751=($3750|0)==62;
 if($3751){label=767;break;}else{label=768;break;}
 case 767: 
 var $3753=HEAP32[(($ptr)>>2)];
 var $3754=HEAP8[($3753)];
 var $3755=($3754&255);
 var $3756=($3755|0)==62;
 var $3757=($3756&1);
 $is_recurse=$3757;
 $terminator=41;
 label=813;break;
 case 768: 
 var $3759=HEAP32[(($ptr)>>2)];
 var $3760=HEAP8[($3759)];
 var $3761=($3760&255);
 var $3762=($3761|0)!=60;
 if($3762){label=769;break;}else{label=770;break;}
 case 769: 
 var $3764=$5;
 HEAP32[(($3764)>>2)]=41;
 label=1120;break;
 case 770: 
 label=771;break;
 case 771: 
 label=772;break;
 case 772: 
 label=773;break;
 case 773: 
 var $3769=HEAP32[(($ptr)>>2)];
 var $3770=HEAP8[($3769)];
 var $3771=($3770&255);
 var $3772=($3771|0)==60;
 var $3773=($3772?62:39);
 $terminator=$3773;
 var $3774=HEAP32[(($ptr)>>2)];
 var $3775=(($3774+1)|0);
 HEAP32[(($ptr)>>2)]=$3775;
 $name14=$3775;
 var $3776=HEAP32[(($ptr)>>2)];
 var $3777=HEAP8[($3776)];
 var $3778=($3777&255);
 var $3779=($3778|0)>=48;
 if($3779){label=774;break;}else{label=776;break;}
 case 774: 
 var $3781=HEAP32[(($ptr)>>2)];
 var $3782=HEAP8[($3781)];
 var $3783=($3782&255);
 var $3784=($3783|0)<=57;
 if($3784){label=775;break;}else{label=776;break;}
 case 775: 
 var $3786=$5;
 HEAP32[(($3786)>>2)]=84;
 label=1120;break;
 case 776: 
 label=777;break;
 case 777: 
 var $3789=HEAP32[(($ptr)>>2)];
 var $3790=HEAP8[($3789)];
 var $3791=($3790&255);
 var $3792=$12;
 var $3793=(($3792+12)|0);
 var $3794=HEAP32[(($3793)>>2)];
 var $3795=(($3794+$3791)|0);
 var $3796=HEAP8[($3795)];
 var $3797=($3796&255);
 var $3798=$3797&16;
 var $3799=($3798|0)!=0;
 if($3799){label=778;break;}else{label=779;break;}
 case 778: 
 var $3801=HEAP32[(($ptr)>>2)];
 var $3802=(($3801+1)|0);
 HEAP32[(($ptr)>>2)]=$3802;
 label=777;break;
 case 779: 
 var $3804=HEAP32[(($ptr)>>2)];
 var $3805=$name14;
 var $3806=$3804;
 var $3807=$3805;
 var $3808=((($3806)-($3807))|0);
 $namelen13=$3808;
 var $3809=$13;
 var $3810=($3809|0)!=0;
 if($3810){label=780;break;}else{label=811;break;}
 case 780: 
 var $3812=$12;
 var $3813=(($3812+64)|0);
 var $3814=HEAP32[(($3813)>>2)];
 var $3815=((($3814)+(1))|0);
 $number=$3815;
 var $3816=HEAP32[(($ptr)>>2)];
 var $3817=HEAP8[($3816)];
 var $3818=($3817&255);
 var $3819=$terminator;
 var $3820=(($3819)&255);
 var $3821=($3820&255);
 var $3822=($3818|0)!=($3821|0);
 if($3822){label=781;break;}else{label=782;break;}
 case 781: 
 var $3824=$5;
 HEAP32[(($3824)>>2)]=42;
 label=1120;break;
 case 782: 
 var $3826=$12;
 var $3827=(($3826+48)|0);
 var $3828=HEAP32[(($3827)>>2)];
 var $3829=($3828|0)>=10000;
 if($3829){label=783;break;}else{label=784;break;}
 case 783: 
 var $3831=$5;
 HEAP32[(($3831)>>2)]=49;
 label=1120;break;
 case 784: 
 var $3833=$namelen13;
 var $3834=((($3833)+(2))|0);
 var $3835=((($3834)+(1))|0);
 var $3836=$12;
 var $3837=(($3836+52)|0);
 var $3838=HEAP32[(($3837)>>2)];
 var $3839=($3835|0)>($3838|0);
 if($3839){label=785;break;}else{label=788;break;}
 case 785: 
 var $3841=$namelen13;
 var $3842=((($3841)+(2))|0);
 var $3843=((($3842)+(1))|0);
 var $3844=$12;
 var $3845=(($3844+52)|0);
 HEAP32[(($3845)>>2)]=$3843;
 var $3846=$namelen13;
 var $3847=($3846|0)>32;
 if($3847){label=786;break;}else{label=787;break;}
 case 786: 
 var $3849=$5;
 HEAP32[(($3849)>>2)]=48;
 label=1120;break;
 case 787: 
 label=788;break;
 case 788: 
 var $3852=$12;
 var $3853=(($3852+40)|0);
 var $3854=HEAP32[(($3853)>>2)];
 $ng=$3854;
 $i12=0;
 label=789;break;
 case 789: 
 var $3856=$i12;
 var $3857=$12;
 var $3858=(($3857+48)|0);
 var $3859=HEAP32[(($3858)>>2)];
 var $3860=($3856|0)<($3859|0);
 if($3860){label=790;break;}else{label=802;break;}
 case 790: 
 var $3862=$namelen13;
 var $3863=$ng;
 var $3864=(($3863+4)|0);
 var $3865=HEAP32[(($3864)>>2)];
 var $3866=($3862|0)==($3865|0);
 if($3866){label=791;break;}else{label=797;break;}
 case 791: 
 var $3868=$name14;
 var $3869=$ng;
 var $3870=(($3869)|0);
 var $3871=HEAP32[(($3870)>>2)];
 var $3872=$namelen13;
 var $3873=_strncmp($3868,$3871,$3872);
 var $3874=($3873|0)==0;
 if($3874){label=792;break;}else{label=797;break;}
 case 792: 
 var $3876=$ng;
 var $3877=(($3876+8)|0);
 var $3878=HEAP32[(($3877)>>2)];
 var $3879=$number;
 var $3880=($3878|0)==($3879|0);
 if($3880){label=793;break;}else{label=794;break;}
 case 793: 
 label=802;break;
 case 794: 
 var $3883=$options;
 var $3884=$3883&524288;
 var $3885=($3884|0)==0;
 if($3885){label=795;break;}else{label=796;break;}
 case 795: 
 var $3887=$5;
 HEAP32[(($3887)>>2)]=43;
 label=1120;break;
 case 796: 
 var $3889=$12;
 var $3890=(($3889+120)|0);
 HEAP32[(($3890)>>2)]=1;
 label=800;break;
 case 797: 
 var $3892=$ng;
 var $3893=(($3892+8)|0);
 var $3894=HEAP32[(($3893)>>2)];
 var $3895=$number;
 var $3896=($3894|0)==($3895|0);
 if($3896){label=798;break;}else{label=799;break;}
 case 798: 
 var $3898=$5;
 HEAP32[(($3898)>>2)]=65;
 label=1120;break;
 case 799: 
 label=800;break;
 case 800: 
 label=801;break;
 case 801: 
 var $3902=$i12;
 var $3903=((($3902)+(1))|0);
 $i12=$3903;
 var $3904=$ng;
 var $3905=(($3904+12)|0);
 $ng=$3905;
 label=789;break;
 case 802: 
 var $3907=$i12;
 var $3908=$12;
 var $3909=(($3908+48)|0);
 var $3910=HEAP32[(($3909)>>2)];
 var $3911=($3907|0)>=($3910|0);
 if($3911){label=803;break;}else{label=810;break;}
 case 803: 
 var $3913=$12;
 var $3914=(($3913+48)|0);
 var $3915=HEAP32[(($3914)>>2)];
 var $3916=$12;
 var $3917=(($3916+56)|0);
 var $3918=HEAP32[(($3917)>>2)];
 var $3919=($3915|0)>=($3918|0);
 if($3919){label=804;break;}else{label=809;break;}
 case 804: 
 var $3921=$12;
 var $3922=(($3921+56)|0);
 var $3923=HEAP32[(($3922)>>2)];
 var $3924=($3923<<1);
 $newsize=$3924;
 var $3925=HEAP32[((504)>>2)];
 var $3926=$newsize;
 var $3927=((($3926)*(12))&-1);
 var $3928=FUNCTION_TABLE[$3925]($3927);
 var $3929=$3928;
 $newspace=$3929;
 var $3930=$newspace;
 var $3931=($3930|0)==0;
 if($3931){label=805;break;}else{label=806;break;}
 case 805: 
 var $3933=$5;
 HEAP32[(($3933)>>2)]=21;
 label=1120;break;
 case 806: 
 var $3935=$newspace;
 var $3936=$3935;
 var $3937=$12;
 var $3938=(($3937+40)|0);
 var $3939=HEAP32[(($3938)>>2)];
 var $3940=$3939;
 var $3941=$12;
 var $3942=(($3941+56)|0);
 var $3943=HEAP32[(($3942)>>2)];
 var $3944=((($3943)*(12))&-1);
 assert($3944 % 1 === 0);(_memcpy($3936, $3940, $3944)|0);
 var $3945=$12;
 var $3946=(($3945+56)|0);
 var $3947=HEAP32[(($3946)>>2)];
 var $3948=($3947|0)>20;
 if($3948){label=807;break;}else{label=808;break;}
 case 807: 
 var $3950=HEAP32[((512)>>2)];
 var $3951=$12;
 var $3952=(($3951+40)|0);
 var $3953=HEAP32[(($3952)>>2)];
 var $3954=$3953;
 FUNCTION_TABLE[$3950]($3954);
 label=808;break;
 case 808: 
 var $3956=$newspace;
 var $3957=$12;
 var $3958=(($3957+40)|0);
 HEAP32[(($3958)>>2)]=$3956;
 var $3959=$newsize;
 var $3960=$12;
 var $3961=(($3960+56)|0);
 HEAP32[(($3961)>>2)]=$3959;
 label=809;break;
 case 809: 
 var $3963=$name14;
 var $3964=$12;
 var $3965=(($3964+48)|0);
 var $3966=HEAP32[(($3965)>>2)];
 var $3967=$12;
 var $3968=(($3967+40)|0);
 var $3969=HEAP32[(($3968)>>2)];
 var $3970=(($3969+((($3966)*(12))&-1))|0);
 var $3971=(($3970)|0);
 HEAP32[(($3971)>>2)]=$3963;
 var $3972=$namelen13;
 var $3973=$12;
 var $3974=(($3973+48)|0);
 var $3975=HEAP32[(($3974)>>2)];
 var $3976=$12;
 var $3977=(($3976+40)|0);
 var $3978=HEAP32[(($3977)>>2)];
 var $3979=(($3978+((($3975)*(12))&-1))|0);
 var $3980=(($3979+4)|0);
 HEAP32[(($3980)>>2)]=$3972;
 var $3981=$number;
 var $3982=$12;
 var $3983=(($3982+48)|0);
 var $3984=HEAP32[(($3983)>>2)];
 var $3985=$12;
 var $3986=(($3985+40)|0);
 var $3987=HEAP32[(($3986)>>2)];
 var $3988=(($3987+((($3984)*(12))&-1))|0);
 var $3989=(($3988+8)|0);
 HEAP32[(($3989)>>2)]=$3981;
 var $3990=$12;
 var $3991=(($3990+48)|0);
 var $3992=HEAP32[(($3991)>>2)];
 var $3993=((($3992)+(1))|0);
 HEAP32[(($3991)>>2)]=$3993;
 label=810;break;
 case 810: 
 label=811;break;
 case 811: 
 var $3996=HEAP32[(($ptr)>>2)];
 var $3997=(($3996+1)|0);
 HEAP32[(($ptr)>>2)]=$3997;
 label=961;break;
 case 812: 
 $terminator=41;
 $is_recurse=1;
 label=813;break;
 case 813: 
 var $4000=HEAP32[(($ptr)>>2)];
 var $4001=(($4000+1)|0);
 HEAP32[(($ptr)>>2)]=$4001;
 $name14=$4001;
 var $4002=HEAP32[(($ptr)>>2)];
 var $4003=HEAP8[($4002)];
 var $4004=($4003&255);
 var $4005=($4004|0)>=48;
 if($4005){label=814;break;}else{label=816;break;}
 case 814: 
 var $4007=HEAP32[(($ptr)>>2)];
 var $4008=HEAP8[($4007)];
 var $4009=($4008&255);
 var $4010=($4009|0)<=57;
 if($4010){label=815;break;}else{label=816;break;}
 case 815: 
 var $4012=$5;
 HEAP32[(($4012)>>2)]=84;
 label=1120;break;
 case 816: 
 label=817;break;
 case 817: 
 var $4015=HEAP32[(($ptr)>>2)];
 var $4016=HEAP8[($4015)];
 var $4017=($4016&255);
 var $4018=$12;
 var $4019=(($4018+12)|0);
 var $4020=HEAP32[(($4019)>>2)];
 var $4021=(($4020+$4017)|0);
 var $4022=HEAP8[($4021)];
 var $4023=($4022&255);
 var $4024=$4023&16;
 var $4025=($4024|0)!=0;
 if($4025){label=818;break;}else{label=819;break;}
 case 818: 
 var $4027=HEAP32[(($ptr)>>2)];
 var $4028=(($4027+1)|0);
 HEAP32[(($ptr)>>2)]=$4028;
 label=817;break;
 case 819: 
 var $4030=HEAP32[(($ptr)>>2)];
 var $4031=$name14;
 var $4032=$4030;
 var $4033=$4031;
 var $4034=((($4032)-($4033))|0);
 $namelen13=$4034;
 var $4035=$13;
 var $4036=($4035|0)!=0;
 if($4036){label=820;break;}else{label=839;break;}
 case 820: 
 var $4038=$namelen13;
 var $4039=($4038|0)==0;
 if($4039){label=821;break;}else{label=822;break;}
 case 821: 
 var $4041=$5;
 HEAP32[(($4041)>>2)]=62;
 label=1120;break;
 case 822: 
 var $4043=HEAP32[(($ptr)>>2)];
 var $4044=HEAP8[($4043)];
 var $4045=($4044&255);
 var $4046=$terminator;
 var $4047=(($4046)&255);
 var $4048=($4047&255);
 var $4049=($4045|0)!=($4048|0);
 if($4049){label=823;break;}else{label=824;break;}
 case 823: 
 var $4051=$5;
 HEAP32[(($4051)>>2)]=42;
 label=1120;break;
 case 824: 
 var $4053=$namelen13;
 var $4054=($4053|0)>32;
 if($4054){label=825;break;}else{label=826;break;}
 case 825: 
 var $4056=$5;
 HEAP32[(($4056)>>2)]=48;
 label=1120;break;
 case 826: 
 var $4058=$12;
 var $4059=(($4058+40)|0);
 var $4060=HEAP32[(($4059)>>2)];
 $ng16=$4060;
 $i12=0;
 label=827;break;
 case 827: 
 var $4062=$i12;
 var $4063=$12;
 var $4064=(($4063+48)|0);
 var $4065=HEAP32[(($4064)>>2)];
 var $4066=($4062|0)<($4065|0);
 if($4066){label=828;break;}else{label=833;break;}
 case 828: 
 var $4068=$namelen13;
 var $4069=$ng16;
 var $4070=(($4069+4)|0);
 var $4071=HEAP32[(($4070)>>2)];
 var $4072=($4068|0)==($4071|0);
 if($4072){label=829;break;}else{label=831;break;}
 case 829: 
 var $4074=$name14;
 var $4075=$ng16;
 var $4076=(($4075)|0);
 var $4077=HEAP32[(($4076)>>2)];
 var $4078=$namelen13;
 var $4079=_strncmp($4074,$4077,$4078);
 var $4080=($4079|0)==0;
 if($4080){label=830;break;}else{label=831;break;}
 case 830: 
 label=833;break;
 case 831: 
 label=832;break;
 case 832: 
 var $4084=$i12;
 var $4085=((($4084)+(1))|0);
 $i12=$4085;
 var $4086=$ng16;
 var $4087=(($4086+12)|0);
 $ng16=$4087;
 label=827;break;
 case 833: 
 var $4089=$i12;
 var $4090=$12;
 var $4091=(($4090+48)|0);
 var $4092=HEAP32[(($4091)>>2)];
 var $4093=($4089|0)<($4092|0);
 if($4093){label=834;break;}else{label=835;break;}
 case 834: 
 var $4095=$ng16;
 var $4096=(($4095+8)|0);
 var $4097=HEAP32[(($4096)>>2)];
 var $4100=$4097;label=836;break;
 case 835: 
 var $4100=0;label=836;break;
 case 836: 
 var $4100;
 $recno=$4100;
 var $4101=$is_recurse;
 var $4102=($4101|0)!=0;
 if($4102){label=838;break;}else{label=837;break;}
 case 837: 
 var $4104=$12;
 var $4105=(($4104+84)|0);
 var $4106=HEAP32[(($4105)>>2)];
 var $4107=((($4106)+(1))|0);
 HEAP32[(($4105)>>2)]=$4107;
 label=838;break;
 case 838: 
 label=850;break;
 case 839: 
 var $4110=$12;
 var $4111=(($4110+44)|0);
 var $4112=HEAP32[(($4111)>>2)];
 $slot=$4112;
 $i12=0;
 label=840;break;
 case 840: 
 var $4114=$i12;
 var $4115=$12;
 var $4116=(($4115+48)|0);
 var $4117=HEAP32[(($4116)>>2)];
 var $4118=($4114|0)<($4117|0);
 if($4118){label=841;break;}else{label=846;break;}
 case 841: 
 var $4120=$name14;
 var $4121=$slot;
 var $4122=(($4121+2)|0);
 var $4123=$namelen13;
 var $4124=_strncmp($4120,$4122,$4123);
 var $4125=($4124|0)==0;
 if($4125){label=842;break;}else{label=844;break;}
 case 842: 
 var $4127=$namelen13;
 var $4128=((($4127)+(2))|0);
 var $4129=$slot;
 var $4130=(($4129+$4128)|0);
 var $4131=HEAP8[($4130)];
 var $4132=($4131&255);
 var $4133=($4132|0)==0;
 if($4133){label=843;break;}else{label=844;break;}
 case 843: 
 label=846;break;
 case 844: 
 var $4136=$12;
 var $4137=(($4136+52)|0);
 var $4138=HEAP32[(($4137)>>2)];
 var $4139=$slot;
 var $4140=(($4139+$4138)|0);
 $slot=$4140;
 label=845;break;
 case 845: 
 var $4142=$i12;
 var $4143=((($4142)+(1))|0);
 $i12=$4143;
 label=840;break;
 case 846: 
 var $4145=$i12;
 var $4146=$12;
 var $4147=(($4146+48)|0);
 var $4148=HEAP32[(($4147)>>2)];
 var $4149=($4145|0)<($4148|0);
 if($4149){label=847;break;}else{label=848;break;}
 case 847: 
 var $4151=$slot;
 var $4152=(($4151)|0);
 var $4153=HEAP8[($4152)];
 var $4154=($4153&255);
 var $4155=$4154<<8;
 var $4156=$slot;
 var $4157=(($4156+1)|0);
 var $4158=HEAP8[($4157)];
 var $4159=($4158&255);
 var $4160=$4155|$4159;
 $recno=$4160;
 label=849;break;
 case 848: 
 var $4162=$5;
 HEAP32[(($4162)>>2)]=15;
 label=1120;break;
 case 849: 
 label=850;break;
 case 850: 
 var $4165=$is_recurse;
 var $4166=($4165|0)!=0;
 if($4166){label=851;break;}else{label=852;break;}
 case 851: 
 label=913;break;
 case 852: 
 var $4169=$13;
 var $4170=($4169|0)==0;
 if($4170){label=853;break;}else{label=880;break;}
 case 853: 
 var $4172=$12;
 var $4173=(($4172+120)|0);
 var $4174=HEAP32[(($4173)>>2)];
 var $4175=($4174|0)!=0;
 if($4175){label=854;break;}else{label=880;break;}
 case 854: 
 $count17=1;
 var $4177=$i12;
 $index=$4177;
 var $4178=$slot;
 var $4179=$12;
 var $4180=(($4179+52)|0);
 var $4181=HEAP32[(($4180)>>2)];
 var $4182=(($4178+$4181)|0);
 $cslot=$4182;
 var $4183=$i12;
 var $4184=((($4183)+(1))|0);
 $i12=$4184;
 label=855;break;
 case 855: 
 var $4186=$i12;
 var $4187=$12;
 var $4188=(($4187+48)|0);
 var $4189=HEAP32[(($4188)>>2)];
 var $4190=($4186|0)<($4189|0);
 if($4190){label=856;break;}else{label=860;break;}
 case 856: 
 var $4192=$slot;
 var $4193=(($4192+2)|0);
 var $4194=$cslot;
 var $4195=(($4194+2)|0);
 var $4196=_strcmp($4193,$4195);
 var $4197=($4196|0)!=0;
 if($4197){label=857;break;}else{label=858;break;}
 case 857: 
 label=860;break;
 case 858: 
 var $4200=$count17;
 var $4201=((($4200)+(1))|0);
 $count17=$4201;
 var $4202=$12;
 var $4203=(($4202+52)|0);
 var $4204=HEAP32[(($4203)>>2)];
 var $4205=$cslot;
 var $4206=(($4205+$4204)|0);
 $cslot=$4206;
 label=859;break;
 case 859: 
 var $4208=$i12;
 var $4209=((($4208)+(1))|0);
 $i12=$4209;
 label=855;break;
 case 860: 
 var $4211=$count17;
 var $4212=($4211|0)>1;
 if($4212){label=861;break;}else{label=879;break;}
 case 861: 
 var $4214=$firstcharflags;
 var $4215=($4214|0)==-2;
 if($4215){label=862;break;}else{label=863;break;}
 case 862: 
 $firstcharflags=-1;
 label=863;break;
 case 863: 
 var $4218=$code;
 $previous=$4218;
 var $4219=$options;
 var $4220=$4219&1;
 var $4221=($4220|0)!=0;
 var $4222=($4221?116:115);
 var $4223=(($4222)&255);
 var $4224=$code;
 var $4225=(($4224+1)|0);
 $code=$4225;
 HEAP8[($4224)]=$4223;
 var $4226=$index;
 var $4227=$4226>>>8;
 var $4228=(($4227)&255);
 var $4229=$code;
 var $4230=(($4229)|0);
 HEAP8[($4230)]=$4228;
 var $4231=$index;
 var $4232=$4231&255;
 var $4233=(($4232)&255);
 var $4234=$code;
 var $4235=(($4234+1)|0);
 HEAP8[($4235)]=$4233;
 var $4236=$code;
 var $4237=(($4236+2)|0);
 $code=$4237;
 var $4238=$count17;
 var $4239=$4238>>8;
 var $4240=(($4239)&255);
 var $4241=$code;
 var $4242=(($4241)|0);
 HEAP8[($4242)]=$4240;
 var $4243=$count17;
 var $4244=$4243&255;
 var $4245=(($4244)&255);
 var $4246=$code;
 var $4247=(($4246+1)|0);
 HEAP8[($4247)]=$4245;
 var $4248=$code;
 var $4249=(($4248+2)|0);
 $code=$4249;
 label=864;break;
 case 864: 
 var $4251=$slot;
 var $4252=$cslot;
 var $4253=($4251>>>0)<($4252>>>0);
 if($4253){label=865;break;}else{label=878;break;}
 case 865: 
 var $4255=$slot;
 var $4256=(($4255)|0);
 var $4257=HEAP8[($4256)];
 var $4258=($4257&255);
 var $4259=$4258<<8;
 var $4260=$slot;
 var $4261=(($4260+1)|0);
 var $4262=HEAP8[($4261)];
 var $4263=($4262&255);
 var $4264=$4259|$4263;
 $recno=$4264;
 var $4265=$recno;
 var $4266=($4265|0)<32;
 if($4266){label=866;break;}else{label=867;break;}
 case 866: 
 var $4268=$recno;
 var $4269=1<<$4268;
 var $4272=$4269;label=868;break;
 case 867: 
 var $4272=1;label=868;break;
 case 868: 
 var $4272;
 var $4273=$12;
 var $4274=(($4273+80)|0);
 var $4275=HEAP32[(($4274)>>2)];
 var $4276=$4275|$4272;
 HEAP32[(($4274)>>2)]=$4276;
 var $4277=$recno;
 var $4278=$12;
 var $4279=(($4278+76)|0);
 var $4280=HEAP32[(($4279)>>2)];
 var $4281=($4277|0)>($4280|0);
 if($4281){label=869;break;}else{label=870;break;}
 case 869: 
 var $4283=$recno;
 var $4284=$12;
 var $4285=(($4284+76)|0);
 HEAP32[(($4285)>>2)]=$4283;
 label=870;break;
 case 870: 
 var $4287=$12;
 var $4288=(($4287+36)|0);
 var $4289=HEAP32[(($4288)>>2)];
 $oc18=$4289;
 label=871;break;
 case 871: 
 var $4291=$oc18;
 var $4292=($4291|0)!=0;
 if($4292){label=872;break;}else{label=876;break;}
 case 872: 
 var $4294=$oc18;
 var $4295=(($4294+4)|0);
 var $4296=HEAP16[(($4295)>>1)];
 var $4297=($4296&65535);
 var $4298=$recno;
 var $4299=($4297|0)==($4298|0);
 if($4299){label=873;break;}else{label=874;break;}
 case 873: 
 var $4301=$oc18;
 var $4302=(($4301+6)|0);
 HEAP16[(($4302)>>1)]=1;
 label=876;break;
 case 874: 
 label=875;break;
 case 875: 
 var $4305=$oc18;
 var $4306=(($4305)|0);
 var $4307=HEAP32[(($4306)>>2)];
 $oc18=$4307;
 label=871;break;
 case 876: 
 label=877;break;
 case 877: 
 var $4310=$12;
 var $4311=(($4310+52)|0);
 var $4312=HEAP32[(($4311)>>2)];
 var $4313=$slot;
 var $4314=(($4313+$4312)|0);
 $slot=$4314;
 label=864;break;
 case 878: 
 label=1119;break;
 case 879: 
 label=880;break;
 case 880: 
 label=1061;break;
 case 881: 
 var $4319=HEAP32[(($ptr)>>2)];
 var $4320=(($4319+1)|0);
 HEAP32[(($ptr)>>2)]=$4320;
 label=882;break;
 case 882: 
 $terminator=41;
 label=883;break;
 case 883: 
 var $4323=HEAP32[(($ptr)>>2)];
 var $4324=HEAP8[($4323)];
 var $4325=($4324&255);
 $refsign=$4325;
 var $4326=($4325|0)==43;
 if($4326){label=884;break;}else{label=888;break;}
 case 884: 
 var $4328=HEAP32[(($ptr)>>2)];
 var $4329=(($4328+1)|0);
 HEAP32[(($ptr)>>2)]=$4329;
 var $4330=HEAP32[(($ptr)>>2)];
 var $4331=HEAP8[($4330)];
 var $4332=($4331&255);
 var $4333=($4332|0)>=48;
 if($4333){label=885;break;}else{label=886;break;}
 case 885: 
 var $4335=HEAP32[(($ptr)>>2)];
 var $4336=HEAP8[($4335)];
 var $4337=($4336&255);
 var $4338=($4337|0)<=57;
 if($4338){label=887;break;}else{label=886;break;}
 case 886: 
 var $4340=$5;
 HEAP32[(($4340)>>2)]=63;
 label=1120;break;
 case 887: 
 label=894;break;
 case 888: 
 var $4343=$refsign;
 var $4344=($4343|0)==45;
 if($4344){label=889;break;}else{label=893;break;}
 case 889: 
 var $4346=HEAP32[(($ptr)>>2)];
 var $4347=(($4346+1)|0);
 var $4348=HEAP8[($4347)];
 var $4349=($4348&255);
 var $4350=($4349|0)>=48;
 if($4350){label=890;break;}else{label=891;break;}
 case 890: 
 var $4352=HEAP32[(($ptr)>>2)];
 var $4353=(($4352+1)|0);
 var $4354=HEAP8[($4353)];
 var $4355=($4354&255);
 var $4356=($4355|0)<=57;
 if($4356){label=892;break;}else{label=891;break;}
 case 891: 
 label=934;break;
 case 892: 
 var $4359=HEAP32[(($ptr)>>2)];
 var $4360=(($4359+1)|0);
 HEAP32[(($ptr)>>2)]=$4360;
 label=893;break;
 case 893: 
 label=894;break;
 case 894: 
 $recno=0;
 label=895;break;
 case 895: 
 var $4364=HEAP32[(($ptr)>>2)];
 var $4365=HEAP8[($4364)];
 var $4366=($4365&255);
 var $4367=($4366|0)>=48;
 if($4367){label=896;break;}else{var $4374=0;label=897;break;}
 case 896: 
 var $4369=HEAP32[(($ptr)>>2)];
 var $4370=HEAP8[($4369)];
 var $4371=($4370&255);
 var $4372=($4371|0)<=57;
 var $4374=$4372;label=897;break;
 case 897: 
 var $4374;
 if($4374){label=898;break;}else{label=899;break;}
 case 898: 
 var $4376=$recno;
 var $4377=((($4376)*(10))&-1);
 var $4378=HEAP32[(($ptr)>>2)];
 var $4379=(($4378+1)|0);
 HEAP32[(($ptr)>>2)]=$4379;
 var $4380=HEAP8[($4378)];
 var $4381=($4380&255);
 var $4382=((($4377)+($4381))|0);
 var $4383=((($4382)-(48))|0);
 $recno=$4383;
 label=895;break;
 case 899: 
 var $4385=HEAP32[(($ptr)>>2)];
 var $4386=HEAP8[($4385)];
 var $4387=($4386&255);
 var $4388=$terminator;
 var $4389=(($4388)&255);
 var $4390=($4389&255);
 var $4391=($4387|0)!=($4390|0);
 if($4391){label=900;break;}else{label=901;break;}
 case 900: 
 var $4393=$5;
 HEAP32[(($4393)>>2)]=29;
 label=1120;break;
 case 901: 
 var $4395=$refsign;
 var $4396=($4395|0)==45;
 if($4396){label=902;break;}else{label=907;break;}
 case 902: 
 var $4398=$recno;
 var $4399=($4398|0)==0;
 if($4399){label=903;break;}else{label=904;break;}
 case 903: 
 var $4401=$5;
 HEAP32[(($4401)>>2)]=58;
 label=1120;break;
 case 904: 
 var $4403=$12;
 var $4404=(($4403+64)|0);
 var $4405=HEAP32[(($4404)>>2)];
 var $4406=$recno;
 var $4407=((($4405)-($4406))|0);
 var $4408=((($4407)+(1))|0);
 $recno=$4408;
 var $4409=$recno;
 var $4410=($4409|0)<=0;
 if($4410){label=905;break;}else{label=906;break;}
 case 905: 
 var $4412=$5;
 HEAP32[(($4412)>>2)]=15;
 label=1120;break;
 case 906: 
 label=912;break;
 case 907: 
 var $4415=$refsign;
 var $4416=($4415|0)==43;
 if($4416){label=908;break;}else{label=911;break;}
 case 908: 
 var $4418=$recno;
 var $4419=($4418|0)==0;
 if($4419){label=909;break;}else{label=910;break;}
 case 909: 
 var $4421=$5;
 HEAP32[(($4421)>>2)]=58;
 label=1120;break;
 case 910: 
 var $4423=$12;
 var $4424=(($4423+64)|0);
 var $4425=HEAP32[(($4424)>>2)];
 var $4426=$recno;
 var $4427=((($4426)+($4425))|0);
 $recno=$4427;
 label=911;break;
 case 911: 
 label=912;break;
 case 912: 
 label=913;break;
 case 913: 
 var $4431=$code;
 $previous=$4431;
 var $4432=$12;
 var $4433=(($4432+20)|0);
 var $4434=HEAP32[(($4433)>>2)];
 $called=$4434;
 var $4435=$13;
 var $4436=($4435|0)==0;
 if($4436){label=914;break;}else{label=930;break;}
 case 914: 
 var $4438=$code;
 HEAP8[($4438)]=0;
 var $4439=$recno;
 var $4440=($4439|0)!=0;
 if($4440){label=915;break;}else{label=916;break;}
 case 915: 
 var $4442=$12;
 var $4443=(($4442+20)|0);
 var $4444=HEAP32[(($4443)>>2)];
 var $4445=$utf;
 var $4446=$recno;
 var $4447=__pcre_find_bracket($4444,$4445,$4446);
 $called=$4447;
 label=916;break;
 case 916: 
 var $4449=$called;
 var $4450=($4449|0)==0;
 if($4450){label=917;break;}else{label=924;break;}
 case 917: 
 var $4452=$recno;
 var $4453=$12;
 var $4454=(($4453+68)|0);
 var $4455=HEAP32[(($4454)>>2)];
 var $4456=($4452|0)>($4455|0);
 if($4456){label=918;break;}else{label=919;break;}
 case 918: 
 var $4458=$5;
 HEAP32[(($4458)>>2)]=15;
 label=1120;break;
 case 919: 
 var $4460=$12;
 var $4461=(($4460+20)|0);
 var $4462=HEAP32[(($4461)>>2)];
 var $4463=$recno;
 var $4464=(($4462+$4463)|0);
 $called=$4464;
 var $4465=$12;
 var $4466=(($4465+32)|0);
 var $4467=HEAP32[(($4466)>>2)];
 var $4468=$12;
 var $4469=(($4468+16)|0);
 var $4470=HEAP32[(($4469)>>2)];
 var $4471=$12;
 var $4472=(($4471+60)|0);
 var $4473=HEAP32[(($4472)>>2)];
 var $4474=(($4470+$4473)|0);
 var $4475=((($4474)-(100))|0);
 var $4476=($4467>>>0)>=($4475>>>0);
 if($4476){label=920;break;}else{label=923;break;}
 case 920: 
 var $4478=$12;
 var $4479=_expand_workspace($4478);
 var $4480=$5;
 HEAP32[(($4480)>>2)]=$4479;
 var $4481=$5;
 var $4482=HEAP32[(($4481)>>2)];
 var $4483=($4482|0)!=0;
 if($4483){label=921;break;}else{label=922;break;}
 case 921: 
 label=1120;break;
 case 922: 
 label=923;break;
 case 923: 
 var $4487=$code;
 var $4488=(($4487+1)|0);
 var $4489=$12;
 var $4490=(($4489+20)|0);
 var $4491=HEAP32[(($4490)>>2)];
 var $4492=$4488;
 var $4493=$4491;
 var $4494=((($4492)-($4493))|0);
 var $4495=$4494>>8;
 var $4496=(($4495)&255);
 var $4497=$12;
 var $4498=(($4497+32)|0);
 var $4499=HEAP32[(($4498)>>2)];
 var $4500=(($4499)|0);
 HEAP8[($4500)]=$4496;
 var $4501=$code;
 var $4502=(($4501+1)|0);
 var $4503=$12;
 var $4504=(($4503+20)|0);
 var $4505=HEAP32[(($4504)>>2)];
 var $4506=$4502;
 var $4507=$4505;
 var $4508=((($4506)-($4507))|0);
 var $4509=$4508&255;
 var $4510=(($4509)&255);
 var $4511=$12;
 var $4512=(($4511+32)|0);
 var $4513=HEAP32[(($4512)>>2)];
 var $4514=(($4513+1)|0);
 HEAP8[($4514)]=$4510;
 var $4515=$12;
 var $4516=(($4515+32)|0);
 var $4517=HEAP32[(($4516)>>2)];
 var $4518=(($4517+2)|0);
 HEAP32[(($4516)>>2)]=$4518;
 label=929;break;
 case 924: 
 var $4520=$called;
 var $4521=(($4520+1)|0);
 var $4522=HEAP8[($4521)];
 var $4523=($4522&255);
 var $4524=$4523<<8;
 var $4525=$called;
 var $4526=(($4525+2)|0);
 var $4527=HEAP8[($4526)];
 var $4528=($4527&255);
 var $4529=$4524|$4528;
 var $4530=($4529|0)==0;
 if($4530){label=925;break;}else{label=928;break;}
 case 925: 
 var $4532=$11;
 var $4533=($4532|0)<=0;
 if($4533){label=926;break;}else{label=928;break;}
 case 926: 
 var $4535=$called;
 var $4536=$code;
 var $4537=$10;
 var $4538=$utf;
 var $4539=$12;
 var $4540=_could_be_empty($4535,$4536,$4537,$4538,$4539);
 var $4541=($4540|0)!=0;
 if($4541){label=927;break;}else{label=928;break;}
 case 927: 
 var $4543=$5;
 HEAP32[(($4543)>>2)]=40;
 label=1120;break;
 case 928: 
 label=929;break;
 case 929: 
 label=930;break;
 case 930: 
 var $4547=$code;
 HEAP8[($4547)]=117;
 var $4548=$called;
 var $4549=$12;
 var $4550=(($4549+20)|0);
 var $4551=HEAP32[(($4550)>>2)];
 var $4552=$4548;
 var $4553=$4551;
 var $4554=((($4552)-($4553))|0);
 var $4555=$4554>>8;
 var $4556=(($4555)&255);
 var $4557=$code;
 var $4558=(($4557+1)|0);
 HEAP8[($4558)]=$4556;
 var $4559=$called;
 var $4560=$12;
 var $4561=(($4560+20)|0);
 var $4562=HEAP32[(($4561)>>2)];
 var $4563=$4559;
 var $4564=$4562;
 var $4565=((($4563)-($4564))|0);
 var $4566=$4565&255;
 var $4567=(($4566)&255);
 var $4568=$code;
 var $4569=(($4568+2)|0);
 HEAP8[($4569)]=$4567;
 var $4570=$code;
 var $4571=(($4570+3)|0);
 $code=$4571;
 $groupsetfirstchar=0;
 var $4572=$firstcharflags;
 var $4573=($4572|0)==-2;
 if($4573){label=931;break;}else{label=932;break;}
 case 931: 
 $firstcharflags=-1;
 label=932;break;
 case 932: 
 label=1119;break;
 case 933: 
 label=934;break;
 case 934: 
 HEAP32[(($unset)>>2)]=0;
 HEAP32[(($set)>>2)]=0;
 $optset=$set;
 label=935;break;
 case 935: 
 var $4579=HEAP32[(($ptr)>>2)];
 var $4580=HEAP8[($4579)];
 var $4581=($4580&255);
 var $4582=($4581|0)!=41;
 if($4582){label=936;break;}else{var $4589=0;label=937;break;}
 case 936: 
 var $4584=HEAP32[(($ptr)>>2)];
 var $4585=HEAP8[($4584)];
 var $4586=($4585&255);
 var $4587=($4586|0)!=58;
 var $4589=$4587;label=937;break;
 case 937: 
 var $4589;
 if($4589){label=938;break;}else{label=949;break;}
 case 938: 
 var $4591=HEAP32[(($ptr)>>2)];
 var $4592=(($4591+1)|0);
 HEAP32[(($ptr)>>2)]=$4592;
 var $4593=HEAP8[($4591)];
 var $4594=($4593&255);
 switch(($4594|0)){case 45:{ label=939;break;}case 74:{ label=940;break;}case 105:{ label=941;break;}case 109:{ label=942;break;}case 115:{ label=943;break;}case 120:{ label=944;break;}case 85:{ label=945;break;}case 88:{ label=946;break;}default:{label=947;break;}}break;
 case 939: 
 $optset=$unset;
 label=948;break;
 case 940: 
 var $4597=$optset;
 var $4598=HEAP32[(($4597)>>2)];
 var $4599=$4598|524288;
 HEAP32[(($4597)>>2)]=$4599;
 var $4600=$12;
 var $4601=(($4600+100)|0);
 var $4602=HEAP32[(($4601)>>2)];
 var $4603=$4602|1024;
 HEAP32[(($4601)>>2)]=$4603;
 label=948;break;
 case 941: 
 var $4605=$optset;
 var $4606=HEAP32[(($4605)>>2)];
 var $4607=$4606|1;
 HEAP32[(($4605)>>2)]=$4607;
 label=948;break;
 case 942: 
 var $4609=$optset;
 var $4610=HEAP32[(($4609)>>2)];
 var $4611=$4610|2;
 HEAP32[(($4609)>>2)]=$4611;
 label=948;break;
 case 943: 
 var $4613=$optset;
 var $4614=HEAP32[(($4613)>>2)];
 var $4615=$4614|4;
 HEAP32[(($4613)>>2)]=$4615;
 label=948;break;
 case 944: 
 var $4617=$optset;
 var $4618=HEAP32[(($4617)>>2)];
 var $4619=$4618|8;
 HEAP32[(($4617)>>2)]=$4619;
 label=948;break;
 case 945: 
 var $4621=$optset;
 var $4622=HEAP32[(($4621)>>2)];
 var $4623=$4622|512;
 HEAP32[(($4621)>>2)]=$4623;
 label=948;break;
 case 946: 
 var $4625=$optset;
 var $4626=HEAP32[(($4625)>>2)];
 var $4627=$4626|64;
 HEAP32[(($4625)>>2)]=$4627;
 label=948;break;
 case 947: 
 var $4629=$5;
 HEAP32[(($4629)>>2)]=12;
 var $4630=HEAP32[(($ptr)>>2)];
 var $4631=((($4630)-(1))|0);
 HEAP32[(($ptr)>>2)]=$4631;
 label=1120;break;
 case 948: 
 label=935;break;
 case 949: 
 var $4634=$options;
 var $4635=HEAP32[(($set)>>2)];
 var $4636=$4634|$4635;
 var $4637=HEAP32[(($unset)>>2)];
 var $4638=$4637^-1;
 var $4639=$4636&$4638;
 $newoptions=$4639;
 var $4640=HEAP32[(($ptr)>>2)];
 var $4641=HEAP8[($4640)];
 var $4642=($4641&255);
 var $4643=($4642|0)==41;
 if($4643){label=950;break;}else{label=956;break;}
 case 950: 
 var $4645=$code;
 var $4646=$12;
 var $4647=(($4646+20)|0);
 var $4648=HEAP32[(($4647)>>2)];
 var $4649=(($4648+1)|0);
 var $4650=(($4649+2)|0);
 var $4651=($4645|0)==($4650|0);
 if($4651){label=951;break;}else{label=954;break;}
 case 951: 
 var $4653=$13;
 var $4654=($4653|0)==0;
 if($4654){label=953;break;}else{label=952;break;}
 case 952: 
 var $4656=$13;
 var $4657=HEAP32[(($4656)>>2)];
 var $4658=($4657|0)==6;
 if($4658){label=953;break;}else{label=954;break;}
 case 953: 
 var $4660=$newoptions;
 var $4661=$12;
 var $4662=(($4661+96)|0);
 HEAP32[(($4662)>>2)]=$4660;
 label=955;break;
 case 954: 
 var $4664=$newoptions;
 var $4665=$4664&512;
 var $4666=($4665|0)!=0;
 var $4667=($4666&1);
 $greedy_default=$4667;
 var $4668=$greedy_default;
 var $4669=$4668^1;
 $greedy_non_default=$4669;
 var $4670=$newoptions;
 var $4671=$4670&1;
 var $4672=($4671|0)!=0;
 var $4673=($4672?1:0);
 $req_caseopt=$4673;
 label=955;break;
 case 955: 
 var $4675=$newoptions;
 $options=$4675;
 var $4676=$2;
 HEAP32[(($4676)>>2)]=$4675;
 $previous=0;
 label=1119;break;
 case 956: 
 $bravalue=131;
 var $4678=HEAP32[(($ptr)>>2)];
 var $4679=(($4678+1)|0);
 HEAP32[(($ptr)>>2)]=$4679;
 label=957;break;
 case 957: 
 label=963;break;
 case 958: 
 var $4682=$options;
 var $4683=$4682&4096;
 var $4684=($4683|0)!=0;
 if($4684){label=959;break;}else{label=960;break;}
 case 959: 
 $bravalue=131;
 label=962;break;
 case 960: 
 label=961;break;
 case 961: 
 var $4688=$12;
 var $4689=(($4688+64)|0);
 var $4690=HEAP32[(($4689)>>2)];
 var $4691=((($4690)+(1))|0);
 HEAP32[(($4689)>>2)]=$4691;
 var $4692=$12;
 var $4693=(($4692+64)|0);
 var $4694=HEAP32[(($4693)>>2)];
 var $4695=$4694>>>8;
 var $4696=(($4695)&255);
 var $4697=$code;
 var $4698=(($4697+3)|0);
 HEAP8[($4698)]=$4696;
 var $4699=$12;
 var $4700=(($4699+64)|0);
 var $4701=HEAP32[(($4700)>>2)];
 var $4702=$4701&255;
 var $4703=(($4702)&255);
 var $4704=$code;
 var $4705=(($4704+4)|0);
 HEAP8[($4705)]=$4703;
 $skipbytes=2;
 label=962;break;
 case 962: 
 label=963;break;
 case 963: 
 label=964;break;
 case 964: 
 var $4709=$12;
 var $4710=(($4709+88)|0);
 var $4711=HEAP32[(($4710)>>2)];
 var $4712=((($4711)+(1))|0);
 HEAP32[(($4710)>>2)]=$4712;
 var $4713=($4712|0)>250;
 if($4713){label=965;break;}else{label=966;break;}
 case 965: 
 var $4715=$5;
 HEAP32[(($4715)>>2)]=82;
 label=1120;break;
 case 966: 
 var $4717=$code;
 $previous=$4717;
 var $4718=$bravalue;
 var $4719=(($4718)&255);
 var $4720=$code;
 HEAP8[($4720)]=$4719;
 var $4721=$code;
 HEAP32[(($tempcode)>>2)]=$4721;
 var $4722=$12;
 var $4723=(($4722+104)|0);
 var $4724=HEAP32[(($4723)>>2)];
 $tempreqvary=$4724;
 var $4725=$12;
 var $4726=(($4725+64)|0);
 var $4727=HEAP32[(($4726)>>2)];
 $tempbracount=$4727;
 HEAP32[(($length_prevgroup)>>2)]=0;
 var $4728=$newoptions;
 var $4729=$5;
 var $4730=$bravalue;
 var $4731=($4730|0)==127;
 if($4731){var $4736=1;label=968;break;}else{label=967;break;}
 case 967: 
 var $4733=$bravalue;
 var $4734=($4733|0)==128;
 var $4736=$4734;label=968;break;
 case 968: 
 var $4736;
 var $4737=($4736&1);
 var $4738=$reset_bracount;
 var $4739=$skipbytes;
 var $4740=$11;
 var $4741=$bravalue;
 var $4742=($4741|0)==135;
 var $4743=($4742?1:0);
 var $4744=((($4740)+($4743))|0);
 var $4745=$10;
 var $4746=$12;
 var $4747=$13;
 var $4748=($4747|0)==0;
 if($4748){label=969;break;}else{label=970;break;}
 case 969: 
 var $4752=0;label=971;break;
 case 970: 
 var $4752=$length_prevgroup;label=971;break;
 case 971: 
 var $4752;
 var $4753=_compile_regex($4728,$tempcode,$ptr,$4729,$4737,$4738,$4739,$4744,$subfirstchar,$subfirstcharflags,$subreqchar,$subreqcharflags,$4745,$4746,$4752);
 var $4754=($4753|0)!=0;
 if($4754){label=973;break;}else{label=972;break;}
 case 972: 
 label=1120;break;
 case 973: 
 var $4757=$12;
 var $4758=(($4757+88)|0);
 var $4759=HEAP32[(($4758)>>2)];
 var $4760=((($4759)-(1))|0);
 HEAP32[(($4758)>>2)]=$4760;
 var $4761=$bravalue;
 var $4762=($4761|0)==129;
 if($4762){label=974;break;}else{label=976;break;}
 case 974: 
 var $4764=$12;
 var $4765=(($4764+64)|0);
 var $4766=HEAP32[(($4765)>>2)];
 var $4767=$tempbracount;
 var $4768=($4766>>>0)<=($4767>>>0);
 if($4768){label=975;break;}else{label=976;break;}
 case 975: 
 var $4770=$code;
 HEAP8[($4770)]=-126;
 label=976;break;
 case 976: 
 var $4772=$bravalue;
 var $4773=($4772|0)>=125;
 if($4773){label=977;break;}else{label=979;break;}
 case 977: 
 var $4775=$bravalue;
 var $4776=($4775|0)<=128;
 if($4776){label=978;break;}else{label=979;break;}
 case 978: 
 var $4778=$12;
 var $4779=(($4778+92)|0);
 var $4780=HEAP32[(($4779)>>2)];
 var $4781=((($4780)-(1))|0);
 HEAP32[(($4779)>>2)]=$4781;
 label=979;break;
 case 979: 
 var $4783=$bravalue;
 var $4784=($4783|0)==135;
 if($4784){label=980;break;}else{label=994;break;}
 case 980: 
 var $4786=$13;
 var $4787=($4786|0)==0;
 if($4787){label=981;break;}else{label=994;break;}
 case 981: 
 var $4789=$code;
 $tc=$4789;
 $condcount=0;
 label=982;break;
 case 982: 
 var $4791=$condcount;
 var $4792=((($4791)+(1))|0);
 $condcount=$4792;
 var $4793=$tc;
 var $4794=(($4793+1)|0);
 var $4795=HEAP8[($4794)];
 var $4796=($4795&255);
 var $4797=$4796<<8;
 var $4798=$tc;
 var $4799=(($4798+2)|0);
 var $4800=HEAP8[($4799)];
 var $4801=($4800&255);
 var $4802=$4797|$4801;
 var $4803=$tc;
 var $4804=(($4803+$4802)|0);
 $tc=$4804;
 label=983;break;
 case 983: 
 var $4806=$tc;
 var $4807=HEAP8[($4806)];
 var $4808=($4807&255);
 var $4809=($4808|0)!=120;
 if($4809){label=982;break;}else{label=984;break;}
 case 984: 
 var $4811=$code;
 var $4812=(($4811+3)|0);
 var $4813=HEAP8[($4812)];
 var $4814=($4813&255);
 var $4815=($4814|0)==145;
 if($4815){label=985;break;}else{label=988;break;}
 case 985: 
 var $4817=$condcount;
 var $4818=($4817|0)>1;
 if($4818){label=986;break;}else{label=987;break;}
 case 986: 
 var $4820=$5;
 HEAP32[(($4820)>>2)]=54;
 label=1120;break;
 case 987: 
 $bravalue=145;
 label=993;break;
 case 988: 
 var $4823=$condcount;
 var $4824=($4823|0)>2;
 if($4824){label=989;break;}else{label=990;break;}
 case 989: 
 var $4826=$5;
 HEAP32[(($4826)>>2)]=27;
 label=1120;break;
 case 990: 
 var $4828=$condcount;
 var $4829=($4828|0)==1;
 if($4829){label=991;break;}else{label=992;break;}
 case 991: 
 HEAP32[(($subreqcharflags)>>2)]=-1;
 HEAP32[(($subfirstcharflags)>>2)]=-1;
 label=992;break;
 case 992: 
 label=993;break;
 case 993: 
 label=994;break;
 case 994: 
 var $4834=HEAP32[(($ptr)>>2)];
 var $4835=HEAP8[($4834)];
 var $4836=($4835&255);
 var $4837=($4836|0)!=41;
 if($4837){label=995;break;}else{label=996;break;}
 case 995: 
 var $4839=$5;
 HEAP32[(($4839)>>2)]=14;
 label=1120;break;
 case 996: 
 var $4841=$13;
 var $4842=($4841|0)!=0;
 if($4842){label=997;break;}else{label=1000;break;}
 case 997: 
 var $4844=$13;
 var $4845=HEAP32[(($4844)>>2)];
 var $4846=(((2147483627)-($4845))|0);
 var $4847=HEAP32[(($length_prevgroup)>>2)];
 var $4848=((($4847)-(2))|0);
 var $4849=((($4848)-(4))|0);
 var $4850=($4846|0)<($4849|0);
 if($4850){label=998;break;}else{label=999;break;}
 case 998: 
 var $4852=$5;
 HEAP32[(($4852)>>2)]=20;
 label=1120;break;
 case 999: 
 var $4854=HEAP32[(($length_prevgroup)>>2)];
 var $4855=((($4854)-(2))|0);
 var $4856=((($4855)-(4))|0);
 var $4857=$13;
 var $4858=HEAP32[(($4857)>>2)];
 var $4859=((($4858)+($4856))|0);
 HEAP32[(($4857)>>2)]=$4859;
 var $4860=$code;
 var $4861=(($4860+1)|0);
 $code=$4861;
 var $4862=$code;
 var $4863=(($4862)|0);
 HEAP8[($4863)]=0;
 var $4864=$code;
 var $4865=(($4864+1)|0);
 HEAP8[($4865)]=3;
 var $4866=$code;
 var $4867=(($4866+2)|0);
 $code=$4867;
 var $4868=$code;
 var $4869=(($4868+1)|0);
 $code=$4869;
 HEAP8[($4868)]=120;
 var $4870=$code;
 var $4871=(($4870)|0);
 HEAP8[($4871)]=0;
 var $4872=$code;
 var $4873=(($4872+1)|0);
 HEAP8[($4873)]=3;
 var $4874=$code;
 var $4875=(($4874+2)|0);
 $code=$4875;
 label=1118;break;
 case 1000: 
 var $4877=HEAP32[(($tempcode)>>2)];
 $code=$4877;
 var $4878=$bravalue;
 var $4879=($4878|0)==145;
 if($4879){label=1001;break;}else{label=1002;break;}
 case 1001: 
 label=1118;break;
 case 1002: 
 var $4882=$reqchar;
 $zeroreqchar=$4882;
 var $4883=$reqcharflags;
 $zeroreqcharflags=$4883;
 var $4884=$firstchar;
 $zerofirstchar=$4884;
 var $4885=$firstcharflags;
 $zerofirstcharflags=$4885;
 $groupsetfirstchar=0;
 var $4886=$bravalue;
 var $4887=($4886|0)>=129;
 if($4887){label=1003;break;}else{label=1015;break;}
 case 1003: 
 var $4889=$firstcharflags;
 var $4890=($4889|0)==-2;
 if($4890){label=1004;break;}else{label=1008;break;}
 case 1004: 
 var $4892=HEAP32[(($subfirstcharflags)>>2)];
 var $4893=($4892|0)>=0;
 if($4893){label=1005;break;}else{label=1006;break;}
 case 1005: 
 var $4895=HEAP32[(($subfirstchar)>>2)];
 $firstchar=$4895;
 var $4896=HEAP32[(($subfirstcharflags)>>2)];
 $firstcharflags=$4896;
 $groupsetfirstchar=1;
 label=1007;break;
 case 1006: 
 $firstcharflags=-1;
 label=1007;break;
 case 1007: 
 $zerofirstcharflags=-1;
 label=1012;break;
 case 1008: 
 var $4900=HEAP32[(($subfirstcharflags)>>2)];
 var $4901=($4900|0)>=0;
 if($4901){label=1009;break;}else{label=1011;break;}
 case 1009: 
 var $4903=HEAP32[(($subreqcharflags)>>2)];
 var $4904=($4903|0)<0;
 if($4904){label=1010;break;}else{label=1011;break;}
 case 1010: 
 var $4906=HEAP32[(($subfirstchar)>>2)];
 HEAP32[(($subreqchar)>>2)]=$4906;
 var $4907=HEAP32[(($subfirstcharflags)>>2)];
 var $4908=$tempreqvary;
 var $4909=$4907|$4908;
 HEAP32[(($subreqcharflags)>>2)]=$4909;
 label=1011;break;
 case 1011: 
 label=1012;break;
 case 1012: 
 var $4912=HEAP32[(($subreqcharflags)>>2)];
 var $4913=($4912|0)>=0;
 if($4913){label=1013;break;}else{label=1014;break;}
 case 1013: 
 var $4915=HEAP32[(($subreqchar)>>2)];
 $reqchar=$4915;
 var $4916=HEAP32[(($subreqcharflags)>>2)];
 $reqcharflags=$4916;
 label=1014;break;
 case 1014: 
 label=1019;break;
 case 1015: 
 var $4919=$bravalue;
 var $4920=($4919|0)==125;
 if($4920){label=1016;break;}else{label=1018;break;}
 case 1016: 
 var $4922=HEAP32[(($subreqcharflags)>>2)];
 var $4923=($4922|0)>=0;
 if($4923){label=1017;break;}else{label=1018;break;}
 case 1017: 
 var $4925=HEAP32[(($subreqchar)>>2)];
 $reqchar=$4925;
 var $4926=HEAP32[(($subreqcharflags)>>2)];
 $reqcharflags=$4926;
 label=1018;break;
 case 1018: 
 label=1019;break;
 case 1019: 
 label=1118;break;
 case 1020: 
 var $4930=HEAP32[(($ptr)>>2)];
 HEAP32[(($tempptr)>>2)]=$4930;
 var $4931=$5;
 var $4932=$12;
 var $4933=(($4932+64)|0);
 var $4934=HEAP32[(($4933)>>2)];
 var $4935=$options;
 var $4936=_check_escape($ptr,$ec,$4931,$4934,$4935,0);
 $escape=$4936;
 var $4937=$5;
 var $4938=HEAP32[(($4937)>>2)];
 var $4939=($4938|0)!=0;
 if($4939){label=1021;break;}else{label=1022;break;}
 case 1021: 
 label=1120;break;
 case 1022: 
 var $4942=$escape;
 var $4943=($4942|0)==0;
 if($4943){label=1023;break;}else{label=1024;break;}
 case 1023: 
 var $4945=HEAP32[(($ec)>>2)];
 $c=$4945;
 label=1095;break;
 case 1024: 
 var $4947=$escape;
 var $4948=($4947|0)==26;
 if($4948){label=1025;break;}else{label=1030;break;}
 case 1025: 
 var $4950=HEAP32[(($ptr)>>2)];
 var $4951=(($4950+1)|0);
 var $4952=HEAP8[($4951)];
 var $4953=($4952&255);
 var $4954=($4953|0)==92;
 if($4954){label=1026;break;}else{label=1028;break;}
 case 1026: 
 var $4956=HEAP32[(($ptr)>>2)];
 var $4957=(($4956+2)|0);
 var $4958=HEAP8[($4957)];
 var $4959=($4958&255);
 var $4960=($4959|0)==69;
 if($4960){label=1027;break;}else{label=1028;break;}
 case 1027: 
 var $4962=HEAP32[(($ptr)>>2)];
 var $4963=(($4962+2)|0);
 HEAP32[(($ptr)>>2)]=$4963;
 label=1029;break;
 case 1028: 
 $inescq=1;
 label=1029;break;
 case 1029: 
 label=1119;break;
 case 1030: 
 var $4967=$escape;
 var $4968=($4967|0)==25;
 if($4968){label=1031;break;}else{label=1032;break;}
 case 1031: 
 label=1119;break;
 case 1032: 
 var $4971=$firstcharflags;
 var $4972=($4971|0)==-2;
 if($4972){label=1033;break;}else{label=1036;break;}
 case 1033: 
 var $4974=$escape;
 var $4975=($4974|0)>5;
 if($4975){label=1034;break;}else{label=1036;break;}
 case 1034: 
 var $4977=$escape;
 var $4978=($4977|0)<23;
 if($4978){label=1035;break;}else{label=1036;break;}
 case 1035: 
 $firstcharflags=-1;
 label=1036;break;
 case 1036: 
 var $4981=$firstchar;
 $zerofirstchar=$4981;
 var $4982=$firstcharflags;
 $zerofirstcharflags=$4982;
 var $4983=$reqchar;
 $zeroreqchar=$4983;
 var $4984=$reqcharflags;
 $zeroreqcharflags=$4984;
 var $4985=$escape;
 var $4986=($4985|0)==27;
 if($4986){label=1037;break;}else{label=1050;break;}
 case 1037: 
 var $4988=$12;
 var $4989=(($4988+32)|0);
 var $4990=HEAP32[(($4989)>>2)];
 $save_hwm=$4990;
 var $4991=HEAP32[(($ptr)>>2)];
 var $4992=(($4991+1)|0);
 HEAP32[(($ptr)>>2)]=$4992;
 var $4993=HEAP8[($4992)];
 var $4994=($4993&255);
 var $4995=($4994|0)==60;
 var $4996=($4995?62:39);
 $terminator=$4996;
 $skipbytes=0;
 $reset_bracount=0;
 var $4997=HEAP32[(($ptr)>>2)];
 var $4998=(($4997+1)|0);
 var $4999=HEAP8[($4998)];
 var $5000=($4999&255);
 $cf=$5000;
 var $5001=$cf;
 var $5002=($5001|0)!=43;
 if($5002){label=1038;break;}else{label=1042;break;}
 case 1038: 
 var $5004=$cf;
 var $5005=($5004|0)!=45;
 if($5005){label=1039;break;}else{label=1042;break;}
 case 1039: 
 var $5007=$cf;
 var $5008=($5007>>>0)>=48;
 if($5008){label=1040;break;}else{label=1041;break;}
 case 1040: 
 var $5010=$cf;
 var $5011=($5010>>>0)<=57;
 if($5011){label=1042;break;}else{label=1041;break;}
 case 1041: 
 $is_recurse=1;
 label=813;break;
 case 1042: 
 var $5014=HEAP32[(($ptr)>>2)];
 var $5015=(($5014+2)|0);
 $p19=$5015;
 label=1043;break;
 case 1043: 
 var $5017=$p19;
 var $5018=HEAP8[($5017)];
 var $5019=($5018&255);
 var $5020=($5019|0)>=48;
 if($5020){label=1044;break;}else{var $5027=0;label=1045;break;}
 case 1044: 
 var $5022=$p19;
 var $5023=HEAP8[($5022)];
 var $5024=($5023&255);
 var $5025=($5024|0)<=57;
 var $5027=$5025;label=1045;break;
 case 1045: 
 var $5027;
 if($5027){label=1046;break;}else{label=1047;break;}
 case 1046: 
 var $5029=$p19;
 var $5030=(($5029+1)|0);
 $p19=$5030;
 label=1043;break;
 case 1047: 
 var $5032=$p19;
 var $5033=HEAP8[($5032)];
 var $5034=($5033&255);
 var $5035=$terminator;
 var $5036=(($5035)&255);
 var $5037=($5036&255);
 var $5038=($5034|0)!=($5037|0);
 if($5038){label=1048;break;}else{label=1049;break;}
 case 1048: 
 var $5040=$5;
 HEAP32[(($5040)>>2)]=57;
 label=1118;break;
 case 1049: 
 var $5042=HEAP32[(($ptr)>>2)];
 var $5043=(($5042+1)|0);
 HEAP32[(($ptr)>>2)]=$5043;
 label=883;break;
 case 1050: 
 var $5045=$escape;
 var $5046=($5045|0)==28;
 if($5046){label=1051;break;}else{label=1059;break;}
 case 1051: 
 var $5048=HEAP32[(($ptr)>>2)];
 var $5049=(($5048+1)|0);
 var $5050=HEAP8[($5049)];
 var $5051=($5050&255);
 var $5052=($5051|0)!=60;
 if($5052){label=1052;break;}else{label=1055;break;}
 case 1052: 
 var $5054=HEAP32[(($ptr)>>2)];
 var $5055=(($5054+1)|0);
 var $5056=HEAP8[($5055)];
 var $5057=($5056&255);
 var $5058=($5057|0)!=39;
 if($5058){label=1053;break;}else{label=1055;break;}
 case 1053: 
 var $5060=HEAP32[(($ptr)>>2)];
 var $5061=(($5060+1)|0);
 var $5062=HEAP8[($5061)];
 var $5063=($5062&255);
 var $5064=($5063|0)!=123;
 if($5064){label=1054;break;}else{label=1055;break;}
 case 1054: 
 var $5066=$5;
 HEAP32[(($5066)>>2)]=69;
 label=1118;break;
 case 1055: 
 $is_recurse=0;
 var $5068=HEAP32[(($ptr)>>2)];
 var $5069=(($5068+1)|0);
 HEAP32[(($ptr)>>2)]=$5069;
 var $5070=HEAP8[($5069)];
 var $5071=($5070&255);
 var $5072=($5071|0)==60;
 if($5072){label=1056;break;}else{label=1057;break;}
 case 1056: 
 var $5081=62;label=1058;break;
 case 1057: 
 var $5075=HEAP32[(($ptr)>>2)];
 var $5076=HEAP8[($5075)];
 var $5077=($5076&255);
 var $5078=($5077|0)==39;
 var $5079=($5078?39:125);
 var $5081=$5079;label=1058;break;
 case 1058: 
 var $5081;
 $terminator=$5081;
 label=813;break;
 case 1059: 
 var $5083=$escape;
 var $5084=($5083|0)<0;
 if($5084){label=1060;break;}else{label=1075;break;}
 case 1060: 
 var $5086=$escape;
 var $5087=(((-$5086))|0);
 $recno=$5087;
 label=1061;break;
 case 1061: 
 var $5089=$firstcharflags;
 var $5090=($5089|0)==-2;
 if($5090){label=1062;break;}else{label=1063;break;}
 case 1062: 
 $firstcharflags=-1;
 label=1063;break;
 case 1063: 
 var $5093=$code;
 $previous=$5093;
 var $5094=$options;
 var $5095=$5094&1;
 var $5096=($5095|0)!=0;
 var $5097=($5096?114:113);
 var $5098=(($5097)&255);
 var $5099=$code;
 var $5100=(($5099+1)|0);
 $code=$5100;
 HEAP8[($5099)]=$5098;
 var $5101=$recno;
 var $5102=$5101>>8;
 var $5103=(($5102)&255);
 var $5104=$code;
 var $5105=(($5104)|0);
 HEAP8[($5105)]=$5103;
 var $5106=$recno;
 var $5107=$5106&255;
 var $5108=(($5107)&255);
 var $5109=$code;
 var $5110=(($5109+1)|0);
 HEAP8[($5110)]=$5108;
 var $5111=$code;
 var $5112=(($5111+2)|0);
 $code=$5112;
 var $5113=$recno;
 var $5114=($5113|0)<32;
 if($5114){label=1064;break;}else{label=1065;break;}
 case 1064: 
 var $5116=$recno;
 var $5117=1<<$5116;
 var $5120=$5117;label=1066;break;
 case 1065: 
 var $5120=1;label=1066;break;
 case 1066: 
 var $5120;
 var $5121=$12;
 var $5122=(($5121+80)|0);
 var $5123=HEAP32[(($5122)>>2)];
 var $5124=$5123|$5120;
 HEAP32[(($5122)>>2)]=$5124;
 var $5125=$recno;
 var $5126=$12;
 var $5127=(($5126+76)|0);
 var $5128=HEAP32[(($5127)>>2)];
 var $5129=($5125|0)>($5128|0);
 if($5129){label=1067;break;}else{label=1068;break;}
 case 1067: 
 var $5131=$recno;
 var $5132=$12;
 var $5133=(($5132+76)|0);
 HEAP32[(($5133)>>2)]=$5131;
 label=1068;break;
 case 1068: 
 var $5135=$12;
 var $5136=(($5135+36)|0);
 var $5137=HEAP32[(($5136)>>2)];
 $oc20=$5137;
 label=1069;break;
 case 1069: 
 var $5139=$oc20;
 var $5140=($5139|0)!=0;
 if($5140){label=1070;break;}else{label=1074;break;}
 case 1070: 
 var $5142=$oc20;
 var $5143=(($5142+4)|0);
 var $5144=HEAP16[(($5143)>>1)];
 var $5145=($5144&65535);
 var $5146=$recno;
 var $5147=($5145|0)==($5146|0);
 if($5147){label=1071;break;}else{label=1072;break;}
 case 1071: 
 var $5149=$oc20;
 var $5150=(($5149+6)|0);
 HEAP16[(($5150)>>1)]=1;
 label=1074;break;
 case 1072: 
 label=1073;break;
 case 1073: 
 var $5153=$oc20;
 var $5154=(($5153)|0);
 var $5155=HEAP32[(($5154)>>2)];
 $oc20=$5155;
 label=1069;break;
 case 1074: 
 label=1094;break;
 case 1075: 
 var $5158=$escape;
 var $5159=($5158|0)==22;
 if($5159){label=1078;break;}else{label=1076;break;}
 case 1076: 
 var $5161=$escape;
 var $5162=($5161|0)==15;
 if($5162){label=1078;break;}else{label=1077;break;}
 case 1077: 
 var $5164=$escape;
 var $5165=($5164|0)==16;
 if($5165){label=1078;break;}else{label=1079;break;}
 case 1078: 
 var $5167=$5;
 HEAP32[(($5167)>>2)]=45;
 label=1120;break;
 case 1079: 
 var $5169=$escape;
 var $5170=($5169|0)==5;
 if($5170){label=1082;break;}else{label=1080;break;}
 case 1080: 
 var $5172=$escape;
 var $5173=($5172|0)==4;
 if($5173){label=1082;break;}else{label=1081;break;}
 case 1081: 
 var $5175=$escape;
 var $5176=($5175|0)==1;
 if($5176){label=1082;break;}else{label=1084;break;}
 case 1082: 
 var $5178=$12;
 var $5179=(($5178+72)|0);
 var $5180=HEAP32[(($5179)>>2)];
 var $5181=($5180|0)==0;
 if($5181){label=1083;break;}else{label=1084;break;}
 case 1083: 
 var $5183=$12;
 var $5184=(($5183+72)|0);
 HEAP32[(($5184)>>2)]=1;
 label=1084;break;
 case 1084: 
 var $5186=$escape;
 var $5187=($5186|0)>5;
 if($5187){label=1085;break;}else{label=1087;break;}
 case 1085: 
 var $5189=$escape;
 var $5190=($5189|0)<23;
 if($5190){label=1086;break;}else{label=1087;break;}
 case 1086: 
 var $5192=$code;
 var $5195=$5192;label=1088;break;
 case 1087: 
 var $5195=0;label=1088;break;
 case 1088: 
 var $5195;
 $previous=$5195;
 var $5196=$utf;
 var $5197=($5196|0)!=0;
 if($5197){label=1091;break;}else{label=1089;break;}
 case 1089: 
 var $5199=$escape;
 var $5200=($5199|0)==14;
 if($5200){label=1090;break;}else{label=1091;break;}
 case 1090: 
 var $5205=13;label=1092;break;
 case 1091: 
 var $5203=$escape;
 var $5205=$5203;label=1092;break;
 case 1092: 
 var $5205;
 var $5206=(($5205)&255);
 var $5207=$code;
 var $5208=(($5207+1)|0);
 $code=$5208;
 HEAP8[($5207)]=$5206;
 label=1093;break;
 case 1093: 
 label=1094;break;
 case 1094: 
 label=1119;break;
 case 1095: 
 var $5212=$c;
 var $5213=(($5212)&255);
 var $5214=(($mcbuffer)|0);
 HEAP8[($5214)]=$5213;
 $mclength=1;
 label=1098;break;
 case 1096: 
 label=1097;break;
 case 1097: 
 $mclength=1;
 var $5217=$c;
 var $5218=(($5217)&255);
 var $5219=(($mcbuffer)|0);
 HEAP8[($5219)]=$5218;
 label=1098;break;
 case 1098: 
 var $5221=$code;
 $previous=$5221;
 var $5222=$options;
 var $5223=$5222&1;
 var $5224=($5223|0)!=0;
 var $5225=($5224?30:29);
 var $5226=(($5225)&255);
 var $5227=$code;
 var $5228=(($5227+1)|0);
 $code=$5228;
 HEAP8[($5227)]=$5226;
 $c=0;
 label=1099;break;
 case 1099: 
 var $5230=$c;
 var $5231=$mclength;
 var $5232=($5230>>>0)<($5231>>>0);
 if($5232){label=1100;break;}else{label=1102;break;}
 case 1100: 
 var $5234=$c;
 var $5235=(($mcbuffer+$5234)|0);
 var $5236=HEAP8[($5235)];
 var $5237=$code;
 var $5238=(($5237+1)|0);
 $code=$5238;
 HEAP8[($5237)]=$5236;
 label=1101;break;
 case 1101: 
 var $5240=$c;
 var $5241=((($5240)+(1))|0);
 $c=$5241;
 label=1099;break;
 case 1102: 
 var $5243=(($mcbuffer)|0);
 var $5244=HEAP8[($5243)];
 var $5245=($5244&255);
 var $5246=($5245|0)==13;
 if($5246){label=1104;break;}else{label=1103;break;}
 case 1103: 
 var $5248=(($mcbuffer)|0);
 var $5249=HEAP8[($5248)];
 var $5250=($5249&255);
 var $5251=($5250|0)==10;
 if($5251){label=1104;break;}else{label=1105;break;}
 case 1104: 
 var $5253=$12;
 var $5254=(($5253+100)|0);
 var $5255=HEAP32[(($5254)>>2)];
 var $5256=$5255|2048;
 HEAP32[(($5254)>>2)]=$5256;
 label=1105;break;
 case 1105: 
 var $5258=$firstcharflags;
 var $5259=($5258|0)==-2;
 if($5259){label=1106;break;}else{label=1113;break;}
 case 1106: 
 $zerofirstcharflags=-1;
 var $5261=$reqchar;
 $zeroreqchar=$5261;
 var $5262=$reqcharflags;
 $zeroreqcharflags=$5262;
 var $5263=$mclength;
 var $5264=($5263|0)==1;
 if($5264){label=1108;break;}else{label=1107;break;}
 case 1107: 
 var $5266=$req_caseopt;
 var $5267=($5266|0)==0;
 if($5267){label=1108;break;}else{label=1111;break;}
 case 1108: 
 var $5269=(($mcbuffer)|0);
 var $5270=HEAP8[($5269)];
 var $5271=($5270&255);
 var $5272=$req_caseopt;
 var $5273=$5271|$5272;
 $firstchar=$5273;
 var $5274=(($mcbuffer)|0);
 var $5275=HEAP8[($5274)];
 var $5276=($5275&255);
 $firstchar=$5276;
 var $5277=$req_caseopt;
 $firstcharflags=$5277;
 var $5278=$mclength;
 var $5279=($5278|0)!=1;
 if($5279){label=1109;break;}else{label=1110;break;}
 case 1109: 
 var $5281=$code;
 var $5282=((($5281)-(1))|0);
 var $5283=HEAP8[($5282)];
 var $5284=($5283&255);
 $reqchar=$5284;
 var $5285=$12;
 var $5286=(($5285+104)|0);
 var $5287=HEAP32[(($5286)>>2)];
 $reqcharflags=$5287;
 label=1110;break;
 case 1110: 
 label=1112;break;
 case 1111: 
 $reqcharflags=-1;
 $firstcharflags=-1;
 label=1112;break;
 case 1112: 
 label=1117;break;
 case 1113: 
 var $5292=$firstchar;
 $zerofirstchar=$5292;
 var $5293=$firstcharflags;
 $zerofirstcharflags=$5293;
 var $5294=$reqchar;
 $zeroreqchar=$5294;
 var $5295=$reqcharflags;
 $zeroreqcharflags=$5295;
 var $5296=$mclength;
 var $5297=($5296|0)==1;
 if($5297){label=1115;break;}else{label=1114;break;}
 case 1114: 
 var $5299=$req_caseopt;
 var $5300=($5299|0)==0;
 if($5300){label=1115;break;}else{label=1116;break;}
 case 1115: 
 var $5302=$code;
 var $5303=((($5302)-(1))|0);
 var $5304=HEAP8[($5303)];
 var $5305=($5304&255);
 $reqchar=$5305;
 var $5306=$req_caseopt;
 var $5307=$12;
 var $5308=(($5307+104)|0);
 var $5309=HEAP32[(($5308)>>2)];
 var $5310=$5306|$5309;
 $reqcharflags=$5310;
 label=1116;break;
 case 1116: 
 label=1117;break;
 case 1117: 
 label=1118;break;
 case 1118: 
 label=1119;break;
 case 1119: 
 var $5315=HEAP32[(($ptr)>>2)];
 var $5316=(($5315+1)|0);
 HEAP32[(($ptr)>>2)]=$5316;
 label=2;break;
 case 1120: 
 var $5318=HEAP32[(($ptr)>>2)];
 var $5319=$4;
 HEAP32[(($5319)>>2)]=$5318;
 $1=0;
 label=1121;break;
 case 1121: 
 var $5321=$1;
 STACKTOP=sp;return $5321;
  default: assert(0, "bad label: " + label);
 }
}
function _complete_callout($previous_callout,$ptr,$cd){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 var $length;
 $1=$previous_callout;
 $2=$ptr;
 $3=$cd;
 var $4=$2;
 var $5=$3;
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$4;
 var $9=$7;
 var $10=((($8)-($9))|0);
 var $11=$1;
 var $12=(($11+2)|0);
 var $13=HEAP8[($12)];
 var $14=($13&255);
 var $15=$14<<8;
 var $16=$1;
 var $17=(($16+3)|0);
 var $18=HEAP8[($17)];
 var $19=($18&255);
 var $20=$15|$19;
 var $21=((($10)-($20))|0);
 $length=$21;
 var $22=$length;
 var $23=$22>>8;
 var $24=(($23)&255);
 var $25=$1;
 var $26=(($25+4)|0);
 HEAP8[($26)]=$24;
 var $27=$length;
 var $28=$27&255;
 var $29=(($28)&255);
 var $30=$1;
 var $31=(($30+5)|0);
 HEAP8[($31)]=$29;
 STACKTOP=sp;return;
}
function _auto_callout($code,$ptr,$cd){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1;
 var $2;
 var $3;
 $1=$code;
 $2=$ptr;
 $3=$cd;
 var $4=$1;
 var $5=(($4+1)|0);
 $1=$5;
 HEAP8[($4)]=118;
 var $6=$1;
 var $7=(($6+1)|0);
 $1=$7;
 HEAP8[($6)]=-1;
 var $8=$2;
 var $9=$3;
 var $10=(($9+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$8;
 var $13=$11;
 var $14=((($12)-($13))|0);
 var $15=$14>>8;
 var $16=(($15)&255);
 var $17=$1;
 var $18=(($17)|0);
 HEAP8[($18)]=$16;
 var $19=$2;
 var $20=$3;
 var $21=(($20+24)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$19;
 var $24=$22;
 var $25=((($23)-($24))|0);
 var $26=$25&255;
 var $27=(($26)&255);
 var $28=$1;
 var $29=(($28+1)|0);
 HEAP8[($29)]=$27;
 var $30=$1;
 var $31=(($30+2)|0);
 HEAP8[($31)]=0;
 var $32=$1;
 var $33=(($32+3)|0);
 HEAP8[($33)]=0;
 var $34=$1;
 var $35=(($34+4)|0);
 STACKTOP=sp;return $35;
}
function _is_counted_repeat($p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 $2=$p;
 var $3=$2;
 var $4=HEAP8[($3)];
 var $5=($4&255);
 var $6=($5|0)>=48;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=$2;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=($10|0)<=57;
 if($11){label=4;break;}else{label=3;break;}
 case 3: 
 $1=0;
 label=24;break;
 case 4: 
 var $14=$2;
 var $15=(($14+1)|0);
 $2=$15;
 label=5;break;
 case 5: 
 var $17=$2;
 var $18=HEAP8[($17)];
 var $19=($18&255);
 var $20=($19|0)>=48;
 if($20){label=6;break;}else{var $27=0;label=7;break;}
 case 6: 
 var $22=$2;
 var $23=HEAP8[($22)];
 var $24=($23&255);
 var $25=($24|0)<=57;
 var $27=$25;label=7;break;
 case 7: 
 var $27;
 if($27){label=8;break;}else{label=9;break;}
 case 8: 
 var $29=$2;
 var $30=(($29+1)|0);
 $2=$30;
 label=5;break;
 case 9: 
 var $32=$2;
 var $33=HEAP8[($32)];
 var $34=($33&255);
 var $35=($34|0)==125;
 if($35){label=10;break;}else{label=11;break;}
 case 10: 
 $1=1;
 label=24;break;
 case 11: 
 var $38=$2;
 var $39=(($38+1)|0);
 $2=$39;
 var $40=HEAP8[($38)];
 var $41=($40&255);
 var $42=($41|0)!=44;
 if($42){label=12;break;}else{label=13;break;}
 case 12: 
 $1=0;
 label=24;break;
 case 13: 
 var $45=$2;
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=($47|0)==125;
 if($48){label=14;break;}else{label=15;break;}
 case 14: 
 $1=1;
 label=24;break;
 case 15: 
 var $51=$2;
 var $52=HEAP8[($51)];
 var $53=($52&255);
 var $54=($53|0)>=48;
 if($54){label=16;break;}else{label=17;break;}
 case 16: 
 var $56=$2;
 var $57=HEAP8[($56)];
 var $58=($57&255);
 var $59=($58|0)<=57;
 if($59){label=18;break;}else{label=17;break;}
 case 17: 
 $1=0;
 label=24;break;
 case 18: 
 var $62=$2;
 var $63=(($62+1)|0);
 $2=$63;
 label=19;break;
 case 19: 
 var $65=$2;
 var $66=HEAP8[($65)];
 var $67=($66&255);
 var $68=($67|0)>=48;
 if($68){label=20;break;}else{var $75=0;label=21;break;}
 case 20: 
 var $70=$2;
 var $71=HEAP8[($70)];
 var $72=($71&255);
 var $73=($72|0)<=57;
 var $75=$73;label=21;break;
 case 21: 
 var $75;
 if($75){label=22;break;}else{label=23;break;}
 case 22: 
 var $77=$2;
 var $78=(($77+1)|0);
 $2=$78;
 label=19;break;
 case 23: 
 var $80=$2;
 var $81=HEAP8[($80)];
 var $82=($81&255);
 var $83=($82|0)==125;
 var $84=($83&1);
 $1=$84;
 label=24;break;
 case 24: 
 var $86=$1;
 STACKTOP=sp;return $86;
  default: assert(0, "bad label: " + label);
 }
}
function _check_posix_syntax($ptr,$endptr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $terminator;
 $2=$ptr;
 $3=$endptr;
 var $4=$2;
 var $5=(($4+1)|0);
 $2=$5;
 var $6=HEAP8[($5)];
 $terminator=$6;
 var $7=$2;
 var $8=(($7+1)|0);
 $2=$8;
 label=2;break;
 case 2: 
 var $10=$2;
 var $11=HEAP8[($10)];
 var $12=($11&255);
 var $13=($12|0)!=0;
 if($13){label=3;break;}else{label=21;break;}
 case 3: 
 var $15=$2;
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=($17|0)==92;
 if($18){label=4;break;}else{label=6;break;}
 case 4: 
 var $20=$2;
 var $21=(($20+1)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=($23|0)==93;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 var $26=$2;
 var $27=(($26+1)|0);
 $2=$27;
 label=19;break;
 case 6: 
 var $29=$2;
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=($31|0)==93;
 if($32){label=7;break;}else{label=8;break;}
 case 7: 
 $1=0;
 label=22;break;
 case 8: 
 var $35=$2;
 var $36=HEAP8[($35)];
 var $37=($36&255);
 var $38=$terminator;
 var $39=($38&255);
 var $40=($37|0)==($39|0);
 if($40){label=9;break;}else{label=11;break;}
 case 9: 
 var $42=$2;
 var $43=(($42+1)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=($45|0)==93;
 if($46){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=$2;
 var $49=$3;
 HEAP32[(($49)>>2)]=$48;
 $1=1;
 label=22;break;
 case 11: 
 var $51=$2;
 var $52=HEAP8[($51)];
 var $53=($52&255);
 var $54=($53|0)==91;
 if($54){label=12;break;}else{label=17;break;}
 case 12: 
 var $56=$2;
 var $57=(($56+1)|0);
 var $58=HEAP8[($57)];
 var $59=($58&255);
 var $60=($59|0)==58;
 if($60){label=15;break;}else{label=13;break;}
 case 13: 
 var $62=$2;
 var $63=(($62+1)|0);
 var $64=HEAP8[($63)];
 var $65=($64&255);
 var $66=($65|0)==46;
 if($66){label=15;break;}else{label=14;break;}
 case 14: 
 var $68=$2;
 var $69=(($68+1)|0);
 var $70=HEAP8[($69)];
 var $71=($70&255);
 var $72=($71|0)==61;
 if($72){label=15;break;}else{label=17;break;}
 case 15: 
 var $74=$2;
 var $75=$3;
 var $76=_check_posix_syntax($74,$75);
 var $77=($76|0)!=0;
 if($77){label=16;break;}else{label=17;break;}
 case 16: 
 $1=0;
 label=22;break;
 case 17: 
 label=18;break;
 case 18: 
 label=19;break;
 case 19: 
 label=20;break;
 case 20: 
 var $83=$2;
 var $84=(($83+1)|0);
 $2=$84;
 label=2;break;
 case 21: 
 $1=0;
 label=22;break;
 case 22: 
 var $87=$1;
 STACKTOP=sp;return $87;
  default: assert(0, "bad label: " + label);
 }
}
function _check_posix_name($ptr,$len){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $pn;
 var $yield;
 $2=$ptr;
 $3=$len;
 $pn=232;
 $yield=0;
 label=2;break;
 case 2: 
 var $5=$yield;
 var $6=((320+$5)|0);
 var $7=HEAP8[($6)];
 var $8=($7&255);
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{label=7;break;}
 case 3: 
 var $11=$3;
 var $12=$yield;
 var $13=((320+$12)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=($11|0)==($15|0);
 if($16){label=4;break;}else{label=6;break;}
 case 4: 
 var $18=$2;
 var $19=$pn;
 var $20=$3;
 var $21=_strncmp($18,$19,$20);
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=$yield;
 $1=$24;
 label=8;break;
 case 6: 
 var $26=$yield;
 var $27=((320+$26)|0);
 var $28=HEAP8[($27)];
 var $29=($28&255);
 var $30=((($29)+(1))|0);
 var $31=$pn;
 var $32=(($31+$30)|0);
 $pn=$32;
 var $33=$yield;
 var $34=((($33)+(1))|0);
 $yield=$34;
 label=2;break;
 case 7: 
 $1=-1;
 label=8;break;
 case 8: 
 var $37=$1;
 STACKTOP=sp;return $37;
  default: assert(0, "bad label: " + label);
 }
}
function _check_escape($ptrptr,$chptr,$errorcodeptr,$bracount,$options,$isclass){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $utf;
 var $ptr;
 var $c;
 var $escape;
 var $i;
 var $oldptr;
 var $braced;
 var $negated;
 var $overflow;
 var $s;
 var $cc;
 var $p;
 var $cc1;
 var $cc2;
 var $cc3;
 var $cc4;
 $1=$ptrptr;
 $2=$chptr;
 $3=$errorcodeptr;
 $4=$bracount;
 $5=$options;
 $6=$isclass;
 var $7=$5;
 var $8=$7&2048;
 var $9=($8|0)!=0;
 var $10=($9&1);
 $utf=$10;
 var $11=$1;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+1)|0);
 $ptr=$13;
 $escape=0;
 var $14=$ptr;
 var $15=(($14+1)|0);
 $ptr=$15;
 var $16=HEAP8[($14)];
 var $17=($16&255);
 $c=$17;
 var $18=$ptr;
 var $19=((($18)-(1))|0);
 $ptr=$19;
 var $20=$c;
 var $21=($20|0)==0;
 if($21){label=2;break;}else{label=3;break;}
 case 2: 
 var $23=$3;
 HEAP32[(($23)>>2)]=1;
 label=209;break;
 case 3: 
 var $25=$c;
 var $26=($25>>>0)<48;
 if($26){label=5;break;}else{label=4;break;}
 case 4: 
 var $28=$c;
 var $29=($28>>>0)>122;
 if($29){label=5;break;}else{label=6;break;}
 case 5: 
 label=208;break;
 case 6: 
 var $32=$c;
 var $33=((($32)-(48))|0);
 var $34=((640+($33<<1))|0);
 var $35=HEAP16[(($34)>>1)];
 var $36=(($35<<16)>>16);
 $i=$36;
 var $37=($36|0)!=0;
 if($37){label=7;break;}else{label=11;break;}
 case 7: 
 var $39=$i;
 var $40=($39|0)>0;
 if($40){label=8;break;}else{label=9;break;}
 case 8: 
 var $42=$i;
 $c=$42;
 label=10;break;
 case 9: 
 var $44=$i;
 var $45=(((-$44))|0);
 $escape=$45;
 label=10;break;
 case 10: 
 label=207;break;
 case 11: 
 var $48=$c;
 switch(($48|0)){case 48:{ label=108;break;}case 111:{ label=118;break;}case 108:case 76:{ label=12;break;}case 117:{ label=13;break;}case 120:{ label=147;break;}case 99:{ label=193;break;}case 85:{ label=35;break;}case 103:{ label=38;break;}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:{ label=86;break;}default:{label=201;break;}}break;
 case 12: 
 var $50=$3;
 HEAP32[(($50)>>2)]=37;
 label=206;break;
 case 13: 
 var $52=$5;
 var $53=$52&33554432;
 var $54=($53|0)!=0;
 if($54){label=14;break;}else{label=33;break;}
 case 14: 
 var $56=$ptr;
 var $57=(($56+1)|0);
 var $58=HEAP8[($57)];
 var $59=($58&255);
 var $60=((4096+$59)|0);
 var $61=HEAP8[($60)];
 var $62=($61&255);
 var $63=$62&8;
 var $64=($63|0)!=0;
 if($64){label=15;break;}else{label=32;break;}
 case 15: 
 var $66=$ptr;
 var $67=(($66+2)|0);
 var $68=HEAP8[($67)];
 var $69=($68&255);
 var $70=((4096+$69)|0);
 var $71=HEAP8[($70)];
 var $72=($71&255);
 var $73=$72&8;
 var $74=($73|0)!=0;
 if($74){label=16;break;}else{label=32;break;}
 case 16: 
 var $76=$ptr;
 var $77=(($76+3)|0);
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=((4096+$79)|0);
 var $81=HEAP8[($80)];
 var $82=($81&255);
 var $83=$82&8;
 var $84=($83|0)!=0;
 if($84){label=17;break;}else{label=32;break;}
 case 17: 
 var $86=$ptr;
 var $87=(($86+4)|0);
 var $88=HEAP8[($87)];
 var $89=($88&255);
 var $90=((4096+$89)|0);
 var $91=HEAP8[($90)];
 var $92=($91&255);
 var $93=$92&8;
 var $94=($93|0)!=0;
 if($94){label=18;break;}else{label=32;break;}
 case 18: 
 $c=0;
 $i=0;
 label=19;break;
 case 19: 
 var $97=$i;
 var $98=($97|0)<4;
 if($98){label=20;break;}else{label=24;break;}
 case 20: 
 var $100=$ptr;
 var $101=(($100+1)|0);
 $ptr=$101;
 var $102=HEAP8[($101)];
 var $103=($102&255);
 $cc=$103;
 var $104=$cc;
 var $105=($104>>>0)>=97;
 if($105){label=21;break;}else{label=22;break;}
 case 21: 
 var $107=$cc;
 var $108=((($107)-(32))|0);
 $cc=$108;
 label=22;break;
 case 22: 
 var $110=$c;
 var $111=$110<<4;
 var $112=$cc;
 var $113=((($111)+($112))|0);
 var $114=$cc;
 var $115=($114>>>0)<65;
 var $116=($115?48:55);
 var $117=((($113)-($116))|0);
 $c=$117;
 label=23;break;
 case 23: 
 var $119=$i;
 var $120=((($119)+(1))|0);
 $i=$120;
 label=19;break;
 case 24: 
 var $122=$c;
 var $123=$utf;
 var $124=($123|0)!=0;
 var $125=($124?1114111:255);
 var $126=($122>>>0)>($125>>>0);
 if($126){label=25;break;}else{label=26;break;}
 case 25: 
 var $128=$3;
 HEAP32[(($128)>>2)]=76;
 label=31;break;
 case 26: 
 var $130=$utf;
 var $131=($130|0)!=0;
 if($131){label=27;break;}else{label=30;break;}
 case 27: 
 var $133=$c;
 var $134=($133>>>0)>=55296;
 if($134){label=28;break;}else{label=30;break;}
 case 28: 
 var $136=$c;
 var $137=($136>>>0)<=57343;
 if($137){label=29;break;}else{label=30;break;}
 case 29: 
 var $139=$3;
 HEAP32[(($139)>>2)]=73;
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 label=32;break;
 case 32: 
 label=34;break;
 case 33: 
 var $144=$3;
 HEAP32[(($144)>>2)]=37;
 label=34;break;
 case 34: 
 label=206;break;
 case 35: 
 var $147=$5;
 var $148=$147&33554432;
 var $149=($148|0)==0;
 if($149){label=36;break;}else{label=37;break;}
 case 36: 
 var $151=$3;
 HEAP32[(($151)>>2)]=37;
 label=37;break;
 case 37: 
 label=206;break;
 case 38: 
 var $154=$6;
 var $155=($154|0)!=0;
 if($155){label=39;break;}else{label=40;break;}
 case 39: 
 label=206;break;
 case 40: 
 var $158=$ptr;
 var $159=(($158+1)|0);
 var $160=HEAP8[($159)];
 var $161=($160&255);
 var $162=($161|0)==60;
 if($162){label=42;break;}else{label=41;break;}
 case 41: 
 var $164=$ptr;
 var $165=(($164+1)|0);
 var $166=HEAP8[($165)];
 var $167=($166&255);
 var $168=($167|0)==39;
 if($168){label=42;break;}else{label=43;break;}
 case 42: 
 $escape=27;
 label=206;break;
 case 43: 
 var $171=$ptr;
 var $172=(($171+1)|0);
 var $173=HEAP8[($172)];
 var $174=($173&255);
 var $175=($174|0)==123;
 if($175){label=44;break;}else{label=58;break;}
 case 44: 
 var $177=$ptr;
 var $178=(($177+2)|0);
 $p=$178;
 label=45;break;
 case 45: 
 var $180=$p;
 var $181=HEAP8[($180)];
 var $182=($181&255);
 var $183=($182|0)!=0;
 if($183){label=46;break;}else{var $190=0;label=47;break;}
 case 46: 
 var $185=$p;
 var $186=HEAP8[($185)];
 var $187=($186&255);
 var $188=($187|0)!=125;
 var $190=$188;label=47;break;
 case 47: 
 var $190;
 if($190){label=48;break;}else{label=54;break;}
 case 48: 
 var $192=$p;
 var $193=HEAP8[($192)];
 var $194=($193&255);
 var $195=($194|0)!=45;
 if($195){label=49;break;}else{label=52;break;}
 case 49: 
 var $197=$p;
 var $198=HEAP8[($197)];
 var $199=($198&255);
 var $200=($199|0)>=48;
 if($200){label=50;break;}else{label=51;break;}
 case 50: 
 var $202=$p;
 var $203=HEAP8[($202)];
 var $204=($203&255);
 var $205=($204|0)<=57;
 if($205){label=52;break;}else{label=51;break;}
 case 51: 
 label=54;break;
 case 52: 
 label=53;break;
 case 53: 
 var $209=$p;
 var $210=(($209+1)|0);
 $p=$210;
 label=45;break;
 case 54: 
 var $212=$p;
 var $213=HEAP8[($212)];
 var $214=($213&255);
 var $215=($214|0)!=0;
 if($215){label=55;break;}else{label=57;break;}
 case 55: 
 var $217=$p;
 var $218=HEAP8[($217)];
 var $219=($218&255);
 var $220=($219|0)!=125;
 if($220){label=56;break;}else{label=57;break;}
 case 56: 
 $escape=28;
 label=206;break;
 case 57: 
 $braced=1;
 var $223=$ptr;
 var $224=(($223+1)|0);
 $ptr=$224;
 label=59;break;
 case 58: 
 $braced=0;
 label=59;break;
 case 59: 
 var $227=$ptr;
 var $228=(($227+1)|0);
 var $229=HEAP8[($228)];
 var $230=($229&255);
 var $231=($230|0)==45;
 if($231){label=60;break;}else{label=61;break;}
 case 60: 
 $negated=1;
 var $233=$ptr;
 var $234=(($233+1)|0);
 $ptr=$234;
 label=62;break;
 case 61: 
 $negated=0;
 label=62;break;
 case 62: 
 $s=0;
 $overflow=0;
 label=63;break;
 case 63: 
 var $238=$ptr;
 var $239=(($238+1)|0);
 var $240=HEAP8[($239)];
 var $241=($240&255);
 var $242=($241|0)>=48;
 if($242){label=64;break;}else{var $250=0;label=65;break;}
 case 64: 
 var $244=$ptr;
 var $245=(($244+1)|0);
 var $246=HEAP8[($245)];
 var $247=($246&255);
 var $248=($247|0)<=57;
 var $250=$248;label=65;break;
 case 65: 
 var $250;
 if($250){label=66;break;}else{label=69;break;}
 case 66: 
 var $252=$s;
 var $253=($252|0)>214748363;
 if($253){label=67;break;}else{label=68;break;}
 case 67: 
 $overflow=1;
 label=69;break;
 case 68: 
 var $256=$s;
 var $257=((($256)*(10))&-1);
 var $258=$ptr;
 var $259=(($258+1)|0);
 $ptr=$259;
 var $260=HEAP8[($259)];
 var $261=($260&255);
 var $262=((($261)-(48))|0);
 var $263=((($257)+($262))|0);
 $s=$263;
 label=63;break;
 case 69: 
 var $265=$overflow;
 var $266=($265|0)!=0;
 if($266){label=70;break;}else{label=76;break;}
 case 70: 
 label=71;break;
 case 71: 
 var $269=$ptr;
 var $270=(($269+1)|0);
 var $271=HEAP8[($270)];
 var $272=($271&255);
 var $273=($272|0)>=48;
 if($273){label=72;break;}else{var $281=0;label=73;break;}
 case 72: 
 var $275=$ptr;
 var $276=(($275+1)|0);
 var $277=HEAP8[($276)];
 var $278=($277&255);
 var $279=($278|0)<=57;
 var $281=$279;label=73;break;
 case 73: 
 var $281;
 if($281){label=74;break;}else{label=75;break;}
 case 74: 
 var $283=$ptr;
 var $284=(($283+1)|0);
 $ptr=$284;
 label=71;break;
 case 75: 
 var $286=$3;
 HEAP32[(($286)>>2)]=61;
 label=206;break;
 case 76: 
 var $288=$braced;
 var $289=($288|0)!=0;
 if($289){label=77;break;}else{label=79;break;}
 case 77: 
 var $291=$ptr;
 var $292=(($291+1)|0);
 $ptr=$292;
 var $293=HEAP8[($292)];
 var $294=($293&255);
 var $295=($294|0)!=125;
 if($295){label=78;break;}else{label=79;break;}
 case 78: 
 var $297=$3;
 HEAP32[(($297)>>2)]=57;
 label=206;break;
 case 79: 
 var $299=$s;
 var $300=($299|0)==0;
 if($300){label=80;break;}else{label=81;break;}
 case 80: 
 var $302=$3;
 HEAP32[(($302)>>2)]=58;
 label=206;break;
 case 81: 
 var $304=$negated;
 var $305=($304|0)!=0;
 if($305){label=82;break;}else{label=85;break;}
 case 82: 
 var $307=$s;
 var $308=$4;
 var $309=($307|0)>($308|0);
 if($309){label=83;break;}else{label=84;break;}
 case 83: 
 var $311=$3;
 HEAP32[(($311)>>2)]=15;
 label=206;break;
 case 84: 
 var $313=$4;
 var $314=$s;
 var $315=((($314)-(1))|0);
 var $316=((($313)-($315))|0);
 $s=$316;
 label=85;break;
 case 85: 
 var $318=$s;
 var $319=(((-$318))|0);
 $escape=$319;
 label=206;break;
 case 86: 
 var $321=$6;
 var $322=($321|0)!=0;
 if($322){label=105;break;}else{label=87;break;}
 case 87: 
 var $324=$ptr;
 $oldptr=$324;
 var $325=$c;
 var $326=((($325)-(48))|0);
 $s=$326;
 $overflow=0;
 label=88;break;
 case 88: 
 var $328=$ptr;
 var $329=(($328+1)|0);
 var $330=HEAP8[($329)];
 var $331=($330&255);
 var $332=($331|0)>=48;
 if($332){label=89;break;}else{var $340=0;label=90;break;}
 case 89: 
 var $334=$ptr;
 var $335=(($334+1)|0);
 var $336=HEAP8[($335)];
 var $337=($336&255);
 var $338=($337|0)<=57;
 var $340=$338;label=90;break;
 case 90: 
 var $340;
 if($340){label=91;break;}else{label=94;break;}
 case 91: 
 var $342=$s;
 var $343=($342|0)>214748363;
 if($343){label=92;break;}else{label=93;break;}
 case 92: 
 $overflow=1;
 label=94;break;
 case 93: 
 var $346=$s;
 var $347=((($346)*(10))&-1);
 var $348=$ptr;
 var $349=(($348+1)|0);
 $ptr=$349;
 var $350=HEAP8[($349)];
 var $351=($350&255);
 var $352=((($351)-(48))|0);
 var $353=((($347)+($352))|0);
 $s=$353;
 label=88;break;
 case 94: 
 var $355=$overflow;
 var $356=($355|0)!=0;
 if($356){label=95;break;}else{label=101;break;}
 case 95: 
 label=96;break;
 case 96: 
 var $359=$ptr;
 var $360=(($359+1)|0);
 var $361=HEAP8[($360)];
 var $362=($361&255);
 var $363=($362|0)>=48;
 if($363){label=97;break;}else{var $371=0;label=98;break;}
 case 97: 
 var $365=$ptr;
 var $366=(($365+1)|0);
 var $367=HEAP8[($366)];
 var $368=($367&255);
 var $369=($368|0)<=57;
 var $371=$369;label=98;break;
 case 98: 
 var $371;
 if($371){label=99;break;}else{label=100;break;}
 case 99: 
 var $373=$ptr;
 var $374=(($373+1)|0);
 $ptr=$374;
 label=96;break;
 case 100: 
 var $376=$3;
 HEAP32[(($376)>>2)]=61;
 label=206;break;
 case 101: 
 var $378=$s;
 var $379=($378|0)<8;
 if($379){label=103;break;}else{label=102;break;}
 case 102: 
 var $381=$s;
 var $382=$4;
 var $383=($381|0)<=($382|0);
 if($383){label=103;break;}else{label=104;break;}
 case 103: 
 var $385=$s;
 var $386=(((-$385))|0);
 $escape=$386;
 label=206;break;
 case 104: 
 var $388=$oldptr;
 $ptr=$388;
 label=105;break;
 case 105: 
 var $390=$ptr;
 var $391=HEAP8[($390)];
 var $392=($391&255);
 $c=$392;
 var $393=($392>>>0)>=56;
 if($393){label=106;break;}else{label=107;break;}
 case 106: 
 label=206;break;
 case 107: 
 label=108;break;
 case 108: 
 var $397=$c;
 var $398=((($397)-(48))|0);
 $c=$398;
 label=109;break;
 case 109: 
 var $400=$i;
 var $401=((($400)+(1))|0);
 $i=$401;
 var $402=($400|0)<2;
 if($402){label=110;break;}else{var $416=0;label=112;break;}
 case 110: 
 var $404=$ptr;
 var $405=(($404+1)|0);
 var $406=HEAP8[($405)];
 var $407=($406&255);
 var $408=($407|0)>=48;
 if($408){label=111;break;}else{var $416=0;label=112;break;}
 case 111: 
 var $410=$ptr;
 var $411=(($410+1)|0);
 var $412=HEAP8[($411)];
 var $413=($412&255);
 var $414=($413|0)<=55;
 var $416=$414;label=112;break;
 case 112: 
 var $416;
 if($416){label=113;break;}else{label=114;break;}
 case 113: 
 var $418=$c;
 var $419=($418<<3);
 var $420=$ptr;
 var $421=(($420+1)|0);
 $ptr=$421;
 var $422=HEAP8[($421)];
 var $423=($422&255);
 var $424=((($419)+($423))|0);
 var $425=((($424)-(48))|0);
 $c=$425;
 label=109;break;
 case 114: 
 var $427=$utf;
 var $428=($427|0)!=0;
 if($428){label=117;break;}else{label=115;break;}
 case 115: 
 var $430=$c;
 var $431=($430>>>0)>255;
 if($431){label=116;break;}else{label=117;break;}
 case 116: 
 var $433=$3;
 HEAP32[(($433)>>2)]=51;
 label=117;break;
 case 117: 
 label=206;break;
 case 118: 
 var $436=$ptr;
 var $437=(($436+1)|0);
 var $438=HEAP8[($437)];
 var $439=($438&255);
 var $440=($439|0)!=123;
 if($440){label=119;break;}else{label=120;break;}
 case 119: 
 var $442=$3;
 HEAP32[(($442)>>2)]=81;
 label=146;break;
 case 120: 
 var $444=$ptr;
 var $445=(($444+2)|0);
 $ptr=$445;
 $c=0;
 $overflow=0;
 label=121;break;
 case 121: 
 var $447=$ptr;
 var $448=HEAP8[($447)];
 var $449=($448&255);
 var $450=($449|0)>=48;
 if($450){label=122;break;}else{var $457=0;label=123;break;}
 case 122: 
 var $452=$ptr;
 var $453=HEAP8[($452)];
 var $454=($453&255);
 var $455=($454|0)<=55;
 var $457=$455;label=123;break;
 case 123: 
 var $457;
 if($457){label=124;break;}else{label=130;break;}
 case 124: 
 var $459=$ptr;
 var $460=(($459+1)|0);
 $ptr=$460;
 var $461=HEAP8[($459)];
 var $462=($461&255);
 $cc1=$462;
 var $463=$c;
 var $464=($463|0)==0;
 if($464){label=125;break;}else{label=127;break;}
 case 125: 
 var $466=$cc1;
 var $467=($466|0)==48;
 if($467){label=126;break;}else{label=127;break;}
 case 126: 
 label=121;break;
 case 127: 
 var $470=$c;
 var $471=$470<<3;
 var $472=$cc1;
 var $473=((($471)+($472))|0);
 var $474=((($473)-(48))|0);
 $c=$474;
 var $475=$c;
 var $476=$utf;
 var $477=($476|0)!=0;
 var $478=($477?1114111:255);
 var $479=($475>>>0)>($478>>>0);
 if($479){label=128;break;}else{label=129;break;}
 case 128: 
 $overflow=1;
 label=130;break;
 case 129: 
 label=121;break;
 case 130: 
 var $483=$overflow;
 var $484=($483|0)!=0;
 if($484){label=131;break;}else{label=137;break;}
 case 131: 
 label=132;break;
 case 132: 
 var $487=$ptr;
 var $488=HEAP8[($487)];
 var $489=($488&255);
 var $490=($489|0)>=48;
 if($490){label=133;break;}else{var $497=0;label=134;break;}
 case 133: 
 var $492=$ptr;
 var $493=HEAP8[($492)];
 var $494=($493&255);
 var $495=($494|0)<=55;
 var $497=$495;label=134;break;
 case 134: 
 var $497;
 if($497){label=135;break;}else{label=136;break;}
 case 135: 
 var $499=$ptr;
 var $500=(($499+1)|0);
 $ptr=$500;
 label=132;break;
 case 136: 
 var $502=$3;
 HEAP32[(($502)>>2)]=34;
 label=145;break;
 case 137: 
 var $504=$ptr;
 var $505=HEAP8[($504)];
 var $506=($505&255);
 var $507=($506|0)==125;
 if($507){label=138;break;}else{label=143;break;}
 case 138: 
 var $509=$utf;
 var $510=($509|0)!=0;
 if($510){label=139;break;}else{label=142;break;}
 case 139: 
 var $512=$c;
 var $513=($512>>>0)>=55296;
 if($513){label=140;break;}else{label=142;break;}
 case 140: 
 var $515=$c;
 var $516=($515>>>0)<=57343;
 if($516){label=141;break;}else{label=142;break;}
 case 141: 
 var $518=$3;
 HEAP32[(($518)>>2)]=73;
 label=142;break;
 case 142: 
 label=144;break;
 case 143: 
 var $521=$3;
 HEAP32[(($521)>>2)]=80;
 label=144;break;
 case 144: 
 label=145;break;
 case 145: 
 label=146;break;
 case 146: 
 label=206;break;
 case 147: 
 var $526=$5;
 var $527=$526&33554432;
 var $528=($527|0)!=0;
 if($528){label=148;break;}else{label=158;break;}
 case 148: 
 var $530=$ptr;
 var $531=(($530+1)|0);
 var $532=HEAP8[($531)];
 var $533=($532&255);
 var $534=((4096+$533)|0);
 var $535=HEAP8[($534)];
 var $536=($535&255);
 var $537=$536&8;
 var $538=($537|0)!=0;
 if($538){label=149;break;}else{label=157;break;}
 case 149: 
 var $540=$ptr;
 var $541=(($540+2)|0);
 var $542=HEAP8[($541)];
 var $543=($542&255);
 var $544=((4096+$543)|0);
 var $545=HEAP8[($544)];
 var $546=($545&255);
 var $547=$546&8;
 var $548=($547|0)!=0;
 if($548){label=150;break;}else{label=157;break;}
 case 150: 
 $c=0;
 $i=0;
 label=151;break;
 case 151: 
 var $551=$i;
 var $552=($551|0)<2;
 if($552){label=152;break;}else{label=156;break;}
 case 152: 
 var $554=$ptr;
 var $555=(($554+1)|0);
 $ptr=$555;
 var $556=HEAP8[($555)];
 var $557=($556&255);
 $cc2=$557;
 var $558=$cc2;
 var $559=($558>>>0)>=97;
 if($559){label=153;break;}else{label=154;break;}
 case 153: 
 var $561=$cc2;
 var $562=((($561)-(32))|0);
 $cc2=$562;
 label=154;break;
 case 154: 
 var $564=$c;
 var $565=$564<<4;
 var $566=$cc2;
 var $567=((($565)+($566))|0);
 var $568=$cc2;
 var $569=($568>>>0)<65;
 var $570=($569?48:55);
 var $571=((($567)-($570))|0);
 $c=$571;
 label=155;break;
 case 155: 
 var $573=$i;
 var $574=((($573)+(1))|0);
 $i=$574;
 label=151;break;
 case 156: 
 label=157;break;
 case 157: 
 label=192;break;
 case 158: 
 var $578=$ptr;
 var $579=(($578+1)|0);
 var $580=HEAP8[($579)];
 var $581=($580&255);
 var $582=($581|0)==123;
 if($582){label=159;break;}else{label=183;break;}
 case 159: 
 var $584=$ptr;
 var $585=(($584+2)|0);
 $ptr=$585;
 $c=0;
 $overflow=0;
 label=160;break;
 case 160: 
 var $587=$ptr;
 var $588=HEAP8[($587)];
 var $589=($588&255);
 var $590=((4096+$589)|0);
 var $591=HEAP8[($590)];
 var $592=($591&255);
 var $593=$592&8;
 var $594=($593|0)!=0;
 if($594){label=161;break;}else{label=169;break;}
 case 161: 
 var $596=$ptr;
 var $597=(($596+1)|0);
 $ptr=$597;
 var $598=HEAP8[($596)];
 var $599=($598&255);
 $cc3=$599;
 var $600=$c;
 var $601=($600|0)==0;
 if($601){label=162;break;}else{label=164;break;}
 case 162: 
 var $603=$cc3;
 var $604=($603|0)==48;
 if($604){label=163;break;}else{label=164;break;}
 case 163: 
 label=160;break;
 case 164: 
 var $607=$cc3;
 var $608=($607>>>0)>=97;
 if($608){label=165;break;}else{label=166;break;}
 case 165: 
 var $610=$cc3;
 var $611=((($610)-(32))|0);
 $cc3=$611;
 label=166;break;
 case 166: 
 var $613=$c;
 var $614=$613<<4;
 var $615=$cc3;
 var $616=((($614)+($615))|0);
 var $617=$cc3;
 var $618=($617>>>0)<65;
 var $619=($618?48:55);
 var $620=((($616)-($619))|0);
 $c=$620;
 var $621=$c;
 var $622=$utf;
 var $623=($622|0)!=0;
 var $624=($623?1114111:255);
 var $625=($621>>>0)>($624>>>0);
 if($625){label=167;break;}else{label=168;break;}
 case 167: 
 $overflow=1;
 label=169;break;
 case 168: 
 label=160;break;
 case 169: 
 var $629=$overflow;
 var $630=($629|0)!=0;
 if($630){label=170;break;}else{label=174;break;}
 case 170: 
 label=171;break;
 case 171: 
 var $633=$ptr;
 var $634=HEAP8[($633)];
 var $635=($634&255);
 var $636=((4096+$635)|0);
 var $637=HEAP8[($636)];
 var $638=($637&255);
 var $639=$638&8;
 var $640=($639|0)!=0;
 if($640){label=172;break;}else{label=173;break;}
 case 172: 
 var $642=$ptr;
 var $643=(($642+1)|0);
 $ptr=$643;
 label=171;break;
 case 173: 
 var $645=$3;
 HEAP32[(($645)>>2)]=34;
 label=182;break;
 case 174: 
 var $647=$ptr;
 var $648=HEAP8[($647)];
 var $649=($648&255);
 var $650=($649|0)==125;
 if($650){label=175;break;}else{label=180;break;}
 case 175: 
 var $652=$utf;
 var $653=($652|0)!=0;
 if($653){label=176;break;}else{label=179;break;}
 case 176: 
 var $655=$c;
 var $656=($655>>>0)>=55296;
 if($656){label=177;break;}else{label=179;break;}
 case 177: 
 var $658=$c;
 var $659=($658>>>0)<=57343;
 if($659){label=178;break;}else{label=179;break;}
 case 178: 
 var $661=$3;
 HEAP32[(($661)>>2)]=73;
 label=179;break;
 case 179: 
 label=181;break;
 case 180: 
 var $664=$3;
 HEAP32[(($664)>>2)]=79;
 label=181;break;
 case 181: 
 label=182;break;
 case 182: 
 label=191;break;
 case 183: 
 $c=0;
 label=184;break;
 case 184: 
 var $669=$i;
 var $670=((($669)+(1))|0);
 $i=$670;
 var $671=($669|0)<2;
 if($671){label=185;break;}else{var $683=0;label=186;break;}
 case 185: 
 var $673=$ptr;
 var $674=(($673+1)|0);
 var $675=HEAP8[($674)];
 var $676=($675&255);
 var $677=((4096+$676)|0);
 var $678=HEAP8[($677)];
 var $679=($678&255);
 var $680=$679&8;
 var $681=($680|0)!=0;
 var $683=$681;label=186;break;
 case 186: 
 var $683;
 if($683){label=187;break;}else{label=190;break;}
 case 187: 
 var $685=$ptr;
 var $686=(($685+1)|0);
 $ptr=$686;
 var $687=HEAP8[($686)];
 var $688=($687&255);
 $cc4=$688;
 var $689=$cc4;
 var $690=($689>>>0)>=97;
 if($690){label=188;break;}else{label=189;break;}
 case 188: 
 var $692=$cc4;
 var $693=((($692)-(32))|0);
 $cc4=$693;
 label=189;break;
 case 189: 
 var $695=$c;
 var $696=($695<<4);
 var $697=$cc4;
 var $698=((($696)+($697))|0);
 var $699=$cc4;
 var $700=($699>>>0)<65;
 var $701=($700?48:55);
 var $702=((($698)-($701))|0);
 $c=$702;
 label=184;break;
 case 190: 
 label=191;break;
 case 191: 
 label=192;break;
 case 192: 
 label=206;break;
 case 193: 
 var $707=$ptr;
 var $708=(($707+1)|0);
 $ptr=$708;
 var $709=HEAP8[($708)];
 var $710=($709&255);
 $c=$710;
 var $711=$c;
 var $712=($711|0)==0;
 if($712){label=194;break;}else{label=195;break;}
 case 194: 
 var $714=$3;
 HEAP32[(($714)>>2)]=2;
 label=206;break;
 case 195: 
 var $716=$c;
 var $717=($716>>>0)>127;
 if($717){label=196;break;}else{label=197;break;}
 case 196: 
 var $719=$3;
 HEAP32[(($719)>>2)]=68;
 label=206;break;
 case 197: 
 var $721=$c;
 var $722=($721>>>0)>=97;
 if($722){label=198;break;}else{label=200;break;}
 case 198: 
 var $724=$c;
 var $725=($724>>>0)<=122;
 if($725){label=199;break;}else{label=200;break;}
 case 199: 
 var $727=$c;
 var $728=((($727)-(32))|0);
 $c=$728;
 label=200;break;
 case 200: 
 var $730=$c;
 var $731=$730^64;
 $c=$731;
 label=206;break;
 case 201: 
 var $733=$5;
 var $734=$733&64;
 var $735=($734|0)!=0;
 if($735){label=202;break;}else{label=205;break;}
 case 202: 
 var $737=$c;
 label=203;break;
 case 203: 
 var $739=$3;
 HEAP32[(($739)>>2)]=3;
 label=204;break;
 case 204: 
 label=205;break;
 case 205: 
 label=206;break;
 case 206: 
 label=207;break;
 case 207: 
 label=208;break;
 case 208: 
 label=209;break;
 case 209: 
 var $746=$escape;
 var $747=($746|0)==12;
 if($747){label=210;break;}else{label=213;break;}
 case 210: 
 var $749=$ptr;
 var $750=(($749+1)|0);
 var $751=HEAP8[($750)];
 var $752=($751&255);
 var $753=($752|0)==123;
 if($753){label=211;break;}else{label=213;break;}
 case 211: 
 var $755=$ptr;
 var $756=(($755+2)|0);
 var $757=_is_counted_repeat($756);
 var $758=($757|0)!=0;
 if($758){label=213;break;}else{label=212;break;}
 case 212: 
 var $760=$3;
 HEAP32[(($760)>>2)]=37;
 label=213;break;
 case 213: 
 var $762=$5;
 var $763=$762&536870912;
 var $764=($763|0)!=0;
 if($764){label=214;break;}else{label=217;break;}
 case 214: 
 var $766=$escape;
 var $767=($766|0)>=6;
 if($767){label=215;break;}else{label=217;break;}
 case 215: 
 var $769=$escape;
 var $770=($769|0)<=11;
 if($770){label=216;break;}else{label=217;break;}
 case 216: 
 var $772=$escape;
 var $773=((($772)+(23))|0);
 $escape=$773;
 label=217;break;
 case 217: 
 var $775=$ptr;
 var $776=$1;
 HEAP32[(($776)>>2)]=$775;
 var $777=$c;
 var $778=$2;
 HEAP32[(($778)>>2)]=$777;
 var $779=$escape;
 STACKTOP=sp;return $779;
  default: assert(0, "bad label: " + label);
 }
}
function _add_list_to_class($classbits,$uchardptr,$options,$cd,$p,$except){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $n8;
 var $n;
 $1=$classbits;
 $2=$uchardptr;
 $3=$options;
 $4=$cd;
 $5=$p;
 $6=$except;
 $n8=0;
 label=2;break;
 case 2: 
 var $8=$5;
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10>>>0)<4294967295;
 if($11){label=3;break;}else{label=9;break;}
 case 3: 
 $n=0;
 var $13=$5;
 var $14=(($13)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$6;
 var $17=($15|0)!=($16|0);
 if($17){label=4;break;}else{label=8;break;}
 case 4: 
 label=5;break;
 case 5: 
 var $20=$n;
 var $21=((($20)+(1))|0);
 var $22=$5;
 var $23=(($22+($21<<2))|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=$5;
 var $26=(($25)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=$n;
 var $29=((($27)+($28))|0);
 var $30=((($29)+(1))|0);
 var $31=($24|0)==($30|0);
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 var $33=$n;
 var $34=((($33)+(1))|0);
 $n=$34;
 label=5;break;
 case 7: 
 var $36=$1;
 var $37=$2;
 var $38=$3;
 var $39=$4;
 var $40=$5;
 var $41=(($40)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$n;
 var $44=$5;
 var $45=(($44+($43<<2))|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=_add_to_class($36,$37,$38,$39,$42,$46);
 var $48=$n8;
 var $49=((($48)+($47))|0);
 $n8=$49;
 label=8;break;
 case 8: 
 var $51=$n;
 var $52=((($51)+(1))|0);
 var $53=$5;
 var $54=(($53+($52<<2))|0);
 $5=$54;
 label=2;break;
 case 9: 
 var $56=$n8;
 STACKTOP=sp;return $56;
  default: assert(0, "bad label: " + label);
 }
}
function _add_not_list_to_class($classbits,$uchardptr,$options,$cd,$p){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $utf;
 var $n8;
 $1=$classbits;
 $2=$uchardptr;
 $3=$options;
 $4=$cd;
 $5=$p;
 var $6=$3;
 var $7=$6&2048;
 var $8=($7|0)!=0;
 var $9=($8&1);
 $utf=$9;
 $n8=0;
 var $10=$5;
 var $11=(($10)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12>>>0)>0;
 if($13){label=2;break;}else{label=3;break;}
 case 2: 
 var $15=$1;
 var $16=$2;
 var $17=$3;
 var $18=$4;
 var $19=$5;
 var $20=(($19)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=((($21)-(1))|0);
 var $23=_add_to_class($15,$16,$17,$18,0,$22);
 var $24=$n8;
 var $25=((($24)+($23))|0);
 $n8=$25;
 label=3;break;
 case 3: 
 label=4;break;
 case 4: 
 var $28=$5;
 var $29=(($28)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30>>>0)<4294967295;
 if($31){label=5;break;}else{label=12;break;}
 case 5: 
 label=6;break;
 case 6: 
 var $34=$5;
 var $35=(($34+4)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$5;
 var $38=(($37)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=((($39)+(1))|0);
 var $41=($36|0)==($40|0);
 if($41){label=7;break;}else{label=8;break;}
 case 7: 
 var $43=$5;
 var $44=(($43+4)|0);
 $5=$44;
 label=6;break;
 case 8: 
 var $46=$1;
 var $47=$2;
 var $48=$3;
 var $49=$4;
 var $50=$5;
 var $51=(($50)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=((($52)+(1))|0);
 var $54=$5;
 var $55=(($54+4)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==-1;
 if($57){label=9;break;}else{label=10;break;}
 case 9: 
 var $59=$utf;
 var $60=($59|0)!=0;
 var $61=($60?1114111:-1);
 var $68=$61;label=11;break;
 case 10: 
 var $63=$5;
 var $64=(($63+4)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=((($65)-(1))|0);
 var $68=$66;label=11;break;
 case 11: 
 var $68;
 var $69=_add_to_class($46,$47,$48,$49,$53,$68);
 var $70=$n8;
 var $71=((($70)+($69))|0);
 $n8=$71;
 var $72=$5;
 var $73=(($72+4)|0);
 $5=$73;
 label=4;break;
 case 12: 
 var $75=$n8;
 STACKTOP=sp;return $75;
  default: assert(0, "bad label: " + label);
 }
}
function _add_to_class($classbits,$uchardptr,$options,$cd,$start,$end){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $c;
 var $classbits_end;
 var $n8;
 $1=$classbits;
 $2=$uchardptr;
 $3=$options;
 $4=$cd;
 $5=$start;
 $6=$end;
 var $7=$6;
 var $8=($7>>>0)<=255;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$6;
 var $13=$10;label=4;break;
 case 3: 
 var $13=255;label=4;break;
 case 4: 
 var $13;
 $classbits_end=$13;
 $n8=0;
 var $14=$3;
 var $15=$14&1;
 var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=10;break;}
 case 5: 
 var $18=$5;
 $c=$18;
 label=6;break;
 case 6: 
 var $20=$c;
 var $21=$classbits_end;
 var $22=($20>>>0)<=($21>>>0);
 if($22){label=7;break;}else{label=9;break;}
 case 7: 
 var $24=$c;
 var $25=$4;
 var $26=(($25+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+$24)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$30&7;
 var $32=1<<$31;
 var $33=$c;
 var $34=$4;
 var $35=(($34+4)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+$33)|0);
 var $38=HEAP8[($37)];
 var $39=($38&255);
 var $40=(((($39|0))/(8))&-1);
 var $41=$1;
 var $42=(($41+$40)|0);
 var $43=HEAP8[($42)];
 var $44=($43&255);
 var $45=$44|$32;
 var $46=(($45)&255);
 HEAP8[($42)]=$46;
 var $47=$n8;
 var $48=((($47)+(1))|0);
 $n8=$48;
 label=8;break;
 case 8: 
 var $50=$c;
 var $51=((($50)+(1))|0);
 $c=$51;
 label=6;break;
 case 9: 
 label=10;break;
 case 10: 
 var $54=$6;
 var $55=($54>>>0)>255;
 if($55){label=11;break;}else{label=12;break;}
 case 11: 
 $6=255;
 label=12;break;
 case 12: 
 var $58=$5;
 $c=$58;
 label=13;break;
 case 13: 
 var $60=$c;
 var $61=$classbits_end;
 var $62=($60>>>0)<=($61>>>0);
 if($62){label=14;break;}else{label=16;break;}
 case 14: 
 var $64=$c;
 var $65=$64&7;
 var $66=1<<$65;
 var $67=$c;
 var $68=(((($67>>>0))/(8))&-1);
 var $69=$1;
 var $70=(($69+$68)|0);
 var $71=HEAP8[($70)];
 var $72=($71&255);
 var $73=$72|$66;
 var $74=(($73)&255);
 HEAP8[($70)]=$74;
 var $75=$n8;
 var $76=((($75)+(1))|0);
 $n8=$76;
 label=15;break;
 case 15: 
 var $78=$c;
 var $79=((($78)+(1))|0);
 $c=$79;
 label=13;break;
 case 16: 
 var $81=$n8;
 STACKTOP=sp;return $81;
  default: assert(0, "bad label: " + label);
 }
}
function _read_repeat_counts($p,$minp,$maxp,$errorcodeptr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $min;
 var $max;
 $2=$p;
 $3=$minp;
 $4=$maxp;
 $5=$errorcodeptr;
 $min=0;
 $max=-1;
 label=2;break;
 case 2: 
 var $7=$2;
 var $8=HEAP8[($7)];
 var $9=($8&255);
 var $10=($9|0)>=48;
 if($10){label=3;break;}else{var $17=0;label=4;break;}
 case 3: 
 var $12=$2;
 var $13=HEAP8[($12)];
 var $14=($13&255);
 var $15=($14|0)<=57;
 var $17=$15;label=4;break;
 case 4: 
 var $17;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 var $19=$min;
 var $20=((($19)*(10))&-1);
 var $21=$2;
 var $22=(($21+1)|0);
 $2=$22;
 var $23=HEAP8[($21)];
 var $24=($23&255);
 var $25=((($24)-(48))|0);
 var $26=((($20)+($25))|0);
 $min=$26;
 label=2;break;
 case 6: 
 var $28=$min;
 var $29=($28|0)<0;
 if($29){label=8;break;}else{label=7;break;}
 case 7: 
 var $31=$min;
 var $32=($31|0)>65535;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=$5;
 HEAP32[(($34)>>2)]=5;
 var $35=$2;
 $1=$35;
 label=25;break;
 case 9: 
 var $37=$2;
 var $38=HEAP8[($37)];
 var $39=($38&255);
 var $40=($39|0)==125;
 if($40){label=10;break;}else{label=11;break;}
 case 10: 
 var $42=$min;
 $max=$42;
 label=24;break;
 case 11: 
 var $44=$2;
 var $45=(($44+1)|0);
 $2=$45;
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=($47|0)!=125;
 if($48){label=12;break;}else{label=23;break;}
 case 12: 
 $max=0;
 label=13;break;
 case 13: 
 var $51=$2;
 var $52=HEAP8[($51)];
 var $53=($52&255);
 var $54=($53|0)>=48;
 if($54){label=14;break;}else{var $61=0;label=15;break;}
 case 14: 
 var $56=$2;
 var $57=HEAP8[($56)];
 var $58=($57&255);
 var $59=($58|0)<=57;
 var $61=$59;label=15;break;
 case 15: 
 var $61;
 if($61){label=16;break;}else{label=17;break;}
 case 16: 
 var $63=$max;
 var $64=((($63)*(10))&-1);
 var $65=$2;
 var $66=(($65+1)|0);
 $2=$66;
 var $67=HEAP8[($65)];
 var $68=($67&255);
 var $69=((($68)-(48))|0);
 var $70=((($64)+($69))|0);
 $max=$70;
 label=13;break;
 case 17: 
 var $72=$max;
 var $73=($72|0)<0;
 if($73){label=19;break;}else{label=18;break;}
 case 18: 
 var $75=$max;
 var $76=($75|0)>65535;
 if($76){label=19;break;}else{label=20;break;}
 case 19: 
 var $78=$5;
 HEAP32[(($78)>>2)]=5;
 var $79=$2;
 $1=$79;
 label=25;break;
 case 20: 
 var $81=$max;
 var $82=$min;
 var $83=($81|0)<($82|0);
 if($83){label=21;break;}else{label=22;break;}
 case 21: 
 var $85=$5;
 HEAP32[(($85)>>2)]=4;
 var $86=$2;
 $1=$86;
 label=25;break;
 case 22: 
 label=23;break;
 case 23: 
 label=24;break;
 case 24: 
 var $90=$min;
 var $91=$3;
 HEAP32[(($91)>>2)]=$90;
 var $92=$max;
 var $93=$4;
 HEAP32[(($93)>>2)]=$92;
 var $94=$2;
 $1=$94;
 label=25;break;
 case 25: 
 var $96=$1;
 STACKTOP=sp;return $96;
  default: assert(0, "bad label: " + label);
 }
}
function _adjust_recurse($group,$adjust,$utf,$cd,$save_hwm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $ptr;
 var $offset;
 var $hc;
 $1=$group;
 $2=$adjust;
 $3=$utf;
 $4=$cd;
 $5=$save_hwm;
 var $6=$1;
 $ptr=$6;
 label=2;break;
 case 2: 
 var $8=$ptr;
 var $9=$3;
 var $10=_find_recurse($8,$9);
 $ptr=$10;
 var $11=($10|0)!=0;
 if($11){label=3;break;}else{label=14;break;}
 case 3: 
 var $13=$5;
 $hc=$13;
 label=4;break;
 case 4: 
 var $15=$hc;
 var $16=$4;
 var $17=(($16+32)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=5;break;}else{label=9;break;}
 case 5: 
 var $21=$hc;
 var $22=(($21)|0);
 var $23=HEAP8[($22)];
 var $24=($23&255);
 var $25=$24<<8;
 var $26=$hc;
 var $27=(($26+1)|0);
 var $28=HEAP8[($27)];
 var $29=($28&255);
 var $30=$25|$29;
 $offset=$30;
 var $31=$4;
 var $32=(($31+20)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$offset;
 var $35=(($33+$34)|0);
 var $36=$ptr;
 var $37=(($36+1)|0);
 var $38=($35|0)==($37|0);
 if($38){label=6;break;}else{label=7;break;}
 case 6: 
 var $40=$offset;
 var $41=$2;
 var $42=((($40)+($41))|0);
 var $43=$42>>8;
 var $44=(($43)&255);
 var $45=$hc;
 var $46=(($45)|0);
 HEAP8[($46)]=$44;
 var $47=$offset;
 var $48=$2;
 var $49=((($47)+($48))|0);
 var $50=$49&255;
 var $51=(($50)&255);
 var $52=$hc;
 var $53=(($52+1)|0);
 HEAP8[($53)]=$51;
 label=9;break;
 case 7: 
 label=8;break;
 case 8: 
 var $56=$hc;
 var $57=(($56+2)|0);
 $hc=$57;
 label=4;break;
 case 9: 
 var $59=$hc;
 var $60=$4;
 var $61=(($60+32)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($59>>>0)>=($62>>>0);
 if($63){label=10;break;}else{label=13;break;}
 case 10: 
 var $65=$ptr;
 var $66=(($65+1)|0);
 var $67=HEAP8[($66)];
 var $68=($67&255);
 var $69=$68<<8;
 var $70=$ptr;
 var $71=(($70+2)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=$69|$73;
 $offset=$74;
 var $75=$4;
 var $76=(($75+20)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=$offset;
 var $79=(($77+$78)|0);
 var $80=$1;
 var $81=($79>>>0)>=($80>>>0);
 if($81){label=11;break;}else{label=12;break;}
 case 11: 
 var $83=$offset;
 var $84=$2;
 var $85=((($83)+($84))|0);
 var $86=$85>>8;
 var $87=(($86)&255);
 var $88=$ptr;
 var $89=(($88+1)|0);
 HEAP8[($89)]=$87;
 var $90=$offset;
 var $91=$2;
 var $92=((($90)+($91))|0);
 var $93=$92&255;
 var $94=(($93)&255);
 var $95=$ptr;
 var $96=(($95+2)|0);
 HEAP8[($96)]=$94;
 label=12;break;
 case 12: 
 label=13;break;
 case 13: 
 var $99=$ptr;
 var $100=(($99+3)|0);
 $ptr=$100;
 label=2;break;
 case 14: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _expand_workspace($cd){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $newspace;
 var $newsize;
 $2=$cd;
 var $3=$2;
 var $4=(($3+60)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5<<1);
 $newsize=$6;
 var $7=$newsize;
 var $8=($7|0)>409600;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 $newsize=409600;
 label=3;break;
 case 3: 
 var $11=$2;
 var $12=(($11+60)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)>=409600;
 if($14){label=5;break;}else{label=4;break;}
 case 4: 
 var $16=$newsize;
 var $17=$2;
 var $18=(($17+60)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=((($16)-($19))|0);
 var $21=($20|0)<100;
 if($21){label=5;break;}else{label=6;break;}
 case 5: 
 $1=72;
 label=11;break;
 case 6: 
 var $24=HEAP32[((504)>>2)];
 var $25=$newsize;
 var $26=FUNCTION_TABLE[$24]($25);
 $newspace=$26;
 var $27=$newspace;
 var $28=($27|0)==0;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 $1=21;
 label=11;break;
 case 8: 
 var $31=$newspace;
 var $32=$2;
 var $33=(($32+16)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=$2;
 var $36=(($35+60)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$37;
 assert($38 % 1 === 0);(_memcpy($31, $34, $38)|0);
 var $39=$newspace;
 var $40=$2;
 var $41=(($40+32)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$2;
 var $44=(($43+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=$42;
 var $47=$45;
 var $48=((($46)-($47))|0);
 var $49=(($39+$48)|0);
 var $50=$2;
 var $51=(($50+32)|0);
 HEAP32[(($51)>>2)]=$49;
 var $52=$2;
 var $53=(($52+60)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)>4096;
 if($55){label=9;break;}else{label=10;break;}
 case 9: 
 var $57=HEAP32[((512)>>2)];
 var $58=$2;
 var $59=(($58+16)|0);
 var $60=HEAP32[(($59)>>2)];
 FUNCTION_TABLE[$57]($60);
 label=10;break;
 case 10: 
 var $62=$newspace;
 var $63=$2;
 var $64=(($63+16)|0);
 HEAP32[(($64)>>2)]=$62;
 var $65=$newsize;
 var $66=$2;
 var $67=(($66+60)|0);
 HEAP32[(($67)>>2)]=$65;
 $1=0;
 label=11;break;
 case 11: 
 var $69=$1;
 STACKTOP=sp;return $69;
  default: assert(0, "bad label: " + label);
 }
}
function _could_be_empty($code,$endcode,$bcptr,$utf,$cd){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 $2=$code;
 $3=$endcode;
 $4=$bcptr;
 $5=$utf;
 $6=$cd;
 label=2;break;
 case 2: 
 var $8=$4;
 var $9=($8|0)!=0;
 if($9){label=3;break;}else{var $17=0;label=4;break;}
 case 3: 
 var $11=$4;
 var $12=(($11+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=$2;
 var $15=($13>>>0)>=($14>>>0);
 var $17=$15;label=4;break;
 case 4: 
 var $17;
 if($17){label=5;break;}else{label=8;break;}
 case 5: 
 var $19=$4;
 var $20=(($19+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$3;
 var $23=$5;
 var $24=$6;
 var $25=_could_be_empty_branch($21,$22,$23,$24,0);
 var $26=($25|0)!=0;
 if($26){label=7;break;}else{label=6;break;}
 case 6: 
 $1=0;
 label=9;break;
 case 7: 
 var $29=$4;
 var $30=(($29)|0);
 var $31=HEAP32[(($30)>>2)];
 $4=$31;
 label=2;break;
 case 8: 
 $1=1;
 label=9;break;
 case 9: 
 var $34=$1;
 STACKTOP=sp;return $34;
  default: assert(0, "bad label: " + label);
 }
}
function _find_recurse($code,$utf){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $c;
 $2=$code;
 $3=$utf;
 label=2;break;
 case 2: 
 var $5=$2;
 var $6=HEAP8[($5)];
 $c=$6;
 var $7=$c;
 var $8=($7&255);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 $1=0;
 label=20;break;
 case 4: 
 var $12=$c;
 var $13=($12&255);
 var $14=($13|0)==117;
 if($14){label=5;break;}else{label=6;break;}
 case 5: 
 var $16=$2;
 $1=$16;
 label=20;break;
 case 6: 
 var $18=$c;
 var $19=($18&255);
 var $20=($19|0)==112;
 if($20){label=7;break;}else{label=8;break;}
 case 7: 
 var $22=$2;
 var $23=(($22+1)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=$25<<8;
 var $27=$2;
 var $28=(($27+2)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$26|$30;
 var $32=$2;
 var $33=(($32+$31)|0);
 $2=$33;
 label=19;break;
 case 8: 
 var $35=$c;
 var $36=($35&255);
 switch(($36|0)){case 97:case 91:case 92:case 93:{ label=13;break;}case 149:case 151:case 153:case 155:{ label=17;break;}case 85:case 86:case 87:case 88:case 89:case 90:case 94:case 95:case 96:{ label=9;break;}default:{label=18;break;}}break;
 case 9: 
 var $38=$2;
 var $39=(($38+1)|0);
 var $40=HEAP8[($39)];
 var $41=($40&255);
 var $42=($41|0)==16;
 if($42){label=11;break;}else{label=10;break;}
 case 10: 
 var $44=$2;
 var $45=(($44+1)|0);
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=($47|0)==15;
 if($48){label=11;break;}else{label=12;break;}
 case 11: 
 var $50=$2;
 var $51=(($50+2)|0);
 $2=$51;
 label=12;break;
 case 12: 
 label=18;break;
 case 13: 
 var $54=$2;
 var $55=(($54+3)|0);
 var $56=HEAP8[($55)];
 var $57=($56&255);
 var $58=($57|0)==16;
 if($58){label=15;break;}else{label=14;break;}
 case 14: 
 var $60=$2;
 var $61=(($60+3)|0);
 var $62=HEAP8[($61)];
 var $63=($62&255);
 var $64=($63|0)==15;
 if($64){label=15;break;}else{label=16;break;}
 case 15: 
 var $66=$2;
 var $67=(($66+2)|0);
 $2=$67;
 label=16;break;
 case 16: 
 label=18;break;
 case 17: 
 var $70=$2;
 var $71=(($70+1)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=$2;
 var $75=(($74+$73)|0);
 $2=$75;
 label=18;break;
 case 18: 
 var $77=$c;
 var $78=($77&255);
 var $79=((6760+$78)|0);
 var $80=HEAP8[($79)];
 var $81=($80&255);
 var $82=$2;
 var $83=(($82+$81)|0);
 $2=$83;
 var $84=$3;
 label=19;break;
 case 19: 
 label=2;break;
 case 20: 
 var $87=$1;
 STACKTOP=sp;return $87;
  default: assert(0, "bad label: " + label);
 }
}
function _pcre_exec($argument_re,$extra_data,$subject,$length,$start_offset,$options,$offsets,$offsetcount){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+184)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8;
 var $9;
 var $rc;
 var $ocount;
 var $arg_offset_max;
 var $newline;
 var $using_temporary_offsets;
 var $anchored;
 var $startline;
 var $firstline;
 var $utf;
 var $has_first_char;
 var $has_req_char;
 var $first_char;
 var $first_char2;
 var $req_char;
 var $req_char2;
 var $match_block=sp;
 var $md;
 var $tables;
 var $start_bits;
 var $start_match;
 var $end_subject;
 var $start_partial;
 var $match_partial;
 var $req_char_ptr;
 var $study;
 var $re;
 var $flags;
 var $iptr;
 var $iend;
 var $save_end_subject;
 var $new_start_match;
 var $t;
 var $smc;
 var $c;
 var $p;
 var $pp;
 var $iptr1;
 var $iend2;
 var $resetcount;
 $2=$argument_re;
 $3=$extra_data;
 $4=$subject;
 $5=$length;
 $6=$start_offset;
 $7=$options;
 $8=$offsets;
 $9=$offsetcount;
 $using_temporary_offsets=0;
 $has_first_char=0;
 $has_req_char=0;
 $first_char=0;
 $first_char2=0;
 $req_char=0;
 $req_char2=0;
 $md=$match_block;
 $start_bits=0;
 var $10=$4;
 var $11=$6;
 var $12=(($10+$11)|0);
 $start_match=$12;
 $start_partial=0;
 $match_partial=0;
 var $13=$start_match;
 var $14=((($13)-(1))|0);
 $req_char_ptr=$14;
 var $15=$2;
 var $16=$15;
 $re=$16;
 var $17=$re;
 var $18=($17|0)==0;
 if($18){label=2;break;}else{label=7;break;}
 case 2: 
 var $20=$3;
 var $21=($20|0)==0;
 if($21){label=3;break;}else{label=7;break;}
 case 3: 
 var $23=$4;
 var $24=($23|0)==0;
 if($24){label=4;break;}else{label=7;break;}
 case 4: 
 var $26=$5;
 var $27=($26|0)==-999;
 if($27){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=$6;
 var $30=($29|0)==-999;
 if($30){label=6;break;}else{label=7;break;}
 case 6: 
 var $32=_match(0,0,0,0,0,0,0);
 $1=$32;
 label=282;break;
 case 7: 
 var $34=$7;
 var $35=$34&-502310289;
 var $36=($35|0)!=0;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 $1=-3;
 label=282;break;
 case 9: 
 var $39=$re;
 var $40=($39|0)==0;
 if($40){label=13;break;}else{label=10;break;}
 case 10: 
 var $42=$4;
 var $43=($42|0)==0;
 if($43){label=13;break;}else{label=11;break;}
 case 11: 
 var $45=$8;
 var $46=($45|0)==0;
 if($46){label=12;break;}else{label=14;break;}
 case 12: 
 var $48=$9;
 var $49=($48|0)>0;
 if($49){label=13;break;}else{label=14;break;}
 case 13: 
 $1=-2;
 label=282;break;
 case 14: 
 var $52=$9;
 var $53=($52|0)<0;
 if($53){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-15;
 label=282;break;
 case 16: 
 var $56=$5;
 var $57=($56|0)<0;
 if($57){label=17;break;}else{label=18;break;}
 case 17: 
 $1=-32;
 label=282;break;
 case 18: 
 var $60=$6;
 var $61=($60|0)<0;
 if($61){label=20;break;}else{label=19;break;}
 case 19: 
 var $63=$6;
 var $64=$5;
 var $65=($63|0)>($64|0);
 if($65){label=20;break;}else{label=21;break;}
 case 20: 
 $1=-24;
 label=282;break;
 case 21: 
 var $68=$re;
 var $69=(($68)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($70|0)!=1346589253;
 if($71){label=22;break;}else{label=23;break;}
 case 22: 
 var $73=$re;
 var $74=(($73)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==1163019088;
 var $77=($76?-29:-4);
 $1=$77;
 label=282;break;
 case 23: 
 var $79=$re;
 var $80=(($79+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=$81&1;
 var $83=($82|0)==0;
 if($83){label=24;break;}else{label=25;break;}
 case 24: 
 $1=-28;
 label=282;break;
 case 25: 
 var $86=$re;
 var $87=(($86+8)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$88&2048;
 var $90=($89|0)!=0;
 var $91=($90&1);
 var $92=$md;
 var $93=(($92+76)|0);
 HEAP32[(($93)>>2)]=$91;
 $utf=$91;
 var $94=$7;
 var $95=$94&134217728;
 var $96=($95|0)!=0;
 if($96){label=26;break;}else{label=27;break;}
 case 26: 
 var $104=2;label=28;break;
 case 27: 
 var $99=$7;
 var $100=$99&32768;
 var $101=($100|0)!=0;
 var $102=($101?1:0);
 var $104=$102;label=28;break;
 case 28: 
 var $104;
 var $105=$md;
 var $106=(($105+136)|0);
 HEAP32[(($106)>>2)]=$104;
 var $107=$re;
 var $108=$107;
 var $109=$re;
 var $110=(($109+34)|0);
 var $111=HEAP16[(($110)>>1)];
 var $112=($111&65535);
 var $113=(($108+$112)|0);
 var $114=$md;
 var $115=(($114+48)|0);
 HEAP32[(($115)>>2)]=$113;
 var $116=$re;
 var $117=(($116+38)|0);
 var $118=HEAP16[(($117)>>1)];
 var $119=($118&65535);
 var $120=$md;
 var $121=(($120+32)|0);
 HEAP32[(($121)>>2)]=$119;
 var $122=$re;
 var $123=(($122+36)|0);
 var $124=HEAP16[(($123)>>1)];
 var $125=($124&65535);
 var $126=$md;
 var $127=(($126+36)|0);
 HEAP32[(($127)>>2)]=$125;
 $study=0;
 var $128=$md;
 var $129=(($128+4)|0);
 HEAP32[(($129)>>2)]=10000000;
 var $130=$md;
 var $131=(($130+8)|0);
 HEAP32[(($131)>>2)]=10000000;
 var $132=$md;
 var $133=(($132+168)|0);
 HEAP32[(($133)>>2)]=0;
 var $134=$re;
 var $135=(($134+48)|0);
 var $136=HEAP32[(($135)>>2)];
 $tables=$136;
 var $137=$3;
 var $138=($137|0)!=0;
 if($138){label=29;break;}else{label=40;break;}
 case 29: 
 var $140=$3;
 var $141=(($140)|0);
 var $142=HEAP32[(($141)>>2)];
 $flags=$142;
 var $143=$flags;
 var $144=$143&1;
 var $145=($144|0)!=0;
 if($145){label=30;break;}else{label=31;break;}
 case 30: 
 var $147=$3;
 var $148=(($147+4)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$149;
 $study=$150;
 label=31;break;
 case 31: 
 var $152=$flags;
 var $153=$152&2;
 var $154=($153|0)!=0;
 if($154){label=32;break;}else{label=33;break;}
 case 32: 
 var $156=$3;
 var $157=(($156+8)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$md;
 var $160=(($159+4)|0);
 HEAP32[(($160)>>2)]=$158;
 label=33;break;
 case 33: 
 var $162=$flags;
 var $163=$162&16;
 var $164=($163|0)!=0;
 if($164){label=34;break;}else{label=35;break;}
 case 34: 
 var $166=$3;
 var $167=(($166+20)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=$md;
 var $170=(($169+8)|0);
 HEAP32[(($170)>>2)]=$168;
 label=35;break;
 case 35: 
 var $172=$flags;
 var $173=$172&4;
 var $174=($173|0)!=0;
 if($174){label=36;break;}else{label=37;break;}
 case 36: 
 var $176=$3;
 var $177=(($176+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=$md;
 var $180=(($179+168)|0);
 HEAP32[(($180)>>2)]=$178;
 label=37;break;
 case 37: 
 var $182=$flags;
 var $183=$182&8;
 var $184=($183|0)!=0;
 if($184){label=38;break;}else{label=39;break;}
 case 38: 
 var $186=$3;
 var $187=(($186+16)|0);
 var $188=HEAP32[(($187)>>2)];
 $tables=$188;
 label=39;break;
 case 39: 
 label=40;break;
 case 40: 
 var $191=$re;
 var $192=(($191+12)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=$193&8192;
 var $195=($194|0)!=0;
 if($195){label=41;break;}else{label=43;break;}
 case 41: 
 var $197=$re;
 var $198=(($197+16)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=$md;
 var $201=(($200+4)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=($199>>>0)<($202>>>0);
 if($203){label=42;break;}else{label=43;break;}
 case 42: 
 var $205=$re;
 var $206=(($205+16)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$md;
 var $209=(($208+4)|0);
 HEAP32[(($209)>>2)]=$207;
 label=43;break;
 case 43: 
 var $211=$re;
 var $212=(($211+12)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=$213&16384;
 var $215=($214|0)!=0;
 if($215){label=44;break;}else{label=46;break;}
 case 44: 
 var $217=$re;
 var $218=(($217+20)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=$md;
 var $221=(($220+8)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=($219>>>0)<($222>>>0);
 if($223){label=45;break;}else{label=46;break;}
 case 45: 
 var $225=$re;
 var $226=(($225+20)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=$md;
 var $229=(($228+8)|0);
 HEAP32[(($229)>>2)]=$227;
 label=46;break;
 case 46: 
 var $231=$tables;
 var $232=($231|0)==0;
 if($232){label=47;break;}else{label=48;break;}
 case 47: 
 $tables=5672;
 label=48;break;
 case 48: 
 var $235=$re;
 var $236=(($235+8)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=$7;
 var $239=$237|$238;
 var $240=$239&16;
 var $241=($240|0)!=0;
 var $242=($241&1);
 $anchored=$242;
 var $243=$re;
 var $244=(($243+12)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=$245&256;
 var $247=($246|0)!=0;
 var $248=($247&1);
 $startline=$248;
 var $249=$re;
 var $250=(($249+8)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=$251&262144;
 var $253=($252|0)!=0;
 var $254=($253&1);
 $firstline=$254;
 var $255=$re;
 var $256=$255;
 var $257=$re;
 var $258=(($257+34)|0);
 var $259=HEAP16[(($258)>>1)];
 var $260=($259&65535);
 var $261=(($256+$260)|0);
 var $262=$re;
 var $263=(($262+38)|0);
 var $264=HEAP16[(($263)>>1)];
 var $265=($264&65535);
 var $266=$re;
 var $267=(($266+36)|0);
 var $268=HEAP16[(($267)>>1)];
 var $269=($268&65535);
 var $270=(Math_imul($265,$269)|0);
 var $271=(($261+$270)|0);
 var $272=$md;
 var $273=(($272+112)|0);
 HEAP32[(($273)>>2)]=$271;
 var $274=$4;
 var $275=$md;
 var $276=(($275+116)|0);
 HEAP32[(($276)>>2)]=$274;
 var $277=$6;
 var $278=$md;
 var $279=(($278+148)|0);
 HEAP32[(($279)>>2)]=$277;
 var $280=$md;
 var $281=(($280+116)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=$5;
 var $284=(($282+$283)|0);
 var $285=$md;
 var $286=(($285+120)|0);
 HEAP32[(($286)>>2)]=$284;
 var $287=$md;
 var $288=(($287+120)|0);
 var $289=HEAP32[(($288)>>2)];
 $end_subject=$289;
 var $290=$re;
 var $291=(($290+8)|0);
 var $292=HEAP32[(($291)>>2)];
 var $293=$292&32;
 var $294=($293|0)!=0;
 var $295=($294&1);
 var $296=$md;
 var $297=(($296+88)|0);
 HEAP32[(($297)>>2)]=$295;
 var $298=$re;
 var $299=(($298+8)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=$300&536870912;
 var $302=($301|0)!=0;
 var $303=($302&1);
 var $304=$md;
 var $305=(($304+84)|0);
 HEAP32[(($305)>>2)]=$303;
 var $306=$re;
 var $307=(($306+8)|0);
 var $308=HEAP32[(($307)>>2)];
 var $309=$308&33554432;
 var $310=($309|0)!=0;
 var $311=($310&1);
 var $312=$md;
 var $313=(($312+80)|0);
 HEAP32[(($313)>>2)]=$311;
 var $314=$md;
 var $315=(($314+44)|0);
 HEAP32[(($315)>>2)]=0;
 var $316=$7;
 var $317=$316&128;
 var $318=($317|0)!=0;
 var $319=($318&1);
 var $320=$md;
 var $321=(($320+68)|0);
 HEAP32[(($321)>>2)]=$319;
 var $322=$7;
 var $323=$322&256;
 var $324=($323|0)!=0;
 var $325=($324&1);
 var $326=$md;
 var $327=(($326+72)|0);
 HEAP32[(($327)>>2)]=$325;
 var $328=$7;
 var $329=$328&1024;
 var $330=($329|0)!=0;
 var $331=($330&1);
 var $332=$md;
 var $333=(($332+92)|0);
 HEAP32[(($333)>>2)]=$331;
 var $334=$7;
 var $335=$334&268435456;
 var $336=($335|0)!=0;
 var $337=($336&1);
 var $338=$md;
 var $339=(($338+96)|0);
 HEAP32[(($339)>>2)]=$337;
 var $340=$md;
 var $341=(($340+100)|0);
 HEAP32[(($341)>>2)]=0;
 var $342=$md;
 var $343=(($342+176)|0);
 HEAP32[(($343)>>2)]=0;
 var $344=$md;
 var $345=(($344+172)|0);
 HEAP32[(($345)>>2)]=0;
 var $346=$md;
 var $347=(($346+164)|0);
 HEAP32[(($347)>>2)]=0;
 var $348=$re;
 var $349=(($348+12)|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=$350&4096;
 var $352=($351|0)!=0;
 var $353=($352&1);
 var $354=$md;
 var $355=(($354+108)|0);
 HEAP32[(($355)>>2)]=$353;
 var $356=$tables;
 var $357=(($356)|0);
 var $358=$md;
 var $359=(($358+56)|0);
 HEAP32[(($359)>>2)]=$357;
 var $360=$tables;
 var $361=(($360+256)|0);
 var $362=$md;
 var $363=(($362+60)|0);
 HEAP32[(($363)>>2)]=$361;
 var $364=$tables;
 var $365=(($364+832)|0);
 var $366=$md;
 var $367=(($366+64)|0);
 HEAP32[(($367)>>2)]=$365;
 var $368=$7;
 var $369=$368&25165824;
 if(($369|0)==0){ label=49;break;}else if(($369|0)==8388608){ label=53;break;}else if(($369|0)==16777216){ label=54;break;}else{label=55;break;}
 case 49: 
 var $371=$re;
 var $372=(($371+8)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=$373&25165824;
 var $375=($374|0)!=0;
 if($375){label=50;break;}else{label=51;break;}
 case 50: 
 var $377=$re;
 var $378=(($377+8)|0);
 var $379=HEAP32[(($378)>>2)];
 var $380=$379&8388608;
 var $381=($380|0)!=0;
 var $382=($381&1);
 var $383=$md;
 var $384=(($383+104)|0);
 HEAP32[(($384)>>2)]=$382;
 label=52;break;
 case 51: 
 var $386=$md;
 var $387=(($386+104)|0);
 HEAP32[(($387)>>2)]=0;
 label=52;break;
 case 52: 
 label=56;break;
 case 53: 
 var $390=$md;
 var $391=(($390+104)|0);
 HEAP32[(($391)>>2)]=1;
 label=56;break;
 case 54: 
 var $393=$md;
 var $394=(($393+104)|0);
 HEAP32[(($394)>>2)]=0;
 label=56;break;
 case 55: 
 $1=-23;
 label=282;break;
 case 56: 
 var $397=$7;
 var $398=$397&7340032;
 var $399=($398|0)==0;
 if($399){label=57;break;}else{label=58;break;}
 case 57: 
 var $401=$re;
 var $402=(($401+8)|0);
 var $403=HEAP32[(($402)>>2)];
 var $407=$403;label=59;break;
 case 58: 
 var $405=$7;
 var $407=$405;label=59;break;
 case 59: 
 var $407;
 var $408=$407&7340032;
 if(($408|0)==0){ label=60;break;}else if(($408|0)==1048576){ label=61;break;}else if(($408|0)==2097152){ label=62;break;}else if(($408|0)==3145728){ label=63;break;}else if(($408|0)==4194304){ label=64;break;}else if(($408|0)==5242880){ label=65;break;}else{label=66;break;}
 case 60: 
 $newline=10;
 label=67;break;
 case 61: 
 $newline=13;
 label=67;break;
 case 62: 
 $newline=10;
 label=67;break;
 case 63: 
 $newline=3338;
 label=67;break;
 case 64: 
 $newline=-1;
 label=67;break;
 case 65: 
 $newline=-2;
 label=67;break;
 case 66: 
 $1=-23;
 label=282;break;
 case 67: 
 var $417=$newline;
 var $418=($417|0)==-2;
 if($418){label=68;break;}else{label=69;break;}
 case 68: 
 var $420=$md;
 var $421=(($420+24)|0);
 HEAP32[(($421)>>2)]=2;
 label=76;break;
 case 69: 
 var $423=$newline;
 var $424=($423|0)<0;
 if($424){label=70;break;}else{label=71;break;}
 case 70: 
 var $426=$md;
 var $427=(($426+24)|0);
 HEAP32[(($427)>>2)]=1;
 label=75;break;
 case 71: 
 var $429=$md;
 var $430=(($429+24)|0);
 HEAP32[(($430)>>2)]=0;
 var $431=$newline;
 var $432=($431|0)>255;
 if($432){label=72;break;}else{label=73;break;}
 case 72: 
 var $434=$md;
 var $435=(($434+28)|0);
 HEAP32[(($435)>>2)]=2;
 var $436=$newline;
 var $437=$436>>8;
 var $438=$437&255;
 var $439=(($438)&255);
 var $440=$md;
 var $441=(($440+52)|0);
 var $442=(($441)|0);
 HEAP8[($442)]=$439;
 var $443=$newline;
 var $444=$443&255;
 var $445=(($444)&255);
 var $446=$md;
 var $447=(($446+52)|0);
 var $448=(($447+1)|0);
 HEAP8[($448)]=$445;
 label=74;break;
 case 73: 
 var $450=$md;
 var $451=(($450+28)|0);
 HEAP32[(($451)>>2)]=1;
 var $452=$newline;
 var $453=(($452)&255);
 var $454=$md;
 var $455=(($454+52)|0);
 var $456=(($455)|0);
 HEAP8[($456)]=$453;
 label=74;break;
 case 74: 
 label=75;break;
 case 75: 
 label=76;break;
 case 76: 
 var $460=$md;
 var $461=(($460+136)|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=($462|0)!=0;
 if($463){label=77;break;}else{label=79;break;}
 case 77: 
 var $465=$re;
 var $466=(($465+12)|0);
 var $467=HEAP32[(($466)>>2)];
 var $468=$467&512;
 var $469=($468|0)!=0;
 if($469){label=78;break;}else{label=79;break;}
 case 78: 
 $1=-13;
 label=282;break;
 case 79: 
 var $472=$9;
 var $473=$9;
 var $474=(((($473|0))%(3))&-1);
 var $475=((($472)-($474))|0);
 $ocount=$475;
 var $476=$ocount;
 var $477=($476<<1);
 var $478=(((($477|0))/(3))&-1);
 $arg_offset_max=$478;
 var $479=$re;
 var $480=(($479+32)|0);
 var $481=HEAP16[(($480)>>1)];
 var $482=($481&65535);
 var $483=($482|0)>0;
 if($483){label=80;break;}else{label=84;break;}
 case 80: 
 var $485=$re;
 var $486=(($485+32)|0);
 var $487=HEAP16[(($486)>>1)];
 var $488=($487&65535);
 var $489=$ocount;
 var $490=(((($489|0))/(3))&-1);
 var $491=($488|0)>=($490|0);
 if($491){label=81;break;}else{label=84;break;}
 case 81: 
 var $493=$re;
 var $494=(($493+32)|0);
 var $495=HEAP16[(($494)>>1)];
 var $496=($495&65535);
 var $497=((($496)*(3))&-1);
 var $498=((($497)+(3))|0);
 $ocount=$498;
 var $499=HEAP32[((504)>>2)];
 var $500=$ocount;
 var $501=($500<<2);
 var $502=FUNCTION_TABLE[$499]($501);
 var $503=$502;
 var $504=$md;
 var $505=(($504+12)|0);
 HEAP32[(($505)>>2)]=$503;
 var $506=$md;
 var $507=(($506+12)|0);
 var $508=HEAP32[(($507)>>2)];
 var $509=($508|0)==0;
 if($509){label=82;break;}else{label=83;break;}
 case 82: 
 $1=-6;
 label=282;break;
 case 83: 
 $using_temporary_offsets=1;
 label=85;break;
 case 84: 
 var $513=$8;
 var $514=$md;
 var $515=(($514+12)|0);
 HEAP32[(($515)>>2)]=$513;
 label=85;break;
 case 85: 
 var $517=$ocount;
 var $518=$md;
 var $519=(($518+16)|0);
 HEAP32[(($519)>>2)]=$517;
 var $520=$ocount;
 var $521=($520<<1);
 var $522=(((($521|0))/(3))&-1);
 var $523=$md;
 var $524=(($523+20)|0);
 HEAP32[(($524)>>2)]=$522;
 var $525=$md;
 var $526=(($525+144)|0);
 HEAP32[(($526)>>2)]=0;
 var $527=$md;
 var $528=(($527+12)|0);
 var $529=HEAP32[(($528)>>2)];
 var $530=($529|0)!=0;
 if($530){label=86;break;}else{label=92;break;}
 case 86: 
 var $532=$md;
 var $533=(($532+12)|0);
 var $534=HEAP32[(($533)>>2)];
 var $535=$ocount;
 var $536=(($534+($535<<2))|0);
 $iptr=$536;
 var $537=$iptr;
 var $538=$re;
 var $539=(($538+30)|0);
 var $540=HEAP16[(($539)>>1)];
 var $541=($540&65535);
 var $542=(((-$541))|0);
 var $543=(($537+($542<<2))|0);
 $iend=$543;
 var $544=$iend;
 var $545=$md;
 var $546=(($545+12)|0);
 var $547=HEAP32[(($546)>>2)];
 var $548=(($547+8)|0);
 var $549=($544>>>0)<($548>>>0);
 if($549){label=87;break;}else{label=88;break;}
 case 87: 
 var $551=$md;
 var $552=(($551+12)|0);
 var $553=HEAP32[(($552)>>2)];
 var $554=(($553+8)|0);
 $iend=$554;
 label=88;break;
 case 88: 
 label=89;break;
 case 89: 
 var $557=$iptr;
 var $558=((($557)-(4))|0);
 $iptr=$558;
 var $559=$iend;
 var $560=($558>>>0)>=($559>>>0);
 if($560){label=90;break;}else{label=91;break;}
 case 90: 
 var $562=$iptr;
 HEAP32[(($562)>>2)]=-1;
 label=89;break;
 case 91: 
 var $564=$md;
 var $565=(($564+12)|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=(($566+4)|0);
 HEAP32[(($567)>>2)]=-1;
 var $568=$md;
 var $569=(($568+12)|0);
 var $570=HEAP32[(($569)>>2)];
 var $571=(($570)|0);
 HEAP32[(($571)>>2)]=-1;
 label=92;break;
 case 92: 
 var $573=$anchored;
 var $574=($573|0)!=0;
 if($574){label=103;break;}else{label=93;break;}
 case 93: 
 var $576=$re;
 var $577=(($576+12)|0);
 var $578=HEAP32[(($577)>>2)];
 var $579=$578&16;
 var $580=($579|0)!=0;
 if($580){label=94;break;}else{label=97;break;}
 case 94: 
 $has_first_char=1;
 var $582=$re;
 var $583=(($582+24)|0);
 var $584=HEAP16[(($583)>>1)];
 var $585=(($584)&255);
 $first_char2=$585;
 $first_char=$585;
 var $586=$re;
 var $587=(($586+12)|0);
 var $588=HEAP32[(($587)>>2)];
 var $589=$588&32;
 var $590=($589|0)!=0;
 if($590){label=95;break;}else{label=96;break;}
 case 95: 
 var $592=$first_char;
 var $593=($592&255);
 var $594=$md;
 var $595=(($594+60)|0);
 var $596=HEAP32[(($595)>>2)];
 var $597=(($596+$593)|0);
 var $598=HEAP8[($597)];
 $first_char2=$598;
 label=96;break;
 case 96: 
 label=102;break;
 case 97: 
 var $601=$startline;
 var $602=($601|0)!=0;
 if($602){label=101;break;}else{label=98;break;}
 case 98: 
 var $604=$study;
 var $605=($604|0)!=0;
 if($605){label=99;break;}else{label=101;break;}
 case 99: 
 var $607=$study;
 var $608=(($607+4)|0);
 var $609=HEAP32[(($608)>>2)];
 var $610=$609&1;
 var $611=($610|0)!=0;
 if($611){label=100;break;}else{label=101;break;}
 case 100: 
 var $613=$study;
 var $614=(($613+8)|0);
 var $615=(($614)|0);
 $start_bits=$615;
 label=101;break;
 case 101: 
 label=102;break;
 case 102: 
 label=103;break;
 case 103: 
 var $619=$re;
 var $620=(($619+12)|0);
 var $621=HEAP32[(($620)>>2)];
 var $622=$621&64;
 var $623=($622|0)!=0;
 if($623){label=104;break;}else{label=107;break;}
 case 104: 
 $has_req_char=1;
 var $625=$re;
 var $626=(($625+26)|0);
 var $627=HEAP16[(($626)>>1)];
 var $628=(($627)&255);
 $req_char2=$628;
 $req_char=$628;
 var $629=$re;
 var $630=(($629+12)|0);
 var $631=HEAP32[(($630)>>2)];
 var $632=$631&128;
 var $633=($632|0)!=0;
 if($633){label=105;break;}else{label=106;break;}
 case 105: 
 var $635=$req_char;
 var $636=($635&255);
 var $637=$md;
 var $638=(($637+60)|0);
 var $639=HEAP32[(($638)>>2)];
 var $640=(($639+$636)|0);
 var $641=HEAP8[($640)];
 $req_char2=$641;
 label=106;break;
 case 106: 
 label=107;break;
 case 107: 
 label=108;break;
 case 108: 
 var $645=$end_subject;
 $save_end_subject=$645;
 var $646=$firstline;
 var $647=($646|0)!=0;
 if($647){label=109;break;}else{label=125;break;}
 case 109: 
 var $649=$start_match;
 $t=$649;
 label=110;break;
 case 110: 
 var $651=$t;
 var $652=$md;
 var $653=(($652+120)|0);
 var $654=HEAP32[(($653)>>2)];
 var $655=($651>>>0)<($654>>>0);
 if($655){label=111;break;}else{var $730=0;label=122;break;}
 case 111: 
 var $657=$md;
 var $658=(($657+24)|0);
 var $659=HEAP32[(($658)>>2)];
 var $660=($659|0)!=0;
 if($660){label=112;break;}else{label=115;break;}
 case 112: 
 var $662=$t;
 var $663=$md;
 var $664=(($663+120)|0);
 var $665=HEAP32[(($664)>>2)];
 var $666=($662>>>0)<($665>>>0);
 if($666){label=113;break;}else{var $681=0;label=114;break;}
 case 113: 
 var $668=$t;
 var $669=$md;
 var $670=(($669+24)|0);
 var $671=HEAP32[(($670)>>2)];
 var $672=$md;
 var $673=(($672+120)|0);
 var $674=HEAP32[(($673)>>2)];
 var $675=$md;
 var $676=(($675+28)|0);
 var $677=$utf;
 var $678=__pcre_is_newline($668,$671,$674,$676,$677);
 var $679=($678|0)!=0;
 var $681=$679;label=114;break;
 case 114: 
 var $681;
 var $682=($681&1);
 var $726=$682;label=121;break;
 case 115: 
 var $684=$t;
 var $685=$md;
 var $686=(($685+120)|0);
 var $687=HEAP32[(($686)>>2)];
 var $688=$md;
 var $689=(($688+28)|0);
 var $690=HEAP32[(($689)>>2)];
 var $691=(((-$690))|0);
 var $692=(($687+$691)|0);
 var $693=($684>>>0)<=($692>>>0);
 if($693){label=116;break;}else{var $723=0;label=120;break;}
 case 116: 
 var $695=$t;
 var $696=HEAP8[($695)];
 var $697=($696&255);
 var $698=$md;
 var $699=(($698+52)|0);
 var $700=(($699)|0);
 var $701=HEAP8[($700)];
 var $702=($701&255);
 var $703=($697|0)==($702|0);
 if($703){label=117;break;}else{var $723=0;label=120;break;}
 case 117: 
 var $705=$md;
 var $706=(($705+28)|0);
 var $707=HEAP32[(($706)>>2)];
 var $708=($707|0)==1;
 if($708){var $721=1;label=119;break;}else{label=118;break;}
 case 118: 
 var $710=$t;
 var $711=(($710+1)|0);
 var $712=HEAP8[($711)];
 var $713=($712&255);
 var $714=$md;
 var $715=(($714+52)|0);
 var $716=(($715+1)|0);
 var $717=HEAP8[($716)];
 var $718=($717&255);
 var $719=($713|0)==($718|0);
 var $721=$719;label=119;break;
 case 119: 
 var $721;
 var $723=$721;label=120;break;
 case 120: 
 var $723;
 var $724=($723&1);
 var $726=$724;label=121;break;
 case 121: 
 var $726;
 var $727=($726|0)!=0;
 var $728=$727^1;
 var $730=$728;label=122;break;
 case 122: 
 var $730;
 if($730){label=123;break;}else{label=124;break;}
 case 123: 
 var $732=$t;
 var $733=(($732+1)|0);
 $t=$733;
 label=110;break;
 case 124: 
 var $735=$t;
 $end_subject=$735;
 label=125;break;
 case 125: 
 var $737=$7;
 var $738=$re;
 var $739=(($738+8)|0);
 var $740=HEAP32[(($739)>>2)];
 var $741=$737|$740;
 var $742=$741&67108864;
 var $743=($742|0)==0;
 if($743){label=126;break;}else{label=177;break;}
 case 126: 
 var $745=$has_first_char;
 var $746=($745|0)!=0;
 if($746){label=127;break;}else{label=142;break;}
 case 127: 
 var $748=$first_char;
 var $749=($748&255);
 var $750=$first_char2;
 var $751=($750&255);
 var $752=($749|0)!=($751|0);
 if($752){label=128;break;}else{label=135;break;}
 case 128: 
 label=129;break;
 case 129: 
 var $755=$start_match;
 var $756=$end_subject;
 var $757=($755>>>0)<($756>>>0);
 if($757){label=130;break;}else{var $772=0;label=132;break;}
 case 130: 
 var $759=$start_match;
 var $760=HEAP8[($759)];
 $smc=$760;
 var $761=($760&255);
 var $762=$first_char;
 var $763=($762&255);
 var $764=($761|0)!=($763|0);
 if($764){label=131;break;}else{var $772=0;label=132;break;}
 case 131: 
 var $766=$smc;
 var $767=($766&255);
 var $768=$first_char2;
 var $769=($768&255);
 var $770=($767|0)!=($769|0);
 var $772=$770;label=132;break;
 case 132: 
 var $772;
 if($772){label=133;break;}else{label=134;break;}
 case 133: 
 var $774=$start_match;
 var $775=(($774+1)|0);
 $start_match=$775;
 label=129;break;
 case 134: 
 label=141;break;
 case 135: 
 label=136;break;
 case 136: 
 var $779=$start_match;
 var $780=$end_subject;
 var $781=($779>>>0)<($780>>>0);
 if($781){label=137;break;}else{var $790=0;label=138;break;}
 case 137: 
 var $783=$start_match;
 var $784=HEAP8[($783)];
 var $785=($784&255);
 var $786=$first_char;
 var $787=($786&255);
 var $788=($785|0)!=($787|0);
 var $790=$788;label=138;break;
 case 138: 
 var $790;
 if($790){label=139;break;}else{label=140;break;}
 case 139: 
 var $792=$start_match;
 var $793=(($792+1)|0);
 $start_match=$793;
 label=136;break;
 case 140: 
 label=141;break;
 case 141: 
 label=176;break;
 case 142: 
 var $797=$startline;
 var $798=($797|0)!=0;
 if($798){label=143;break;}else{label=167;break;}
 case 143: 
 var $800=$start_match;
 var $801=$md;
 var $802=(($801+116)|0);
 var $803=HEAP32[(($802)>>2)];
 var $804=$6;
 var $805=(($803+$804)|0);
 var $806=($800>>>0)>($805>>>0);
 if($806){label=144;break;}else{label=166;break;}
 case 144: 
 label=145;break;
 case 145: 
 var $809=$start_match;
 var $810=$end_subject;
 var $811=($809>>>0)<($810>>>0);
 if($811){label=146;break;}else{var $895=0;label=157;break;}
 case 146: 
 var $813=$md;
 var $814=(($813+24)|0);
 var $815=HEAP32[(($814)>>2)];
 var $816=($815|0)!=0;
 if($816){label=147;break;}else{label=150;break;}
 case 147: 
 var $818=$start_match;
 var $819=$md;
 var $820=(($819+116)|0);
 var $821=HEAP32[(($820)>>2)];
 var $822=($818>>>0)>($821>>>0);
 if($822){label=148;break;}else{var $837=0;label=149;break;}
 case 148: 
 var $824=$start_match;
 var $825=$md;
 var $826=(($825+24)|0);
 var $827=HEAP32[(($826)>>2)];
 var $828=$md;
 var $829=(($828+116)|0);
 var $830=HEAP32[(($829)>>2)];
 var $831=$md;
 var $832=(($831+28)|0);
 var $833=$utf;
 var $834=__pcre_was_newline($824,$827,$830,$832,$833);
 var $835=($834|0)!=0;
 var $837=$835;label=149;break;
 case 149: 
 var $837;
 var $838=($837&1);
 var $891=$838;label=156;break;
 case 150: 
 var $840=$start_match;
 var $841=$md;
 var $842=(($841+116)|0);
 var $843=HEAP32[(($842)>>2)];
 var $844=$md;
 var $845=(($844+28)|0);
 var $846=HEAP32[(($845)>>2)];
 var $847=(($843+$846)|0);
 var $848=($840>>>0)>=($847>>>0);
 if($848){label=151;break;}else{var $888=0;label=155;break;}
 case 151: 
 var $850=$start_match;
 var $851=$md;
 var $852=(($851+28)|0);
 var $853=HEAP32[(($852)>>2)];
 var $854=(((-$853))|0);
 var $855=(($850+$854)|0);
 var $856=HEAP8[($855)];
 var $857=($856&255);
 var $858=$md;
 var $859=(($858+52)|0);
 var $860=(($859)|0);
 var $861=HEAP8[($860)];
 var $862=($861&255);
 var $863=($857|0)==($862|0);
 if($863){label=152;break;}else{var $888=0;label=155;break;}
 case 152: 
 var $865=$md;
 var $866=(($865+28)|0);
 var $867=HEAP32[(($866)>>2)];
 var $868=($867|0)==1;
 if($868){var $886=1;label=154;break;}else{label=153;break;}
 case 153: 
 var $870=$start_match;
 var $871=$md;
 var $872=(($871+28)|0);
 var $873=HEAP32[(($872)>>2)];
 var $874=(((-$873))|0);
 var $875=(($870+$874)|0);
 var $876=(($875+1)|0);
 var $877=HEAP8[($876)];
 var $878=($877&255);
 var $879=$md;
 var $880=(($879+52)|0);
 var $881=(($880+1)|0);
 var $882=HEAP8[($881)];
 var $883=($882&255);
 var $884=($878|0)==($883|0);
 var $886=$884;label=154;break;
 case 154: 
 var $886;
 var $888=$886;label=155;break;
 case 155: 
 var $888;
 var $889=($888&1);
 var $891=$889;label=156;break;
 case 156: 
 var $891;
 var $892=($891|0)!=0;
 var $893=$892^1;
 var $895=$893;label=157;break;
 case 157: 
 var $895;
 if($895){label=158;break;}else{label=159;break;}
 case 158: 
 var $897=$start_match;
 var $898=(($897+1)|0);
 $start_match=$898;
 label=145;break;
 case 159: 
 var $900=$start_match;
 var $901=((($900)-(1))|0);
 var $902=HEAP8[($901)];
 var $903=($902&255);
 var $904=($903|0)==13;
 if($904){label=160;break;}else{label=165;break;}
 case 160: 
 var $906=$md;
 var $907=(($906+24)|0);
 var $908=HEAP32[(($907)>>2)];
 var $909=($908|0)==1;
 if($909){label=162;break;}else{label=161;break;}
 case 161: 
 var $911=$md;
 var $912=(($911+24)|0);
 var $913=HEAP32[(($912)>>2)];
 var $914=($913|0)==2;
 if($914){label=162;break;}else{label=165;break;}
 case 162: 
 var $916=$start_match;
 var $917=$end_subject;
 var $918=($916>>>0)<($917>>>0);
 if($918){label=163;break;}else{label=165;break;}
 case 163: 
 var $920=$start_match;
 var $921=HEAP8[($920)];
 var $922=($921&255);
 var $923=($922|0)==10;
 if($923){label=164;break;}else{label=165;break;}
 case 164: 
 var $925=$start_match;
 var $926=(($925+1)|0);
 $start_match=$926;
 label=165;break;
 case 165: 
 label=166;break;
 case 166: 
 label=175;break;
 case 167: 
 var $930=$start_bits;
 var $931=($930|0)!=0;
 if($931){label=168;break;}else{label=174;break;}
 case 168: 
 label=169;break;
 case 169: 
 var $934=$start_match;
 var $935=$end_subject;
 var $936=($934>>>0)<($935>>>0);
 if($936){label=170;break;}else{label=173;break;}
 case 170: 
 var $938=$start_match;
 var $939=HEAP8[($938)];
 var $940=($939&255);
 $c=$940;
 var $941=$c;
 var $942=(((($941>>>0))/(8))&-1);
 var $943=$start_bits;
 var $944=(($943+$942)|0);
 var $945=HEAP8[($944)];
 var $946=($945&255);
 var $947=$c;
 var $948=$947&7;
 var $949=1<<$948;
 var $950=$946&$949;
 var $951=($950|0)!=0;
 if($951){label=171;break;}else{label=172;break;}
 case 171: 
 label=173;break;
 case 172: 
 var $954=$start_match;
 var $955=(($954+1)|0);
 $start_match=$955;
 label=169;break;
 case 173: 
 label=174;break;
 case 174: 
 label=175;break;
 case 175: 
 label=176;break;
 case 176: 
 label=177;break;
 case 177: 
 var $961=$save_end_subject;
 $end_subject=$961;
 var $962=$7;
 var $963=$re;
 var $964=(($963+8)|0);
 var $965=HEAP32[(($964)>>2)];
 var $966=$962|$965;
 var $967=$966&67108864;
 var $968=($967|0)==0;
 if($968){label=178;break;}else{label=205;break;}
 case 178: 
 var $970=$md;
 var $971=(($970+136)|0);
 var $972=HEAP32[(($971)>>2)];
 var $973=($972|0)!=0;
 if($973){label=205;break;}else{label=179;break;}
 case 179: 
 var $975=$study;
 var $976=($975|0)!=0;
 if($976){label=180;break;}else{label=183;break;}
 case 180: 
 var $978=$study;
 var $979=(($978+4)|0);
 var $980=HEAP32[(($979)>>2)];
 var $981=$980&2;
 var $982=($981|0)!=0;
 if($982){label=181;break;}else{label=183;break;}
 case 181: 
 var $984=$end_subject;
 var $985=$start_match;
 var $986=$984;
 var $987=$985;
 var $988=((($986)-($987))|0);
 var $989=$study;
 var $990=(($989+40)|0);
 var $991=HEAP32[(($990)>>2)];
 var $992=($988>>>0)<($991>>>0);
 if($992){label=182;break;}else{label=183;break;}
 case 182: 
 $rc=0;
 label=238;break;
 case 183: 
 var $995=$has_req_char;
 var $996=($995|0)!=0;
 if($996){label=184;break;}else{label=204;break;}
 case 184: 
 var $998=$end_subject;
 var $999=$start_match;
 var $1000=$998;
 var $1001=$999;
 var $1002=((($1000)-($1001))|0);
 var $1003=($1002|0)<1000;
 if($1003){label=185;break;}else{label=204;break;}
 case 185: 
 var $1005=$start_match;
 var $1006=$has_first_char;
 var $1007=($1006|0)!=0;
 var $1008=($1007?1:0);
 var $1009=(($1005+$1008)|0);
 $p=$1009;
 var $1010=$p;
 var $1011=$req_char_ptr;
 var $1012=($1010>>>0)>($1011>>>0);
 if($1012){label=186;break;}else{label=203;break;}
 case 186: 
 var $1014=$req_char;
 var $1015=($1014&255);
 var $1016=$req_char2;
 var $1017=($1016&255);
 var $1018=($1015|0)!=($1017|0);
 if($1018){label=187;break;}else{label=194;break;}
 case 187: 
 label=188;break;
 case 188: 
 var $1021=$p;
 var $1022=$end_subject;
 var $1023=($1021>>>0)<($1022>>>0);
 if($1023){label=189;break;}else{label=193;break;}
 case 189: 
 var $1025=$p;
 var $1026=(($1025+1)|0);
 $p=$1026;
 var $1027=HEAP8[($1025)];
 var $1028=($1027&255);
 $pp=$1028;
 var $1029=$pp;
 var $1030=$req_char;
 var $1031=($1030&255);
 var $1032=($1029|0)==($1031|0);
 if($1032){label=191;break;}else{label=190;break;}
 case 190: 
 var $1034=$pp;
 var $1035=$req_char2;
 var $1036=($1035&255);
 var $1037=($1034|0)==($1036|0);
 if($1037){label=191;break;}else{label=192;break;}
 case 191: 
 var $1039=$p;
 var $1040=((($1039)-(1))|0);
 $p=$1040;
 label=193;break;
 case 192: 
 label=188;break;
 case 193: 
 label=200;break;
 case 194: 
 label=195;break;
 case 195: 
 var $1045=$p;
 var $1046=$end_subject;
 var $1047=($1045>>>0)<($1046>>>0);
 if($1047){label=196;break;}else{label=199;break;}
 case 196: 
 var $1049=$p;
 var $1050=(($1049+1)|0);
 $p=$1050;
 var $1051=HEAP8[($1049)];
 var $1052=($1051&255);
 var $1053=$req_char;
 var $1054=($1053&255);
 var $1055=($1052|0)==($1054|0);
 if($1055){label=197;break;}else{label=198;break;}
 case 197: 
 var $1057=$p;
 var $1058=((($1057)-(1))|0);
 $p=$1058;
 label=199;break;
 case 198: 
 label=195;break;
 case 199: 
 label=200;break;
 case 200: 
 var $1062=$p;
 var $1063=$end_subject;
 var $1064=($1062>>>0)>=($1063>>>0);
 if($1064){label=201;break;}else{label=202;break;}
 case 201: 
 $rc=0;
 label=238;break;
 case 202: 
 var $1067=$p;
 $req_char_ptr=$1067;
 label=203;break;
 case 203: 
 label=204;break;
 case 204: 
 label=205;break;
 case 205: 
 var $1071=$start_match;
 var $1072=$md;
 var $1073=(($1072+124)|0);
 HEAP32[(($1073)>>2)]=$1071;
 var $1074=$start_match;
 var $1075=$md;
 var $1076=(($1075+132)|0);
 HEAP32[(($1076)>>2)]=$1074;
 var $1077=$md;
 var $1078=(($1077)|0);
 HEAP32[(($1078)>>2)]=0;
 var $1079=$md;
 var $1080=(($1079+152)|0);
 HEAP32[(($1080)>>2)]=0;
 var $1081=$md;
 var $1082=(($1081+140)|0);
 HEAP32[(($1082)>>2)]=0;
 var $1083=$md;
 var $1084=(($1083+40)|0);
 HEAP32[(($1084)>>2)]=0;
 var $1085=$start_match;
 var $1086=$md;
 var $1087=(($1086+112)|0);
 var $1088=HEAP32[(($1087)>>2)];
 var $1089=$start_match;
 var $1090=$md;
 var $1091=_match($1085,$1088,$1089,2,$1090,0,0);
 $rc=$1091;
 var $1092=$md;
 var $1093=(($1092+100)|0);
 var $1094=HEAP32[(($1093)>>2)];
 var $1095=($1094|0)!=0;
 if($1095){label=206;break;}else{label=208;break;}
 case 206: 
 var $1097=$start_partial;
 var $1098=($1097|0)==0;
 if($1098){label=207;break;}else{label=208;break;}
 case 207: 
 var $1100=$md;
 var $1101=(($1100+132)|0);
 var $1102=HEAP32[(($1101)>>2)];
 $start_partial=$1102;
 var $1103=$start_match;
 $match_partial=$1103;
 label=208;break;
 case 208: 
 var $1105=$rc;
 switch(($1105|0)){case -993:{ label=209;break;}case -994:{ label=210;break;}case 0:case -995:case -992:{ label=213;break;}case -996:{ label=214;break;}default:{label=215;break;}}break;
 case 209: 
 var $1107=$start_match;
 $new_start_match=$1107;
 var $1108=$md;
 var $1109=(($1108+40)|0);
 var $1110=HEAP32[(($1109)>>2)];
 var $1111=$md;
 var $1112=(($1111+44)|0);
 HEAP32[(($1112)>>2)]=$1110;
 label=216;break;
 case 210: 
 var $1114=$md;
 var $1115=(($1114+124)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=$start_match;
 var $1118=($1116>>>0)>($1117>>>0);
 if($1118){label=211;break;}else{label=212;break;}
 case 211: 
 var $1120=$md;
 var $1121=(($1120+124)|0);
 var $1122=HEAP32[(($1121)>>2)];
 $new_start_match=$1122;
 label=216;break;
 case 212: 
 label=213;break;
 case 213: 
 var $1125=$md;
 var $1126=(($1125+44)|0);
 HEAP32[(($1126)>>2)]=0;
 var $1127=$start_match;
 var $1128=(($1127+1)|0);
 $new_start_match=$1128;
 label=216;break;
 case 214: 
 $rc=0;
 label=239;break;
 case 215: 
 label=239;break;
 case 216: 
 $rc=0;
 var $1132=$firstline;
 var $1133=($1132|0)!=0;
 if($1133){label=217;break;}else{label=225;break;}
 case 217: 
 var $1135=$md;
 var $1136=(($1135+24)|0);
 var $1137=HEAP32[(($1136)>>2)];
 var $1138=($1137|0)!=0;
 if($1138){label=218;break;}else{label=220;break;}
 case 218: 
 var $1140=$start_match;
 var $1141=$md;
 var $1142=(($1141+120)|0);
 var $1143=HEAP32[(($1142)>>2)];
 var $1144=($1140>>>0)<($1143>>>0);
 if($1144){label=219;break;}else{label=225;break;}
 case 219: 
 var $1146=$start_match;
 var $1147=$md;
 var $1148=(($1147+24)|0);
 var $1149=HEAP32[(($1148)>>2)];
 var $1150=$md;
 var $1151=(($1150+120)|0);
 var $1152=HEAP32[(($1151)>>2)];
 var $1153=$md;
 var $1154=(($1153+28)|0);
 var $1155=$utf;
 var $1156=__pcre_is_newline($1146,$1149,$1152,$1154,$1155);
 var $1157=($1156|0)!=0;
 if($1157){label=224;break;}else{label=225;break;}
 case 220: 
 var $1159=$start_match;
 var $1160=$md;
 var $1161=(($1160+120)|0);
 var $1162=HEAP32[(($1161)>>2)];
 var $1163=$md;
 var $1164=(($1163+28)|0);
 var $1165=HEAP32[(($1164)>>2)];
 var $1166=(((-$1165))|0);
 var $1167=(($1162+$1166)|0);
 var $1168=($1159>>>0)<=($1167>>>0);
 if($1168){label=221;break;}else{label=225;break;}
 case 221: 
 var $1170=$start_match;
 var $1171=HEAP8[($1170)];
 var $1172=($1171&255);
 var $1173=$md;
 var $1174=(($1173+52)|0);
 var $1175=(($1174)|0);
 var $1176=HEAP8[($1175)];
 var $1177=($1176&255);
 var $1178=($1172|0)==($1177|0);
 if($1178){label=222;break;}else{label=225;break;}
 case 222: 
 var $1180=$md;
 var $1181=(($1180+28)|0);
 var $1182=HEAP32[(($1181)>>2)];
 var $1183=($1182|0)==1;
 if($1183){label=224;break;}else{label=223;break;}
 case 223: 
 var $1185=$start_match;
 var $1186=(($1185+1)|0);
 var $1187=HEAP8[($1186)];
 var $1188=($1187&255);
 var $1189=$md;
 var $1190=(($1189+52)|0);
 var $1191=(($1190+1)|0);
 var $1192=HEAP8[($1191)];
 var $1193=($1192&255);
 var $1194=($1188|0)==($1193|0);
 if($1194){label=224;break;}else{label=225;break;}
 case 224: 
 label=238;break;
 case 225: 
 var $1197=$new_start_match;
 $start_match=$1197;
 var $1198=$anchored;
 var $1199=($1198|0)!=0;
 if($1199){label=227;break;}else{label=226;break;}
 case 226: 
 var $1201=$start_match;
 var $1202=$end_subject;
 var $1203=($1201>>>0)>($1202>>>0);
 if($1203){label=227;break;}else{label=228;break;}
 case 227: 
 label=238;break;
 case 228: 
 var $1206=$start_match;
 var $1207=$4;
 var $1208=$6;
 var $1209=(($1207+$1208)|0);
 var $1210=($1206>>>0)>($1209>>>0);
 if($1210){label=229;break;}else{label=237;break;}
 case 229: 
 var $1212=$start_match;
 var $1213=((($1212)-(1))|0);
 var $1214=HEAP8[($1213)];
 var $1215=($1214&255);
 var $1216=($1215|0)==13;
 if($1216){label=230;break;}else{label=237;break;}
 case 230: 
 var $1218=$start_match;
 var $1219=$end_subject;
 var $1220=($1218>>>0)<($1219>>>0);
 if($1220){label=231;break;}else{label=237;break;}
 case 231: 
 var $1222=$start_match;
 var $1223=HEAP8[($1222)];
 var $1224=($1223&255);
 var $1225=($1224|0)==10;
 if($1225){label=232;break;}else{label=237;break;}
 case 232: 
 var $1227=$re;
 var $1228=(($1227+12)|0);
 var $1229=HEAP32[(($1228)>>2)];
 var $1230=$1229&2048;
 var $1231=($1230|0)==0;
 if($1231){label=233;break;}else{label=237;break;}
 case 233: 
 var $1233=$md;
 var $1234=(($1233+24)|0);
 var $1235=HEAP32[(($1234)>>2)];
 var $1236=($1235|0)==1;
 if($1236){label=236;break;}else{label=234;break;}
 case 234: 
 var $1238=$md;
 var $1239=(($1238+24)|0);
 var $1240=HEAP32[(($1239)>>2)];
 var $1241=($1240|0)==2;
 if($1241){label=236;break;}else{label=235;break;}
 case 235: 
 var $1243=$md;
 var $1244=(($1243+28)|0);
 var $1245=HEAP32[(($1244)>>2)];
 var $1246=($1245|0)==2;
 if($1246){label=236;break;}else{label=237;break;}
 case 236: 
 var $1248=$start_match;
 var $1249=(($1248+1)|0);
 $start_match=$1249;
 label=237;break;
 case 237: 
 var $1251=$md;
 var $1252=(($1251+172)|0);
 HEAP32[(($1252)>>2)]=0;
 label=108;break;
 case 238: 
 label=239;break;
 case 239: 
 var $1255=$rc;
 var $1256=($1255|0)==1;
 if($1256){label=241;break;}else{label=240;break;}
 case 240: 
 var $1258=$rc;
 var $1259=($1258|0)==-999;
 if($1259){label=241;break;}else{label=266;break;}
 case 241: 
 var $1261=$using_temporary_offsets;
 var $1262=($1261|0)!=0;
 if($1262){label=242;break;}else{label=247;break;}
 case 242: 
 var $1264=$arg_offset_max;
 var $1265=($1264|0)>=4;
 if($1265){label=243;break;}else{label=244;break;}
 case 243: 
 var $1267=$8;
 var $1268=(($1267+8)|0);
 var $1269=$1268;
 var $1270=$md;
 var $1271=(($1270+12)|0);
 var $1272=HEAP32[(($1271)>>2)];
 var $1273=(($1272+8)|0);
 var $1274=$1273;
 var $1275=$arg_offset_max;
 var $1276=((($1275)-(2))|0);
 var $1277=($1276<<2);
 assert($1277 % 1 === 0);(_memcpy($1269, $1274, $1277)|0);
 label=244;break;
 case 244: 
 var $1279=$md;
 var $1280=(($1279+140)|0);
 var $1281=HEAP32[(($1280)>>2)];
 var $1282=$arg_offset_max;
 var $1283=($1281|0)>($1282|0);
 if($1283){label=245;break;}else{label=246;break;}
 case 245: 
 var $1285=$md;
 var $1286=(($1285+144)|0);
 var $1287=HEAP32[(($1286)>>2)];
 var $1288=$1287|65536;
 HEAP32[(($1286)>>2)]=$1288;
 label=246;break;
 case 246: 
 var $1290=HEAP32[((512)>>2)];
 var $1291=$md;
 var $1292=(($1291+12)|0);
 var $1293=HEAP32[(($1292)>>2)];
 var $1294=$1293;
 FUNCTION_TABLE[$1290]($1294);
 label=247;break;
 case 247: 
 var $1296=$md;
 var $1297=(($1296+144)|0);
 var $1298=HEAP32[(($1297)>>2)];
 var $1299=$1298&65536;
 var $1300=($1299|0)!=0;
 if($1300){label=248;break;}else{label=250;break;}
 case 248: 
 var $1302=$md;
 var $1303=(($1302+140)|0);
 var $1304=HEAP32[(($1303)>>2)];
 var $1305=$arg_offset_max;
 var $1306=($1304|0)>=($1305|0);
 if($1306){label=249;break;}else{label=250;break;}
 case 249: 
 var $1314=0;label=251;break;
 case 250: 
 var $1309=$md;
 var $1310=(($1309+140)|0);
 var $1311=HEAP32[(($1310)>>2)];
 var $1312=(((($1311|0))/(2))&-1);
 var $1314=$1312;label=251;break;
 case 251: 
 var $1314;
 $rc=$1314;
 var $1315=$md;
 var $1316=(($1315+140)|0);
 var $1317=HEAP32[(($1316)>>2)];
 var $1318=(((($1317|0))/(2))&-1);
 var $1319=$re;
 var $1320=(($1319+30)|0);
 var $1321=HEAP16[(($1320)>>1)];
 var $1322=($1321&65535);
 var $1323=($1318|0)<=($1322|0);
 if($1323){label=252;break;}else{label=259;break;}
 case 252: 
 var $1325=$8;
 var $1326=($1325|0)!=0;
 if($1326){label=253;break;}else{label=259;break;}
 case 253: 
 var $1328=$re;
 var $1329=(($1328+30)|0);
 var $1330=HEAP16[(($1329)>>1)];
 var $1331=($1330&65535);
 var $1332=($1331<<1);
 var $1333=((($1332)+(2))|0);
 $resetcount=$1333;
 var $1334=$resetcount;
 var $1335=$9;
 var $1336=($1334|0)>($1335|0);
 if($1336){label=254;break;}else{label=255;break;}
 case 254: 
 var $1338=$9;
 $resetcount=$1338;
 label=255;break;
 case 255: 
 var $1340=$8;
 var $1341=$md;
 var $1342=(($1341+140)|0);
 var $1343=HEAP32[(($1342)>>2)];
 var $1344=(($1340+($1343<<2))|0);
 $iptr1=$1344;
 var $1345=$8;
 var $1346=$resetcount;
 var $1347=(($1345+($1346<<2))|0);
 $iend2=$1347;
 label=256;break;
 case 256: 
 var $1349=$iptr1;
 var $1350=$iend2;
 var $1351=($1349>>>0)<($1350>>>0);
 if($1351){label=257;break;}else{label=258;break;}
 case 257: 
 var $1353=$iptr1;
 var $1354=(($1353+4)|0);
 $iptr1=$1354;
 HEAP32[(($1353)>>2)]=-1;
 label=256;break;
 case 258: 
 label=259;break;
 case 259: 
 var $1357=$9;
 var $1358=($1357|0)<2;
 if($1358){label=260;break;}else{label=261;break;}
 case 260: 
 $rc=0;
 label=262;break;
 case 261: 
 var $1361=$md;
 var $1362=(($1361+124)|0);
 var $1363=HEAP32[(($1362)>>2)];
 var $1364=$md;
 var $1365=(($1364+116)|0);
 var $1366=HEAP32[(($1365)>>2)];
 var $1367=$1363;
 var $1368=$1366;
 var $1369=((($1367)-($1368))|0);
 var $1370=$8;
 var $1371=(($1370)|0);
 HEAP32[(($1371)>>2)]=$1369;
 var $1372=$md;
 var $1373=(($1372+128)|0);
 var $1374=HEAP32[(($1373)>>2)];
 var $1375=$md;
 var $1376=(($1375+116)|0);
 var $1377=HEAP32[(($1376)>>2)];
 var $1378=$1374;
 var $1379=$1377;
 var $1380=((($1378)-($1379))|0);
 var $1381=$8;
 var $1382=(($1381+4)|0);
 HEAP32[(($1382)>>2)]=$1380;
 label=262;break;
 case 262: 
 var $1384=$3;
 var $1385=($1384|0)!=0;
 if($1385){label=263;break;}else{label=265;break;}
 case 263: 
 var $1387=$3;
 var $1388=(($1387)|0);
 var $1389=HEAP32[(($1388)>>2)];
 var $1390=$1389&32;
 var $1391=($1390|0)!=0;
 if($1391){label=264;break;}else{label=265;break;}
 case 264: 
 var $1393=$md;
 var $1394=(($1393+172)|0);
 var $1395=HEAP32[(($1394)>>2)];
 var $1396=$3;
 var $1397=(($1396+24)|0);
 var $1398=HEAP32[(($1397)>>2)];
 HEAP32[(($1398)>>2)]=$1395;
 label=265;break;
 case 265: 
 var $1400=$rc;
 $1=$1400;
 label=282;break;
 case 266: 
 var $1402=$using_temporary_offsets;
 var $1403=($1402|0)!=0;
 if($1403){label=267;break;}else{label=268;break;}
 case 267: 
 var $1405=HEAP32[((512)>>2)];
 var $1406=$md;
 var $1407=(($1406+12)|0);
 var $1408=HEAP32[(($1407)>>2)];
 var $1409=$1408;
 FUNCTION_TABLE[$1405]($1409);
 label=268;break;
 case 268: 
 var $1411=$rc;
 var $1412=($1411|0)!=0;
 if($1412){label=269;break;}else{label=271;break;}
 case 269: 
 var $1414=$rc;
 var $1415=($1414|0)!=-12;
 if($1415){label=270;break;}else{label=271;break;}
 case 270: 
 var $1417=$rc;
 $1=$1417;
 label=282;break;
 case 271: 
 var $1419=$match_partial;
 var $1420=($1419|0)!=0;
 if($1420){label=272;break;}else{label=277;break;}
 case 272: 
 var $1422=$md;
 var $1423=(($1422+172)|0);
 HEAP32[(($1423)>>2)]=0;
 var $1424=$9;
 var $1425=($1424|0)>1;
 if($1425){label=273;break;}else{label=276;break;}
 case 273: 
 var $1427=$start_partial;
 var $1428=$4;
 var $1429=$1427;
 var $1430=$1428;
 var $1431=((($1429)-($1430))|0);
 var $1432=$8;
 var $1433=(($1432)|0);
 HEAP32[(($1433)>>2)]=$1431;
 var $1434=$end_subject;
 var $1435=$4;
 var $1436=$1434;
 var $1437=$1435;
 var $1438=((($1436)-($1437))|0);
 var $1439=$8;
 var $1440=(($1439+4)|0);
 HEAP32[(($1440)>>2)]=$1438;
 var $1441=$9;
 var $1442=($1441|0)>2;
 if($1442){label=274;break;}else{label=275;break;}
 case 274: 
 var $1444=$match_partial;
 var $1445=$4;
 var $1446=$1444;
 var $1447=$1445;
 var $1448=((($1446)-($1447))|0);
 var $1449=$8;
 var $1450=(($1449+8)|0);
 HEAP32[(($1450)>>2)]=$1448;
 label=275;break;
 case 275: 
 label=276;break;
 case 276: 
 $rc=-12;
 label=278;break;
 case 277: 
 $rc=-1;
 label=278;break;
 case 278: 
 var $1455=$3;
 var $1456=($1455|0)!=0;
 if($1456){label=279;break;}else{label=281;break;}
 case 279: 
 var $1458=$3;
 var $1459=(($1458)|0);
 var $1460=HEAP32[(($1459)>>2)];
 var $1461=$1460&32;
 var $1462=($1461|0)!=0;
 if($1462){label=280;break;}else{label=281;break;}
 case 280: 
 var $1464=$md;
 var $1465=(($1464+176)|0);
 var $1466=HEAP32[(($1465)>>2)];
 var $1467=$3;
 var $1468=(($1467+24)|0);
 var $1469=HEAP32[(($1468)>>2)];
 HEAP32[(($1469)>>2)]=$1466;
 label=281;break;
 case 281: 
 var $1471=$rc;
 $1=$1471;
 label=282;break;
 case 282: 
 var $1473=$1;
 STACKTOP=sp;return $1473;
  default: assert(0, "bad label: " + label);
 }
}
function _match($eptr,$ecode,$mstart,$offset_top,$md,$eptrb,$rdepth){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $7;
 var $8=sp;
 var $rrc;
 var $i;
 var $c;
 var $utf;
 var $minimize;
 var $possessive;
 var $caseless;
 var $condcode;
 var $callpat;
 var $data;
 var $next;
 var $pp;
 var $prev;
 var $saved_eptr;
 var $new_recursive=(sp)+(8);
 var $cur_is_word;
 var $condition;
 var $prev_is_word;
 var $codelink;
 var $ctype;
 var $length;
 var $max;
 var $min;
 var $number;
 var $offset;
 var $op;
 var $save_capture_last;
 var $save_offset1;
 var $save_offset2;
 var $save_offset3;
 var $stacksave=(sp)+(32);
 var $newptrb=(sp)+(152);
 var $len;
 var $scode;
 var $cb=(sp)+(160);
 var $recno;
 var $count;
 var $slot;
 var $recno1;
 var $count2;
 var $slot3;
 var $cb4=(sp)+(216);
 var $ri;
 var $recno5;
 var $iptr;
 var $iend;
 var $count6;
 var $slot7;
 var $slength;
 var $slength8;
 var $slength9;
 var $cc;
 var $cc10;
 var $cc11;
 var $ch;
 $2=$eptr;
 $3=$ecode;
 $4=$mstart;
 $5=$offset_top;
 $6=$md;
 $7=$eptrb;
 HEAP32[(($8)>>2)]=$rdepth;
 var $9=$3;
 var $10=($9|0)==0;
 if($10){label=2;break;}else{label=8;break;}
 case 2: 
 var $12=HEAP32[(($8)>>2)];
 var $13=($12|0)==0;
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=$8;
 var $16=_match($15,0,0,0,0,0,1);
 $1=$16;
 label=1658;break;
 case 4: 
 var $18=$8;
 var $19=$2;
 var $20=$18;
 var $21=$19;
 var $22=((($20)-($21))|0);
 $len=$22;
 var $23=$len;
 var $24=($23|0)>0;
 if($24){label=5;break;}else{label=6;break;}
 case 5: 
 var $26=$len;
 var $27=(((-$26))|0);
 var $31=$27;label=7;break;
 case 6: 
 var $29=$len;
 var $31=$29;label=7;break;
 case 7: 
 var $31;
 $1=$31;
 label=1658;break;
 case 8: 
 label=9;break;
 case 9: 
 $utf=0;
 var $34=$6;
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=((($36)+(1))|0);
 HEAP32[(($35)>>2)]=$37;
 var $38=$6;
 var $39=(($38+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($36>>>0)>=($40>>>0);
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-8;
 label=1658;break;
 case 11: 
 var $44=HEAP32[(($8)>>2)];
 var $45=$6;
 var $46=(($45+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($44>>>0)>=($47>>>0);
 if($48){label=12;break;}else{label=13;break;}
 case 12: 
 $1=-21;
 label=1658;break;
 case 13: 
 var $51=$6;
 var $52=(($51+152)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==2;
 if($54){label=14;break;}else{label=15;break;}
 case 14: 
 var $56=$2;
 var $57=(($newptrb+4)|0);
 HEAP32[(($57)>>2)]=$56;
 var $58=$7;
 var $59=(($newptrb)|0);
 HEAP32[(($59)>>2)]=$58;
 $7=$newptrb;
 var $60=$6;
 var $61=(($60+152)|0);
 HEAP32[(($61)>>2)]=0;
 label=15;break;
 case 15: 
 label=16;break;
 case 16: 
 $possessive=0;
 $minimize=0;
 var $64=$3;
 var $65=HEAP8[($64)];
 var $66=($65&255);
 $op=$66;
 var $67=$op;
 switch(($67|0)){case 67:case 80:{ label=1004;break;}case 65:case 78:case 66:case 79:{ label=1005;break;}case 68:case 81:{ label=1008;break;}case 69:case 82:{ label=1009;break;}case 70:case 83:{ label=1010;break;}case 71:case 84:{ label=1011;break;}case 59:case 72:case 60:case 73:case 61:case 74:case 62:case 75:case 63:case 76:case 64:case 77:{ label=1012;break;}case 129:case 131:case 136:{ label=106;break;}case 93:{ label=1125;break;}case 91:case 92:{ label=1126;break;}case 94:{ label=1127;break;}case 95:{ label=1128;break;}case 96:{ label=1129;break;}case 97:{ label=1130;break;}case 85:case 86:case 87:case 88:case 89:case 90:{ label=1131;break;}case 134:case 139:{ label=135;break;}case 132:case 137:{ label=160;break;}case 149:{ label=17;break;}case 135:case 140:{ label=181;break;}case 160:{ label=239;break;}case 0:case 158:case 159:{ label=245;break;}case 125:case 127:{ label=253;break;}case 157:{ label=26;break;}case 156:{ label=27;break;}case 126:case 128:{ label=278;break;}case 150:{ label=30;break;}case 124:{ label=301;break;}case 118:{ label=306;break;}case 117:{ label=315;break;}case 151:{ label=33;break;}case 119:{ label=351;break;}case 146:{ label=355;break;}case 147:{ label=361;break;}case 161:{ label=367;break;}case 148:{ label=371;break;}case 120:case 122:case 121:case 123:{ label=375;break;}case 152:{ label=40;break;}case 153:{ label=43;break;}case 27:{ label=430;break;}case 1:{ label=434;break;}case 28:{ label=437;break;}case 2:{ label=451;break;}case 3:{ label=454;break;}case 26:{ label=455;break;}case 154:{ label=48;break;}case 25:{ label=482;break;}case 24:{ label=487;break;}case 23:{ label=495;break;}case 155:{ label=51;break;}case 4:case 5:{ label=520;break;}case 12:{ label=538;break;}case 13:{ label=555;break;}case 14:{ label=563;break;}case 6:{ label=571;break;}case 130:{ label=58;break;}case 7:{ label=581;break;}case 8:{ label=591;break;}case 9:{ label=601;break;}case 10:{ label=611;break;}case 11:{ label=621;break;}case 17:{ label=631;break;}case 18:{ label=656;break;}case 19:{ label=667;break;}case 20:{ label=678;break;}case 21:{ label=689;break;}case 115:case 116:{ label=700;break;}case 113:case 114:{ label=707;break;}case 111:case 110:{ label=787;break;}case 29:{ label=851;break;}case 30:{ label=861;break;}case 133:case 138:{ label=87;break;}case 41:case 54:{ label=871;break;}case 45:case 58:{ label=872;break;}case 39:case 52:case 40:case 53:{ label=873;break;}case 42:case 55:{ label=876;break;}case 43:case 56:{ label=877;break;}case 44:case 57:{ label=878;break;}case 33:case 46:case 34:case 47:case 35:case 48:case 36:case 49:case 37:case 50:case 38:case 51:{ label=879;break;}case 31:case 32:{ label=992;break;}default:{label=1656;break;}}break;
 case 17: 
 var $69=$3;
 var $70=(($69+2)|0);
 var $71=$6;
 var $72=(($71+176)|0);
 HEAP32[(($72)>>2)]=$70;
 var $73=$6;
 var $74=(($73+172)|0);
 HEAP32[(($74)>>2)]=0;
 var $75=$2;
 var $76=$3;
 var $77=$3;
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=((6760+$79)|0);
 var $81=HEAP8[($80)];
 var $82=($81&255);
 var $83=(($76+$82)|0);
 var $84=$3;
 var $85=(($84+1)|0);
 var $86=HEAP8[($85)];
 var $87=($86&255);
 var $88=(($83+$87)|0);
 var $89=$4;
 var $90=$5;
 var $91=$6;
 var $92=$7;
 var $93=HEAP32[(($8)>>2)];
 var $94=((($93)+(1))|0);
 var $95=_match($75,$88,$89,$90,$91,$92,$94);
 $rrc=$95;
 var $96=$rrc;
 var $97=($96|0)==1;
 if($97){label=19;break;}else{label=18;break;}
 case 18: 
 var $99=$rrc;
 var $100=($99|0)==-999;
 if($100){label=19;break;}else{label=21;break;}
 case 19: 
 var $102=$6;
 var $103=(($102+172)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=($104|0)==0;
 if($105){label=20;break;}else{label=21;break;}
 case 20: 
 var $107=$3;
 var $108=(($107+2)|0);
 var $109=$6;
 var $110=(($109+172)|0);
 HEAP32[(($110)>>2)]=$108;
 label=25;break;
 case 21: 
 var $112=$rrc;
 var $113=($112|0)==-993;
 if($113){label=22;break;}else{label=24;break;}
 case 22: 
 var $115=$3;
 var $116=(($115+2)|0);
 var $117=$6;
 var $118=(($117+124)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=_strcmp($116,$119);
 var $121=($120|0)==0;
 if($121){label=23;break;}else{label=24;break;}
 case 23: 
 var $123=$2;
 var $124=$6;
 var $125=(($124+124)|0);
 HEAP32[(($125)>>2)]=$123;
 $1=-994;
 label=1658;break;
 case 24: 
 label=25;break;
 case 25: 
 var $128=$rrc;
 $1=$128;
 label=1658;break;
 case 26: 
 $1=0;
 label=1658;break;
 case 27: 
 var $131=$2;
 var $132=$3;
 var $133=$3;
 var $134=HEAP8[($133)];
 var $135=($134&255);
 var $136=((6760+$135)|0);
 var $137=HEAP8[($136)];
 var $138=($137&255);
 var $139=(($132+$138)|0);
 var $140=$4;
 var $141=$5;
 var $142=$6;
 var $143=$7;
 var $144=HEAP32[(($8)>>2)];
 var $145=((($144)+(1))|0);
 var $146=_match($131,$139,$140,$141,$142,$143,$145);
 $rrc=$146;
 var $147=$rrc;
 var $148=($147|0)!=0;
 if($148){label=28;break;}else{label=29;break;}
 case 28: 
 var $150=$rrc;
 $1=$150;
 label=1658;break;
 case 29: 
 $1=-996;
 label=1658;break;
 case 30: 
 var $153=$2;
 var $154=$3;
 var $155=$3;
 var $156=HEAP8[($155)];
 var $157=($156&255);
 var $158=((6760+$157)|0);
 var $159=HEAP8[($158)];
 var $160=($159&255);
 var $161=(($154+$160)|0);
 var $162=$4;
 var $163=$5;
 var $164=$6;
 var $165=$7;
 var $166=HEAP32[(($8)>>2)];
 var $167=((($166)+(1))|0);
 var $168=_match($153,$161,$162,$163,$164,$165,$167);
 $rrc=$168;
 var $169=$rrc;
 var $170=($169|0)!=0;
 if($170){label=31;break;}else{label=32;break;}
 case 31: 
 var $172=$rrc;
 $1=$172;
 label=1658;break;
 case 32: 
 $1=-995;
 label=1658;break;
 case 33: 
 var $175=$3;
 var $176=(($175+2)|0);
 var $177=$6;
 var $178=(($177+176)|0);
 HEAP32[(($178)>>2)]=$176;
 var $179=$6;
 var $180=(($179+172)|0);
 HEAP32[(($180)>>2)]=0;
 var $181=$2;
 var $182=$3;
 var $183=$3;
 var $184=HEAP8[($183)];
 var $185=($184&255);
 var $186=((6760+$185)|0);
 var $187=HEAP8[($186)];
 var $188=($187&255);
 var $189=(($182+$188)|0);
 var $190=$3;
 var $191=(($190+1)|0);
 var $192=HEAP8[($191)];
 var $193=($192&255);
 var $194=(($189+$193)|0);
 var $195=$4;
 var $196=$5;
 var $197=$6;
 var $198=$7;
 var $199=HEAP32[(($8)>>2)];
 var $200=((($199)+(1))|0);
 var $201=_match($181,$194,$195,$196,$197,$198,$200);
 $rrc=$201;
 var $202=$rrc;
 var $203=($202|0)==1;
 if($203){label=35;break;}else{label=34;break;}
 case 34: 
 var $205=$rrc;
 var $206=($205|0)==-999;
 if($206){label=35;break;}else{label=37;break;}
 case 35: 
 var $208=$6;
 var $209=(($208+172)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=($210|0)==0;
 if($211){label=36;break;}else{label=37;break;}
 case 36: 
 var $213=$3;
 var $214=(($213+2)|0);
 var $215=$6;
 var $216=(($215+172)|0);
 HEAP32[(($216)>>2)]=$214;
 label=37;break;
 case 37: 
 var $218=$rrc;
 var $219=($218|0)!=0;
 if($219){label=38;break;}else{label=39;break;}
 case 38: 
 var $221=$rrc;
 $1=$221;
 label=1658;break;
 case 39: 
 $1=-995;
 label=1658;break;
 case 40: 
 var $224=$2;
 var $225=$3;
 var $226=$3;
 var $227=HEAP8[($226)];
 var $228=($227&255);
 var $229=((6760+$228)|0);
 var $230=HEAP8[($229)];
 var $231=($230&255);
 var $232=(($225+$231)|0);
 var $233=$4;
 var $234=$5;
 var $235=$6;
 var $236=$7;
 var $237=HEAP32[(($8)>>2)];
 var $238=((($237)+(1))|0);
 var $239=_match($224,$232,$233,$234,$235,$236,$238);
 $rrc=$239;
 var $240=$rrc;
 var $241=($240|0)!=0;
 if($241){label=41;break;}else{label=42;break;}
 case 41: 
 var $243=$rrc;
 $1=$243;
 label=1658;break;
 case 42: 
 var $245=$2;
 var $246=$6;
 var $247=(($246+124)|0);
 HEAP32[(($247)>>2)]=$245;
 $1=-994;
 label=1658;break;
 case 43: 
 var $249=$6;
 var $250=(($249+40)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=((($251)+(1))|0);
 HEAP32[(($250)>>2)]=$252;
 var $253=$6;
 var $254=(($253+40)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=$6;
 var $257=(($256+44)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($255>>>0)<=($258>>>0);
 if($259){label=44;break;}else{label=45;break;}
 case 44: 
 var $261=$3;
 var $262=HEAP8[($261)];
 var $263=($262&255);
 var $264=((6760+$263)|0);
 var $265=HEAP8[($264)];
 var $266=($265&255);
 var $267=$3;
 var $268=(($267+1)|0);
 var $269=HEAP8[($268)];
 var $270=($269&255);
 var $271=((($266)+($270))|0);
 var $272=$3;
 var $273=(($272+$271)|0);
 $3=$273;
 label=1657;break;
 case 45: 
 var $275=$2;
 var $276=$3;
 var $277=$3;
 var $278=HEAP8[($277)];
 var $279=($278&255);
 var $280=((6760+$279)|0);
 var $281=HEAP8[($280)];
 var $282=($281&255);
 var $283=(($276+$282)|0);
 var $284=$3;
 var $285=(($284+1)|0);
 var $286=HEAP8[($285)];
 var $287=($286&255);
 var $288=(($283+$287)|0);
 var $289=$4;
 var $290=$5;
 var $291=$6;
 var $292=$7;
 var $293=HEAP32[(($8)>>2)];
 var $294=((($293)+(1))|0);
 var $295=_match($275,$288,$289,$290,$291,$292,$294);
 $rrc=$295;
 var $296=$rrc;
 var $297=($296|0)!=0;
 if($297){label=46;break;}else{label=47;break;}
 case 46: 
 var $299=$rrc;
 $1=$299;
 label=1658;break;
 case 47: 
 var $301=$3;
 var $302=(($301+2)|0);
 var $303=$6;
 var $304=(($303+124)|0);
 HEAP32[(($304)>>2)]=$302;
 $1=-993;
 label=1658;break;
 case 48: 
 var $306=$2;
 var $307=$3;
 var $308=$3;
 var $309=HEAP8[($308)];
 var $310=($309&255);
 var $311=((6760+$310)|0);
 var $312=HEAP8[($311)];
 var $313=($312&255);
 var $314=(($307+$313)|0);
 var $315=$4;
 var $316=$5;
 var $317=$6;
 var $318=$7;
 var $319=HEAP32[(($8)>>2)];
 var $320=((($319)+(1))|0);
 var $321=_match($306,$314,$315,$316,$317,$318,$320);
 $rrc=$321;
 var $322=$rrc;
 var $323=($322|0)!=0;
 if($323){label=49;break;}else{label=50;break;}
 case 49: 
 var $325=$rrc;
 $1=$325;
 label=1658;break;
 case 50: 
 var $327=$3;
 var $328=$6;
 var $329=(($328+124)|0);
 HEAP32[(($329)>>2)]=$327;
 $1=-992;
 label=1658;break;
 case 51: 
 var $331=$3;
 var $332=(($331+2)|0);
 var $333=$6;
 var $334=(($333+176)|0);
 HEAP32[(($334)>>2)]=$332;
 var $335=$6;
 var $336=(($335+172)|0);
 HEAP32[(($336)>>2)]=0;
 var $337=$2;
 var $338=$3;
 var $339=$3;
 var $340=HEAP8[($339)];
 var $341=($340&255);
 var $342=((6760+$341)|0);
 var $343=HEAP8[($342)];
 var $344=($343&255);
 var $345=(($338+$344)|0);
 var $346=$3;
 var $347=(($346+1)|0);
 var $348=HEAP8[($347)];
 var $349=($348&255);
 var $350=(($345+$349)|0);
 var $351=$4;
 var $352=$5;
 var $353=$6;
 var $354=$7;
 var $355=HEAP32[(($8)>>2)];
 var $356=((($355)+(1))|0);
 var $357=_match($337,$350,$351,$352,$353,$354,$356);
 $rrc=$357;
 var $358=$rrc;
 var $359=($358|0)==1;
 if($359){label=53;break;}else{label=52;break;}
 case 52: 
 var $361=$rrc;
 var $362=($361|0)==-999;
 if($362){label=53;break;}else{label=55;break;}
 case 53: 
 var $364=$6;
 var $365=(($364+172)|0);
 var $366=HEAP32[(($365)>>2)];
 var $367=($366|0)==0;
 if($367){label=54;break;}else{label=55;break;}
 case 54: 
 var $369=$3;
 var $370=(($369+2)|0);
 var $371=$6;
 var $372=(($371+172)|0);
 HEAP32[(($372)>>2)]=$370;
 label=55;break;
 case 55: 
 var $374=$rrc;
 var $375=($374|0)!=0;
 if($375){label=56;break;}else{label=57;break;}
 case 56: 
 var $377=$rrc;
 $1=$377;
 label=1658;break;
 case 57: 
 var $379=$3;
 var $380=$6;
 var $381=(($380+124)|0);
 HEAP32[(($381)>>2)]=$379;
 $1=-992;
 label=1658;break;
 case 58: 
 var $383=$3;
 $prev=$383;
 var $384=$2;
 $saved_eptr=$384;
 var $385=$6;
 var $386=(($385+172)|0);
 var $387=HEAP32[(($386)>>2)];
 $data=$387;
 label=59;break;
 case 59: 
 var $389=$2;
 var $390=$3;
 var $391=(($390+1)|0);
 var $392=(($391+2)|0);
 var $393=$4;
 var $394=$5;
 var $395=$6;
 var $396=$7;
 var $397=HEAP32[(($8)>>2)];
 var $398=((($397)+(1))|0);
 var $399=_match($389,$392,$393,$394,$395,$396,$398);
 $rrc=$399;
 var $400=$rrc;
 var $401=($400|0)==1;
 if($401){label=60;break;}else{label=61;break;}
 case 60: 
 var $403=$6;
 var $404=(($403+124)|0);
 var $405=HEAP32[(($404)>>2)];
 $4=$405;
 label=71;break;
 case 61: 
 var $407=$rrc;
 var $408=($407|0)==-992;
 if($408){label=62;break;}else{label=67;break;}
 case 62: 
 var $410=$3;
 var $411=$3;
 var $412=(($411+1)|0);
 var $413=HEAP8[($412)];
 var $414=($413&255);
 var $415=$414<<8;
 var $416=$3;
 var $417=(($416+2)|0);
 var $418=HEAP8[($417)];
 var $419=($418&255);
 var $420=$415|$419;
 var $421=(($410+$420)|0);
 $next=$421;
 var $422=$6;
 var $423=(($422+124)|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=$next;
 var $426=($424>>>0)<($425>>>0);
 if($426){label=63;break;}else{label=66;break;}
 case 63: 
 var $428=$3;
 var $429=HEAP8[($428)];
 var $430=($429&255);
 var $431=($430|0)==119;
 if($431){label=65;break;}else{label=64;break;}
 case 64: 
 var $433=$next;
 var $434=HEAP8[($433)];
 var $435=($434&255);
 var $436=($435|0)==119;
 if($436){label=65;break;}else{label=66;break;}
 case 65: 
 $rrc=0;
 label=66;break;
 case 66: 
 label=67;break;
 case 67: 
 var $440=$rrc;
 var $441=($440|0)!=0;
 if($441){label=68;break;}else{label=69;break;}
 case 68: 
 var $443=$rrc;
 $1=$443;
 label=1658;break;
 case 69: 
 var $445=$3;
 var $446=(($445+1)|0);
 var $447=HEAP8[($446)];
 var $448=($447&255);
 var $449=$448<<8;
 var $450=$3;
 var $451=(($450+2)|0);
 var $452=HEAP8[($451)];
 var $453=($452&255);
 var $454=$449|$453;
 var $455=$3;
 var $456=(($455+$454)|0);
 $3=$456;
 var $457=$data;
 var $458=$6;
 var $459=(($458+172)|0);
 HEAP32[(($459)>>2)]=$457;
 label=70;break;
 case 70: 
 var $461=$3;
 var $462=HEAP8[($461)];
 var $463=($462&255);
 var $464=($463|0)==119;
 if($464){label=59;break;}else{label=71;break;}
 case 71: 
 var $466=$3;
 var $467=HEAP8[($466)];
 var $468=($467&255);
 var $469=($468|0)!=130;
 if($469){label=72;break;}else{label=74;break;}
 case 72: 
 var $471=$3;
 var $472=HEAP8[($471)];
 var $473=($472&255);
 var $474=($473|0)!=119;
 if($474){label=73;break;}else{label=74;break;}
 case 73: 
 $1=0;
 label=1658;break;
 case 74: 
 label=75;break;
 case 75: 
 var $478=$3;
 var $479=(($478+1)|0);
 var $480=HEAP8[($479)];
 var $481=($480&255);
 var $482=$481<<8;
 var $483=$3;
 var $484=(($483+2)|0);
 var $485=HEAP8[($484)];
 var $486=($485&255);
 var $487=$482|$486;
 var $488=$3;
 var $489=(($488+$487)|0);
 $3=$489;
 label=76;break;
 case 76: 
 var $491=$3;
 var $492=HEAP8[($491)];
 var $493=($492&255);
 var $494=($493|0)==119;
 if($494){label=75;break;}else{label=77;break;}
 case 77: 
 var $496=$6;
 var $497=(($496+140)|0);
 var $498=HEAP32[(($497)>>2)];
 $5=$498;
 var $499=$6;
 var $500=(($499+128)|0);
 var $501=HEAP32[(($500)>>2)];
 $2=$501;
 var $502=$3;
 var $503=HEAP8[($502)];
 var $504=($503&255);
 var $505=($504|0)==120;
 if($505){label=79;break;}else{label=78;break;}
 case 78: 
 var $507=$2;
 var $508=$saved_eptr;
 var $509=($507|0)==($508|0);
 if($509){label=79;break;}else{label=80;break;}
 case 79: 
 var $511=$3;
 var $512=(($511+3)|0);
 $3=$512;
 label=1657;break;
 case 80: 
 var $514=$3;
 var $515=HEAP8[($514)];
 var $516=($515&255);
 var $517=($516|0)==122;
 if($517){label=81;break;}else{label=84;break;}
 case 81: 
 var $519=$2;
 var $520=$3;
 var $521=(($520+1)|0);
 var $522=(($521+2)|0);
 var $523=$4;
 var $524=$5;
 var $525=$6;
 var $526=$7;
 var $527=HEAP32[(($8)>>2)];
 var $528=((($527)+(1))|0);
 var $529=_match($519,$522,$523,$524,$525,$526,$528);
 $rrc=$529;
 var $530=$rrc;
 var $531=($530|0)!=0;
 if($531){label=82;break;}else{label=83;break;}
 case 82: 
 var $533=$rrc;
 $1=$533;
 label=1658;break;
 case 83: 
 var $535=$prev;
 $3=$535;
 label=9;break;
 case 84: 
 var $537=$2;
 var $538=$prev;
 var $539=$4;
 var $540=$5;
 var $541=$6;
 var $542=$7;
 var $543=HEAP32[(($8)>>2)];
 var $544=((($543)+(1))|0);
 var $545=_match($537,$538,$539,$540,$541,$542,$544);
 $rrc=$545;
 var $546=$rrc;
 var $547=($546|0)!=0;
 if($547){label=85;break;}else{label=86;break;}
 case 85: 
 var $549=$rrc;
 $1=$549;
 label=1658;break;
 case 86: 
 var $551=$3;
 var $552=(($551+3)|0);
 $3=$552;
 label=9;break;
 case 87: 
 var $554=$3;
 var $555=(($554+3)|0);
 var $556=HEAP8[($555)];
 var $557=($556&255);
 var $558=$557<<8;
 var $559=$3;
 var $560=(($559+4)|0);
 var $561=HEAP8[($560)];
 var $562=($561&255);
 var $563=$558|$562;
 $number=$563;
 var $564=$number;
 var $565=$564<<1;
 $offset=$565;
 var $566=$offset;
 var $567=$6;
 var $568=(($567+20)|0);
 var $569=HEAP32[(($568)>>2)];
 var $570=($566|0)<($569|0);
 if($570){label=88;break;}else{label=105;break;}
 case 88: 
 var $572=$offset;
 var $573=$6;
 var $574=(($573+12)|0);
 var $575=HEAP32[(($574)>>2)];
 var $576=(($575+($572<<2))|0);
 var $577=HEAP32[(($576)>>2)];
 $save_offset1=$577;
 var $578=$offset;
 var $579=((($578)+(1))|0);
 var $580=$6;
 var $581=(($580+12)|0);
 var $582=HEAP32[(($581)>>2)];
 var $583=(($582+($579<<2))|0);
 var $584=HEAP32[(($583)>>2)];
 $save_offset2=$584;
 var $585=$6;
 var $586=(($585+16)|0);
 var $587=HEAP32[(($586)>>2)];
 var $588=$number;
 var $589=((($587)-($588))|0);
 var $590=$6;
 var $591=(($590+12)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=(($592+($589<<2))|0);
 var $594=HEAP32[(($593)>>2)];
 $save_offset3=$594;
 var $595=$6;
 var $596=(($595+144)|0);
 var $597=HEAP32[(($596)>>2)];
 $save_capture_last=$597;
 var $598=$6;
 var $599=(($598+172)|0);
 var $600=HEAP32[(($599)>>2)];
 $data=$600;
 var $601=$2;
 var $602=$6;
 var $603=(($602+116)|0);
 var $604=HEAP32[(($603)>>2)];
 var $605=$601;
 var $606=$604;
 var $607=((($605)-($606))|0);
 var $608=$6;
 var $609=(($608+16)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=$number;
 var $612=((($610)-($611))|0);
 var $613=$6;
 var $614=(($613+12)|0);
 var $615=HEAP32[(($614)>>2)];
 var $616=(($615+($612<<2))|0);
 HEAP32[(($616)>>2)]=$607;
 label=89;break;
 case 89: 
 var $618=$op;
 var $619=($618>>>0)>=136;
 if($619){label=90;break;}else{label=91;break;}
 case 90: 
 var $621=$6;
 var $622=(($621+152)|0);
 HEAP32[(($622)>>2)]=2;
 label=91;break;
 case 91: 
 var $624=$2;
 var $625=$3;
 var $626=$3;
 var $627=HEAP8[($626)];
 var $628=($627&255);
 var $629=((6760+$628)|0);
 var $630=HEAP8[($629)];
 var $631=($630&255);
 var $632=(($625+$631)|0);
 var $633=$4;
 var $634=$5;
 var $635=$6;
 var $636=$7;
 var $637=HEAP32[(($8)>>2)];
 var $638=((($637)+(1))|0);
 var $639=_match($624,$632,$633,$634,$635,$636,$638);
 $rrc=$639;
 var $640=$rrc;
 var $641=($640|0)==-997;
 if($641){label=92;break;}else{label=93;break;}
 case 92: 
 label=104;break;
 case 93: 
 var $644=$rrc;
 var $645=($644|0)==-992;
 if($645){label=94;break;}else{label=99;break;}
 case 94: 
 var $647=$3;
 var $648=$3;
 var $649=(($648+1)|0);
 var $650=HEAP8[($649)];
 var $651=($650&255);
 var $652=$651<<8;
 var $653=$3;
 var $654=(($653+2)|0);
 var $655=HEAP8[($654)];
 var $656=($655&255);
 var $657=$652|$656;
 var $658=(($647+$657)|0);
 $next=$658;
 var $659=$6;
 var $660=(($659+124)|0);
 var $661=HEAP32[(($660)>>2)];
 var $662=$next;
 var $663=($661>>>0)<($662>>>0);
 if($663){label=95;break;}else{label=98;break;}
 case 95: 
 var $665=$3;
 var $666=HEAP8[($665)];
 var $667=($666&255);
 var $668=($667|0)==119;
 if($668){label=97;break;}else{label=96;break;}
 case 96: 
 var $670=$next;
 var $671=HEAP8[($670)];
 var $672=($671&255);
 var $673=($672|0)==119;
 if($673){label=97;break;}else{label=98;break;}
 case 97: 
 $rrc=0;
 label=98;break;
 case 98: 
 label=99;break;
 case 99: 
 var $677=$rrc;
 var $678=($677|0)!=0;
 if($678){label=100;break;}else{label=101;break;}
 case 100: 
 var $680=$rrc;
 $1=$680;
 label=1658;break;
 case 101: 
 var $682=$save_capture_last;
 var $683=$6;
 var $684=(($683+144)|0);
 HEAP32[(($684)>>2)]=$682;
 var $685=$3;
 var $686=(($685+1)|0);
 var $687=HEAP8[($686)];
 var $688=($687&255);
 var $689=$688<<8;
 var $690=$3;
 var $691=(($690+2)|0);
 var $692=HEAP8[($691)];
 var $693=($692&255);
 var $694=$689|$693;
 var $695=$3;
 var $696=(($695+$694)|0);
 $3=$696;
 var $697=$data;
 var $698=$6;
 var $699=(($698+172)|0);
 HEAP32[(($699)>>2)]=$697;
 var $700=$3;
 var $701=HEAP8[($700)];
 var $702=($701&255);
 var $703=($702|0)!=119;
 if($703){label=102;break;}else{label=103;break;}
 case 102: 
 label=104;break;
 case 103: 
 label=89;break;
 case 104: 
 var $707=$save_offset1;
 var $708=$offset;
 var $709=$6;
 var $710=(($709+12)|0);
 var $711=HEAP32[(($710)>>2)];
 var $712=(($711+($708<<2))|0);
 HEAP32[(($712)>>2)]=$707;
 var $713=$save_offset2;
 var $714=$offset;
 var $715=((($714)+(1))|0);
 var $716=$6;
 var $717=(($716+12)|0);
 var $718=HEAP32[(($717)>>2)];
 var $719=(($718+($715<<2))|0);
 HEAP32[(($719)>>2)]=$713;
 var $720=$save_offset3;
 var $721=$6;
 var $722=(($721+16)|0);
 var $723=HEAP32[(($722)>>2)];
 var $724=$number;
 var $725=((($723)-($724))|0);
 var $726=$6;
 var $727=(($726+12)|0);
 var $728=HEAP32[(($727)>>2)];
 var $729=(($728+($725<<2))|0);
 HEAP32[(($729)>>2)]=$720;
 var $730=$rrc;
 $1=$730;
 label=1658;break;
 case 105: 
 label=106;break;
 case 106: 
 label=107;break;
 case 107: 
 var $734=$op;
 var $735=($734>>>0)>=136;
 if($735){label=109;break;}else{label=108;break;}
 case 108: 
 var $737=$op;
 var $738=($737|0)==129;
 if($738){label=109;break;}else{label=110;break;}
 case 109: 
 var $740=$6;
 var $741=(($740+152)|0);
 HEAP32[(($741)>>2)]=2;
 label=114;break;
 case 110: 
 var $743=$6;
 var $744=(($743+108)|0);
 var $745=HEAP32[(($744)>>2)];
 var $746=($745|0)!=0;
 if($746){label=113;break;}else{label=111;break;}
 case 111: 
 var $748=$3;
 var $749=(($748+1)|0);
 var $750=HEAP8[($749)];
 var $751=($750&255);
 var $752=$751<<8;
 var $753=$3;
 var $754=(($753+2)|0);
 var $755=HEAP8[($754)];
 var $756=($755&255);
 var $757=$752|$756;
 var $758=$3;
 var $759=(($758+$757)|0);
 var $760=HEAP8[($759)];
 var $761=($760&255);
 var $762=($761|0)!=119;
 if($762){label=112;break;}else{label=113;break;}
 case 112: 
 var $764=$3;
 var $765=HEAP8[($764)];
 var $766=($765&255);
 var $767=((6760+$766)|0);
 var $768=HEAP8[($767)];
 var $769=($768&255);
 var $770=$3;
 var $771=(($770+$769)|0);
 $3=$771;
 label=9;break;
 case 113: 
 label=114;break;
 case 114: 
 var $774=$6;
 var $775=(($774+172)|0);
 var $776=HEAP32[(($775)>>2)];
 $data=$776;
 var $777=$6;
 var $778=(($777+144)|0);
 var $779=HEAP32[(($778)>>2)];
 $save_capture_last=$779;
 var $780=$2;
 var $781=$3;
 var $782=$3;
 var $783=HEAP8[($782)];
 var $784=($783&255);
 var $785=((6760+$784)|0);
 var $786=HEAP8[($785)];
 var $787=($786&255);
 var $788=(($781+$787)|0);
 var $789=$4;
 var $790=$5;
 var $791=$6;
 var $792=$7;
 var $793=HEAP32[(($8)>>2)];
 var $794=((($793)+(1))|0);
 var $795=_match($780,$788,$789,$790,$791,$792,$794);
 $rrc=$795;
 var $796=$rrc;
 var $797=($796|0)==-992;
 if($797){label=115;break;}else{label=120;break;}
 case 115: 
 var $799=$3;
 var $800=$3;
 var $801=(($800+1)|0);
 var $802=HEAP8[($801)];
 var $803=($802&255);
 var $804=$803<<8;
 var $805=$3;
 var $806=(($805+2)|0);
 var $807=HEAP8[($806)];
 var $808=($807&255);
 var $809=$804|$808;
 var $810=(($799+$809)|0);
 $next=$810;
 var $811=$6;
 var $812=(($811+124)|0);
 var $813=HEAP32[(($812)>>2)];
 var $814=$next;
 var $815=($813>>>0)<($814>>>0);
 if($815){label=116;break;}else{label=119;break;}
 case 116: 
 var $817=$3;
 var $818=HEAP8[($817)];
 var $819=($818&255);
 var $820=($819|0)==119;
 if($820){label=118;break;}else{label=117;break;}
 case 117: 
 var $822=$next;
 var $823=HEAP8[($822)];
 var $824=($823&255);
 var $825=($824|0)==119;
 if($825){label=118;break;}else{label=119;break;}
 case 118: 
 $rrc=0;
 label=119;break;
 case 119: 
 label=120;break;
 case 120: 
 var $829=$rrc;
 var $830=($829|0)!=0;
 if($830){label=121;break;}else{label=131;break;}
 case 121: 
 var $832=$rrc;
 var $833=($832|0)==-997;
 if($833){label=122;break;}else{label=130;break;}
 case 122: 
 var $835=$3;
 $scode=$835;
 var $836=$scode;
 var $837=HEAP8[($836)];
 var $838=($837&255);
 var $839=($838|0)!=129;
 if($839){label=123;break;}else{label=127;break;}
 case 123: 
 label=124;break;
 case 124: 
 var $842=$scode;
 var $843=HEAP8[($842)];
 var $844=($843&255);
 var $845=($844|0)==119;
 if($845){label=125;break;}else{label=126;break;}
 case 125: 
 var $847=$scode;
 var $848=(($847+1)|0);
 var $849=HEAP8[($848)];
 var $850=($849&255);
 var $851=$850<<8;
 var $852=$scode;
 var $853=(($852+2)|0);
 var $854=HEAP8[($853)];
 var $855=($854&255);
 var $856=$851|$855;
 var $857=$scode;
 var $858=(($857+$856)|0);
 $scode=$858;
 label=124;break;
 case 126: 
 var $860=$scode;
 var $861=(($860+1)|0);
 var $862=HEAP8[($861)];
 var $863=($862&255);
 var $864=$863<<8;
 var $865=$scode;
 var $866=(($865+2)|0);
 var $867=HEAP8[($866)];
 var $868=($867&255);
 var $869=$864|$868;
 var $870=$scode;
 var $871=(((-$869))|0);
 var $872=(($870+$871)|0);
 $scode=$872;
 label=127;break;
 case 127: 
 var $874=$6;
 var $875=(($874+180)|0);
 var $876=HEAP32[(($875)>>2)];
 var $877=$scode;
 var $878=($876|0)==($877|0);
 if($878){label=128;break;}else{label=129;break;}
 case 128: 
 $rrc=0;
 label=129;break;
 case 129: 
 label=130;break;
 case 130: 
 var $882=$rrc;
 $1=$882;
 label=1658;break;
 case 131: 
 var $884=$3;
 var $885=(($884+1)|0);
 var $886=HEAP8[($885)];
 var $887=($886&255);
 var $888=$887<<8;
 var $889=$3;
 var $890=(($889+2)|0);
 var $891=HEAP8[($890)];
 var $892=($891&255);
 var $893=$888|$892;
 var $894=$3;
 var $895=(($894+$893)|0);
 $3=$895;
 var $896=$data;
 var $897=$6;
 var $898=(($897+172)|0);
 HEAP32[(($898)>>2)]=$896;
 var $899=$3;
 var $900=HEAP8[($899)];
 var $901=($900&255);
 var $902=($901|0)!=119;
 if($902){label=132;break;}else{label=133;break;}
 case 132: 
 label=134;break;
 case 133: 
 var $905=$save_capture_last;
 var $906=$6;
 var $907=(($906+144)|0);
 HEAP32[(($907)>>2)]=$905;
 label=107;break;
 case 134: 
 $1=0;
 label=1658;break;
 case 135: 
 $cur_is_word=0;
 label=136;break;
 case 136: 
 var $911=$3;
 var $912=(($911+3)|0);
 var $913=HEAP8[($912)];
 var $914=($913&255);
 var $915=$914<<8;
 var $916=$3;
 var $917=(($916+4)|0);
 var $918=HEAP8[($917)];
 var $919=($918&255);
 var $920=$915|$919;
 $number=$920;
 var $921=$number;
 var $922=$921<<1;
 $offset=$922;
 var $923=$offset;
 var $924=$6;
 var $925=(($924+20)|0);
 var $926=HEAP32[(($925)>>2)];
 var $927=($923|0)<($926|0);
 if($927){label=137;break;}else{label=159;break;}
 case 137: 
 $prev_is_word=0;
 var $929=$3;
 var $930=$6;
 var $931=(($930+112)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=$929;
 var $934=$932;
 var $935=((($933)-($934))|0);
 $codelink=$935;
 var $936=$offset;
 var $937=$6;
 var $938=(($937+12)|0);
 var $939=HEAP32[(($938)>>2)];
 var $940=(($939+($936<<2))|0);
 var $941=HEAP32[(($940)>>2)];
 $save_offset1=$941;
 var $942=$offset;
 var $943=((($942)+(1))|0);
 var $944=$6;
 var $945=(($944+12)|0);
 var $946=HEAP32[(($945)>>2)];
 var $947=(($946+($943<<2))|0);
 var $948=HEAP32[(($947)>>2)];
 $save_offset2=$948;
 var $949=$6;
 var $950=(($949+16)|0);
 var $951=HEAP32[(($950)>>2)];
 var $952=$number;
 var $953=((($951)-($952))|0);
 var $954=$6;
 var $955=(($954+12)|0);
 var $956=HEAP32[(($955)>>2)];
 var $957=(($956+($953<<2))|0);
 var $958=HEAP32[(($957)>>2)];
 $save_offset3=$958;
 var $959=$6;
 var $960=(($959+144)|0);
 var $961=HEAP32[(($960)>>2)];
 $save_capture_last=$961;
 label=138;break;
 case 138: 
 var $963=$2;
 var $964=$6;
 var $965=(($964+116)|0);
 var $966=HEAP32[(($965)>>2)];
 var $967=$963;
 var $968=$966;
 var $969=((($967)-($968))|0);
 var $970=$6;
 var $971=(($970+16)|0);
 var $972=HEAP32[(($971)>>2)];
 var $973=$number;
 var $974=((($972)-($973))|0);
 var $975=$6;
 var $976=(($975+12)|0);
 var $977=HEAP32[(($976)>>2)];
 var $978=(($977+($974<<2))|0);
 HEAP32[(($978)>>2)]=$969;
 var $979=$op;
 var $980=($979>>>0)>=136;
 if($980){label=139;break;}else{label=140;break;}
 case 139: 
 var $982=$6;
 var $983=(($982+152)|0);
 HEAP32[(($983)>>2)]=2;
 label=140;break;
 case 140: 
 var $985=$2;
 var $986=$3;
 var $987=$3;
 var $988=HEAP8[($987)];
 var $989=($988&255);
 var $990=((6760+$989)|0);
 var $991=HEAP8[($990)];
 var $992=($991&255);
 var $993=(($986+$992)|0);
 var $994=$4;
 var $995=$5;
 var $996=$6;
 var $997=$7;
 var $998=HEAP32[(($8)>>2)];
 var $999=((($998)+(1))|0);
 var $1000=_match($985,$993,$994,$995,$996,$997,$999);
 $rrc=$1000;
 var $1001=$rrc;
 var $1002=($1001|0)==-998;
 if($1002){label=141;break;}else{label=142;break;}
 case 141: 
 var $1004=$6;
 var $1005=(($1004+140)|0);
 var $1006=HEAP32[(($1005)>>2)];
 $5=$1006;
 var $1007=$6;
 var $1008=(($1007+128)|0);
 var $1009=HEAP32[(($1008)>>2)];
 $2=$1009;
 var $1010=$6;
 var $1011=(($1010+112)|0);
 var $1012=HEAP32[(($1011)>>2)];
 var $1013=$codelink;
 var $1014=(($1012+$1013)|0);
 $3=$1014;
 var $1015=$6;
 var $1016=(($1015+144)|0);
 var $1017=HEAP32[(($1016)>>2)];
 $save_capture_last=$1017;
 $prev_is_word=1;
 var $1018=$6;
 var $1019=(($1018+124)|0);
 var $1020=HEAP32[(($1019)>>2)];
 $4=$1020;
 label=138;break;
 case 142: 
 var $1022=$rrc;
 var $1023=($1022|0)==-992;
 if($1023){label=143;break;}else{label=148;break;}
 case 143: 
 var $1025=$3;
 var $1026=$3;
 var $1027=(($1026+1)|0);
 var $1028=HEAP8[($1027)];
 var $1029=($1028&255);
 var $1030=$1029<<8;
 var $1031=$3;
 var $1032=(($1031+2)|0);
 var $1033=HEAP8[($1032)];
 var $1034=($1033&255);
 var $1035=$1030|$1034;
 var $1036=(($1025+$1035)|0);
 $next=$1036;
 var $1037=$6;
 var $1038=(($1037+124)|0);
 var $1039=HEAP32[(($1038)>>2)];
 var $1040=$next;
 var $1041=($1039>>>0)<($1040>>>0);
 if($1041){label=144;break;}else{label=147;break;}
 case 144: 
 var $1043=$3;
 var $1044=HEAP8[($1043)];
 var $1045=($1044&255);
 var $1046=($1045|0)==119;
 if($1046){label=146;break;}else{label=145;break;}
 case 145: 
 var $1048=$next;
 var $1049=HEAP8[($1048)];
 var $1050=($1049&255);
 var $1051=($1050|0)==119;
 if($1051){label=146;break;}else{label=147;break;}
 case 146: 
 $rrc=0;
 label=147;break;
 case 147: 
 label=148;break;
 case 148: 
 var $1055=$rrc;
 var $1056=($1055|0)!=0;
 if($1056){label=149;break;}else{label=150;break;}
 case 149: 
 var $1058=$rrc;
 $1=$1058;
 label=1658;break;
 case 150: 
 var $1060=$save_capture_last;
 var $1061=$6;
 var $1062=(($1061+144)|0);
 HEAP32[(($1062)>>2)]=$1060;
 var $1063=$3;
 var $1064=(($1063+1)|0);
 var $1065=HEAP8[($1064)];
 var $1066=($1065&255);
 var $1067=$1066<<8;
 var $1068=$3;
 var $1069=(($1068+2)|0);
 var $1070=HEAP8[($1069)];
 var $1071=($1070&255);
 var $1072=$1067|$1071;
 var $1073=$3;
 var $1074=(($1073+$1072)|0);
 $3=$1074;
 var $1075=$3;
 var $1076=HEAP8[($1075)];
 var $1077=($1076&255);
 var $1078=($1077|0)!=119;
 if($1078){label=151;break;}else{label=152;break;}
 case 151: 
 label=153;break;
 case 152: 
 label=138;break;
 case 153: 
 var $1082=$prev_is_word;
 var $1083=($1082|0)!=0;
 if($1083){label=155;break;}else{label=154;break;}
 case 154: 
 var $1085=$save_offset1;
 var $1086=$offset;
 var $1087=$6;
 var $1088=(($1087+12)|0);
 var $1089=HEAP32[(($1088)>>2)];
 var $1090=(($1089+($1086<<2))|0);
 HEAP32[(($1090)>>2)]=$1085;
 var $1091=$save_offset2;
 var $1092=$offset;
 var $1093=((($1092)+(1))|0);
 var $1094=$6;
 var $1095=(($1094+12)|0);
 var $1096=HEAP32[(($1095)>>2)];
 var $1097=(($1096+($1093<<2))|0);
 HEAP32[(($1097)>>2)]=$1091;
 var $1098=$save_offset3;
 var $1099=$6;
 var $1100=(($1099+16)|0);
 var $1101=HEAP32[(($1100)>>2)];
 var $1102=$number;
 var $1103=((($1101)-($1102))|0);
 var $1104=$6;
 var $1105=(($1104+12)|0);
 var $1106=HEAP32[(($1105)>>2)];
 var $1107=(($1106+($1103<<2))|0);
 HEAP32[(($1107)>>2)]=$1098;
 label=155;break;
 case 155: 
 var $1109=$cur_is_word;
 var $1110=($1109|0)!=0;
 if($1110){label=157;break;}else{label=156;break;}
 case 156: 
 var $1112=$prev_is_word;
 var $1113=($1112|0)!=0;
 if($1113){label=157;break;}else{label=158;break;}
 case 157: 
 var $1115=$3;
 var $1116=(($1115+3)|0);
 $3=$1116;
 label=1657;break;
 case 158: 
 $1=0;
 label=1658;break;
 case 159: 
 label=160;break;
 case 160: 
 $cur_is_word=0;
 label=161;break;
 case 161: 
 $prev_is_word=0;
 var $1121=$3;
 var $1122=$6;
 var $1123=(($1122+112)|0);
 var $1124=HEAP32[(($1123)>>2)];
 var $1125=$1121;
 var $1126=$1124;
 var $1127=((($1125)-($1126))|0);
 $codelink=$1127;
 var $1128=$6;
 var $1129=(($1128+144)|0);
 var $1130=HEAP32[(($1129)>>2)];
 $save_capture_last=$1130;
 label=162;break;
 case 162: 
 var $1132=$op;
 var $1133=($1132>>>0)>=136;
 if($1133){label=163;break;}else{label=164;break;}
 case 163: 
 var $1135=$6;
 var $1136=(($1135+152)|0);
 HEAP32[(($1136)>>2)]=2;
 label=164;break;
 case 164: 
 var $1138=$2;
 var $1139=$3;
 var $1140=$3;
 var $1141=HEAP8[($1140)];
 var $1142=($1141&255);
 var $1143=((6760+$1142)|0);
 var $1144=HEAP8[($1143)];
 var $1145=($1144&255);
 var $1146=(($1139+$1145)|0);
 var $1147=$4;
 var $1148=$5;
 var $1149=$6;
 var $1150=$7;
 var $1151=HEAP32[(($8)>>2)];
 var $1152=((($1151)+(1))|0);
 var $1153=_match($1138,$1146,$1147,$1148,$1149,$1150,$1152);
 $rrc=$1153;
 var $1154=$rrc;
 var $1155=($1154|0)==-998;
 if($1155){label=165;break;}else{label=166;break;}
 case 165: 
 var $1157=$6;
 var $1158=(($1157+140)|0);
 var $1159=HEAP32[(($1158)>>2)];
 $5=$1159;
 var $1160=$6;
 var $1161=(($1160+128)|0);
 var $1162=HEAP32[(($1161)>>2)];
 $2=$1162;
 var $1163=$6;
 var $1164=(($1163+112)|0);
 var $1165=HEAP32[(($1164)>>2)];
 var $1166=$codelink;
 var $1167=(($1165+$1166)|0);
 $3=$1167;
 $prev_is_word=1;
 var $1168=$6;
 var $1169=(($1168+124)|0);
 var $1170=HEAP32[(($1169)>>2)];
 $4=$1170;
 label=162;break;
 case 166: 
 var $1172=$rrc;
 var $1173=($1172|0)==-992;
 if($1173){label=167;break;}else{label=172;break;}
 case 167: 
 var $1175=$3;
 var $1176=$3;
 var $1177=(($1176+1)|0);
 var $1178=HEAP8[($1177)];
 var $1179=($1178&255);
 var $1180=$1179<<8;
 var $1181=$3;
 var $1182=(($1181+2)|0);
 var $1183=HEAP8[($1182)];
 var $1184=($1183&255);
 var $1185=$1180|$1184;
 var $1186=(($1175+$1185)|0);
 $next=$1186;
 var $1187=$6;
 var $1188=(($1187+124)|0);
 var $1189=HEAP32[(($1188)>>2)];
 var $1190=$next;
 var $1191=($1189>>>0)<($1190>>>0);
 if($1191){label=168;break;}else{label=171;break;}
 case 168: 
 var $1193=$3;
 var $1194=HEAP8[($1193)];
 var $1195=($1194&255);
 var $1196=($1195|0)==119;
 if($1196){label=170;break;}else{label=169;break;}
 case 169: 
 var $1198=$next;
 var $1199=HEAP8[($1198)];
 var $1200=($1199&255);
 var $1201=($1200|0)==119;
 if($1201){label=170;break;}else{label=171;break;}
 case 170: 
 $rrc=0;
 label=171;break;
 case 171: 
 label=172;break;
 case 172: 
 var $1205=$rrc;
 var $1206=($1205|0)!=0;
 if($1206){label=173;break;}else{label=174;break;}
 case 173: 
 var $1208=$rrc;
 $1=$1208;
 label=1658;break;
 case 174: 
 var $1210=$3;
 var $1211=(($1210+1)|0);
 var $1212=HEAP8[($1211)];
 var $1213=($1212&255);
 var $1214=$1213<<8;
 var $1215=$3;
 var $1216=(($1215+2)|0);
 var $1217=HEAP8[($1216)];
 var $1218=($1217&255);
 var $1219=$1214|$1218;
 var $1220=$3;
 var $1221=(($1220+$1219)|0);
 $3=$1221;
 var $1222=$3;
 var $1223=HEAP8[($1222)];
 var $1224=($1223&255);
 var $1225=($1224|0)!=119;
 if($1225){label=175;break;}else{label=176;break;}
 case 175: 
 label=177;break;
 case 176: 
 var $1228=$save_capture_last;
 var $1229=$6;
 var $1230=(($1229+144)|0);
 HEAP32[(($1230)>>2)]=$1228;
 label=162;break;
 case 177: 
 var $1232=$prev_is_word;
 var $1233=($1232|0)!=0;
 if($1233){label=179;break;}else{label=178;break;}
 case 178: 
 var $1235=$cur_is_word;
 var $1236=($1235|0)!=0;
 if($1236){label=179;break;}else{label=180;break;}
 case 179: 
 var $1238=$3;
 var $1239=(($1238+3)|0);
 $3=$1239;
 label=1657;break;
 case 180: 
 $1=0;
 label=1658;break;
 case 181: 
 var $1242=$3;
 var $1243=(($1242+1)|0);
 var $1244=HEAP8[($1243)];
 var $1245=($1244&255);
 var $1246=$1245<<8;
 var $1247=$3;
 var $1248=(($1247+2)|0);
 var $1249=HEAP8[($1248)];
 var $1250=($1249&255);
 var $1251=$1246|$1250;
 $codelink=$1251;
 var $1252=$3;
 var $1253=(($1252+3)|0);
 $3=$1253;
 var $1254=$3;
 var $1255=HEAP8[($1254)];
 var $1256=($1255&255);
 var $1257=($1256|0)==118;
 if($1257){label=182;break;}else{label=191;break;}
 case 182: 
 var $1259=HEAP32[((6936)>>2)];
 var $1260=($1259|0)!=0;
 if($1260){label=183;break;}else{label=190;break;}
 case 183: 
 var $1262=(($cb)|0);
 HEAP32[(($1262)>>2)]=2;
 var $1263=$3;
 var $1264=(($1263+1)|0);
 var $1265=HEAP8[($1264)];
 var $1266=($1265&255);
 var $1267=(($cb+4)|0);
 HEAP32[(($1267)>>2)]=$1266;
 var $1268=$6;
 var $1269=(($1268+12)|0);
 var $1270=HEAP32[(($1269)>>2)];
 var $1271=(($cb+8)|0);
 HEAP32[(($1271)>>2)]=$1270;
 var $1272=$6;
 var $1273=(($1272+116)|0);
 var $1274=HEAP32[(($1273)>>2)];
 var $1275=(($cb+12)|0);
 HEAP32[(($1275)>>2)]=$1274;
 var $1276=$6;
 var $1277=(($1276+120)|0);
 var $1278=HEAP32[(($1277)>>2)];
 var $1279=$6;
 var $1280=(($1279+116)|0);
 var $1281=HEAP32[(($1280)>>2)];
 var $1282=$1278;
 var $1283=$1281;
 var $1284=((($1282)-($1283))|0);
 var $1285=(($cb+16)|0);
 HEAP32[(($1285)>>2)]=$1284;
 var $1286=$4;
 var $1287=$6;
 var $1288=(($1287+116)|0);
 var $1289=HEAP32[(($1288)>>2)];
 var $1290=$1286;
 var $1291=$1289;
 var $1292=((($1290)-($1291))|0);
 var $1293=(($cb+20)|0);
 HEAP32[(($1293)>>2)]=$1292;
 var $1294=$2;
 var $1295=$6;
 var $1296=(($1295+116)|0);
 var $1297=HEAP32[(($1296)>>2)];
 var $1298=$1294;
 var $1299=$1297;
 var $1300=((($1298)-($1299))|0);
 var $1301=(($cb+24)|0);
 HEAP32[(($1301)>>2)]=$1300;
 var $1302=$3;
 var $1303=(($1302+2)|0);
 var $1304=HEAP8[($1303)];
 var $1305=($1304&255);
 var $1306=$1305<<8;
 var $1307=$3;
 var $1308=(($1307+3)|0);
 var $1309=HEAP8[($1308)];
 var $1310=($1309&255);
 var $1311=$1306|$1310;
 var $1312=(($cb+40)|0);
 HEAP32[(($1312)>>2)]=$1311;
 var $1313=$3;
 var $1314=(($1313+4)|0);
 var $1315=HEAP8[($1314)];
 var $1316=($1315&255);
 var $1317=$1316<<8;
 var $1318=$3;
 var $1319=(($1318+5)|0);
 var $1320=HEAP8[($1319)];
 var $1321=($1320&255);
 var $1322=$1317|$1321;
 var $1323=(($cb+44)|0);
 HEAP32[(($1323)>>2)]=$1322;
 var $1324=$5;
 var $1325=(((($1324|0))/(2))&-1);
 var $1326=(($cb+28)|0);
 HEAP32[(($1326)>>2)]=$1325;
 var $1327=$6;
 var $1328=(($1327+144)|0);
 var $1329=HEAP32[(($1328)>>2)];
 var $1330=$1329&65535;
 var $1331=(($cb+32)|0);
 HEAP32[(($1331)>>2)]=$1330;
 var $1332=(($cb+32)|0);
 var $1333=HEAP32[(($1332)>>2)];
 var $1334=($1333|0)==0;
 if($1334){label=184;break;}else{label=185;break;}
 case 184: 
 var $1336=(($cb+32)|0);
 HEAP32[(($1336)>>2)]=-1;
 label=185;break;
 case 185: 
 var $1338=$6;
 var $1339=(($1338+168)|0);
 var $1340=HEAP32[(($1339)>>2)];
 var $1341=(($cb+36)|0);
 HEAP32[(($1341)>>2)]=$1340;
 var $1342=$6;
 var $1343=(($1342+176)|0);
 var $1344=HEAP32[(($1343)>>2)];
 var $1345=(($cb+48)|0);
 HEAP32[(($1345)>>2)]=$1344;
 var $1346=HEAP32[((6936)>>2)];
 var $1347=FUNCTION_TABLE[$1346]($cb);
 $rrc=$1347;
 var $1348=($1347|0)>0;
 if($1348){label=186;break;}else{label=187;break;}
 case 186: 
 $1=0;
 label=1658;break;
 case 187: 
 var $1351=$rrc;
 var $1352=($1351|0)<0;
 if($1352){label=188;break;}else{label=189;break;}
 case 188: 
 var $1354=$rrc;
 $1=$1354;
 label=1658;break;
 case 189: 
 label=190;break;
 case 190: 
 var $1357=HEAP8[(6878)];
 var $1358=($1357&255);
 var $1359=$3;
 var $1360=(($1359+$1358)|0);
 $3=$1360;
 var $1361=HEAP8[(6878)];
 var $1362=($1361&255);
 var $1363=$codelink;
 var $1364=((($1363)-($1362))|0);
 $codelink=$1364;
 label=191;break;
 case 191: 
 $condition=0;
 var $1366=$3;
 var $1367=HEAP8[($1366)];
 var $1368=($1367&255);
 $condcode=$1368;
 switch(($1368|0)){case 143:{ label=192;break;}case 144:{ label=197;break;}case 141:{ label=205;break;}case 142:{ label=208;break;}case 145:{ label=216;break;}default:{label=217;break;}}break;
 case 192: 
 var $1370=$6;
 var $1371=(($1370+164)|0);
 var $1372=HEAP32[(($1371)>>2)];
 var $1373=($1372|0)!=0;
 if($1373){label=193;break;}else{label=196;break;}
 case 193: 
 var $1375=$3;
 var $1376=(($1375+1)|0);
 var $1377=HEAP8[($1376)];
 var $1378=($1377&255);
 var $1379=$1378<<8;
 var $1380=$3;
 var $1381=(($1380+2)|0);
 var $1382=HEAP8[($1381)];
 var $1383=($1382&255);
 var $1384=$1379|$1383;
 $recno=$1384;
 var $1385=$recno;
 var $1386=($1385|0)==65535;
 if($1386){var $1396=1;label=195;break;}else{label=194;break;}
 case 194: 
 var $1388=$recno;
 var $1389=$6;
 var $1390=(($1389+164)|0);
 var $1391=HEAP32[(($1390)>>2)];
 var $1392=(($1391+4)|0);
 var $1393=HEAP32[(($1392)>>2)];
 var $1394=($1388|0)==($1393|0);
 var $1396=$1394;label=195;break;
 case 195: 
 var $1396;
 var $1397=($1396&1);
 $condition=$1397;
 label=196;break;
 case 196: 
 label=229;break;
 case 197: 
 var $1400=$6;
 var $1401=(($1400+164)|0);
 var $1402=HEAP32[(($1401)>>2)];
 var $1403=($1402|0)!=0;
 if($1403){label=198;break;}else{label=204;break;}
 case 198: 
 var $1405=$3;
 var $1406=(($1405+3)|0);
 var $1407=HEAP8[($1406)];
 var $1408=($1407&255);
 var $1409=$1408<<8;
 var $1410=$3;
 var $1411=(($1410+4)|0);
 var $1412=HEAP8[($1411)];
 var $1413=($1412&255);
 var $1414=$1409|$1413;
 $count=$1414;
 var $1415=$6;
 var $1416=(($1415+48)|0);
 var $1417=HEAP32[(($1416)>>2)];
 var $1418=$3;
 var $1419=(($1418+1)|0);
 var $1420=HEAP8[($1419)];
 var $1421=($1420&255);
 var $1422=$1421<<8;
 var $1423=$3;
 var $1424=(($1423+2)|0);
 var $1425=HEAP8[($1424)];
 var $1426=($1425&255);
 var $1427=$1422|$1426;
 var $1428=$6;
 var $1429=(($1428+36)|0);
 var $1430=HEAP32[(($1429)>>2)];
 var $1431=(Math_imul($1427,$1430)|0);
 var $1432=(($1417+$1431)|0);
 $slot=$1432;
 label=199;break;
 case 199: 
 var $1434=$count;
 var $1435=((($1434)-(1))|0);
 $count=$1435;
 var $1436=($1434|0)>0;
 if($1436){label=200;break;}else{label=203;break;}
 case 200: 
 var $1438=$slot;
 var $1439=(($1438)|0);
 var $1440=HEAP8[($1439)];
 var $1441=($1440&255);
 var $1442=$1441<<8;
 var $1443=$slot;
 var $1444=(($1443+1)|0);
 var $1445=HEAP8[($1444)];
 var $1446=($1445&255);
 var $1447=$1442|$1446;
 $recno1=$1447;
 var $1448=$recno1;
 var $1449=$6;
 var $1450=(($1449+164)|0);
 var $1451=HEAP32[(($1450)>>2)];
 var $1452=(($1451+4)|0);
 var $1453=HEAP32[(($1452)>>2)];
 var $1454=($1448|0)==($1453|0);
 var $1455=($1454&1);
 $condition=$1455;
 var $1456=$condition;
 var $1457=($1456|0)!=0;
 if($1457){label=201;break;}else{label=202;break;}
 case 201: 
 label=203;break;
 case 202: 
 var $1460=$6;
 var $1461=(($1460+36)|0);
 var $1462=HEAP32[(($1461)>>2)];
 var $1463=$slot;
 var $1464=(($1463+$1462)|0);
 $slot=$1464;
 label=199;break;
 case 203: 
 label=204;break;
 case 204: 
 label=229;break;
 case 205: 
 var $1468=$3;
 var $1469=(($1468+1)|0);
 var $1470=HEAP8[($1469)];
 var $1471=($1470&255);
 var $1472=$1471<<8;
 var $1473=$3;
 var $1474=(($1473+2)|0);
 var $1475=HEAP8[($1474)];
 var $1476=($1475&255);
 var $1477=$1472|$1476;
 var $1478=$1477<<1;
 $offset=$1478;
 var $1479=$offset;
 var $1480=$5;
 var $1481=($1479|0)<($1480|0);
 if($1481){label=206;break;}else{var $1491=0;label=207;break;}
 case 206: 
 var $1483=$offset;
 var $1484=$6;
 var $1485=(($1484+12)|0);
 var $1486=HEAP32[(($1485)>>2)];
 var $1487=(($1486+($1483<<2))|0);
 var $1488=HEAP32[(($1487)>>2)];
 var $1489=($1488|0)>=0;
 var $1491=$1489;label=207;break;
 case 207: 
 var $1491;
 var $1492=($1491&1);
 $condition=$1492;
 label=229;break;
 case 208: 
 var $1494=$3;
 var $1495=(($1494+3)|0);
 var $1496=HEAP8[($1495)];
 var $1497=($1496&255);
 var $1498=$1497<<8;
 var $1499=$3;
 var $1500=(($1499+4)|0);
 var $1501=HEAP8[($1500)];
 var $1502=($1501&255);
 var $1503=$1498|$1502;
 $count2=$1503;
 var $1504=$6;
 var $1505=(($1504+48)|0);
 var $1506=HEAP32[(($1505)>>2)];
 var $1507=$3;
 var $1508=(($1507+1)|0);
 var $1509=HEAP8[($1508)];
 var $1510=($1509&255);
 var $1511=$1510<<8;
 var $1512=$3;
 var $1513=(($1512+2)|0);
 var $1514=HEAP8[($1513)];
 var $1515=($1514&255);
 var $1516=$1511|$1515;
 var $1517=$6;
 var $1518=(($1517+36)|0);
 var $1519=HEAP32[(($1518)>>2)];
 var $1520=(Math_imul($1516,$1519)|0);
 var $1521=(($1506+$1520)|0);
 $slot3=$1521;
 label=209;break;
 case 209: 
 var $1523=$count2;
 var $1524=((($1523)-(1))|0);
 $count2=$1524;
 var $1525=($1523|0)>0;
 if($1525){label=210;break;}else{label=215;break;}
 case 210: 
 var $1527=$slot3;
 var $1528=(($1527)|0);
 var $1529=HEAP8[($1528)];
 var $1530=($1529&255);
 var $1531=$1530<<8;
 var $1532=$slot3;
 var $1533=(($1532+1)|0);
 var $1534=HEAP8[($1533)];
 var $1535=($1534&255);
 var $1536=$1531|$1535;
 var $1537=$1536<<1;
 $offset=$1537;
 var $1538=$offset;
 var $1539=$5;
 var $1540=($1538|0)<($1539|0);
 if($1540){label=211;break;}else{var $1550=0;label=212;break;}
 case 211: 
 var $1542=$offset;
 var $1543=$6;
 var $1544=(($1543+12)|0);
 var $1545=HEAP32[(($1544)>>2)];
 var $1546=(($1545+($1542<<2))|0);
 var $1547=HEAP32[(($1546)>>2)];
 var $1548=($1547|0)>=0;
 var $1550=$1548;label=212;break;
 case 212: 
 var $1550;
 var $1551=($1550&1);
 $condition=$1551;
 var $1552=$condition;
 var $1553=($1552|0)!=0;
 if($1553){label=213;break;}else{label=214;break;}
 case 213: 
 label=215;break;
 case 214: 
 var $1556=$6;
 var $1557=(($1556+36)|0);
 var $1558=HEAP32[(($1557)>>2)];
 var $1559=$slot3;
 var $1560=(($1559+$1558)|0);
 $slot3=$1560;
 label=209;break;
 case 215: 
 label=229;break;
 case 216: 
 label=229;break;
 case 217: 
 var $1564=$6;
 var $1565=(($1564+152)|0);
 HEAP32[(($1565)>>2)]=1;
 var $1566=$2;
 var $1567=$3;
 var $1568=$4;
 var $1569=$5;
 var $1570=$6;
 var $1571=HEAP32[(($8)>>2)];
 var $1572=((($1571)+(1))|0);
 var $1573=_match($1566,$1567,$1568,$1569,$1570,0,$1572);
 $rrc=$1573;
 var $1574=$rrc;
 var $1575=($1574|0)==1;
 if($1575){label=218;break;}else{label=224;break;}
 case 218: 
 var $1577=$6;
 var $1578=(($1577+140)|0);
 var $1579=HEAP32[(($1578)>>2)];
 var $1580=$5;
 var $1581=($1579|0)>($1580|0);
 if($1581){label=219;break;}else{label=220;break;}
 case 219: 
 var $1583=$6;
 var $1584=(($1583+140)|0);
 var $1585=HEAP32[(($1584)>>2)];
 $5=$1585;
 label=220;break;
 case 220: 
 $condition=1;
 var $1587=$3;
 var $1588=(($1587+1)|0);
 var $1589=HEAP8[($1588)];
 var $1590=($1589&255);
 var $1591=$1590<<8;
 var $1592=$3;
 var $1593=(($1592+2)|0);
 var $1594=HEAP8[($1593)];
 var $1595=($1594&255);
 var $1596=$1591|$1595;
 var $1597=$3;
 var $1598=(($1597+$1596)|0);
 $3=$1598;
 label=221;break;
 case 221: 
 var $1600=$3;
 var $1601=HEAP8[($1600)];
 var $1602=($1601&255);
 var $1603=($1602|0)==119;
 if($1603){label=222;break;}else{label=223;break;}
 case 222: 
 var $1605=$3;
 var $1606=(($1605+1)|0);
 var $1607=HEAP8[($1606)];
 var $1608=($1607&255);
 var $1609=$1608<<8;
 var $1610=$3;
 var $1611=(($1610+2)|0);
 var $1612=HEAP8[($1611)];
 var $1613=($1612&255);
 var $1614=$1609|$1613;
 var $1615=$3;
 var $1616=(($1615+$1614)|0);
 $3=$1616;
 label=221;break;
 case 223: 
 var $1618=$condcode;
 var $1619=((6760+$1618)|0);
 var $1620=HEAP8[($1619)];
 var $1621=($1620&255);
 var $1622=(((3)-($1621))|0);
 var $1623=$3;
 var $1624=(($1623+$1622)|0);
 $3=$1624;
 label=228;break;
 case 224: 
 var $1626=$rrc;
 var $1627=($1626|0)!=0;
 if($1627){label=225;break;}else{label=227;break;}
 case 225: 
 var $1629=$rrc;
 var $1630=($1629|0)!=-992;
 if($1630){label=226;break;}else{label=227;break;}
 case 226: 
 var $1632=$rrc;
 $1=$1632;
 label=1658;break;
 case 227: 
 label=228;break;
 case 228: 
 label=229;break;
 case 229: 
 var $1636=$condition;
 var $1637=($1636|0)!=0;
 if($1637){label=230;break;}else{label=231;break;}
 case 230: 
 var $1639=$condcode;
 var $1640=((6760+$1639)|0);
 var $1641=HEAP8[($1640)];
 var $1642=($1641&255);
 var $1646=$1642;label=232;break;
 case 231: 
 var $1644=$codelink;
 var $1646=$1644;label=232;break;
 case 232: 
 var $1646;
 var $1647=$3;
 var $1648=(($1647+$1646)|0);
 $3=$1648;
 var $1649=$condition;
 var $1650=($1649|0)!=0;
 if($1650){label=234;break;}else{label=233;break;}
 case 233: 
 var $1652=$3;
 var $1653=((($1652)-(3))|0);
 var $1654=HEAP8[($1653)];
 var $1655=($1654&255);
 var $1656=($1655|0)==119;
 if($1656){label=234;break;}else{label=237;break;}
 case 234: 
 var $1658=$op;
 var $1659=($1658|0)!=140;
 if($1659){label=235;break;}else{label=236;break;}
 case 235: 
 label=9;break;
 case 236: 
 var $1662=$6;
 var $1663=(($1662+152)|0);
 HEAP32[(($1663)>>2)]=2;
 var $1664=$2;
 var $1665=$3;
 var $1666=$4;
 var $1667=$5;
 var $1668=$6;
 var $1669=$7;
 var $1670=HEAP32[(($8)>>2)];
 var $1671=((($1670)+(1))|0);
 var $1672=_match($1664,$1665,$1666,$1667,$1668,$1669,$1671);
 $rrc=$1672;
 var $1673=$rrc;
 $1=$1673;
 label=1658;break;
 case 237: 
 label=238;break;
 case 238: 
 label=1657;break;
 case 239: 
 var $1677=$3;
 var $1678=(($1677+1)|0);
 var $1679=HEAP8[($1678)];
 var $1680=($1679&255);
 var $1681=$1680<<8;
 var $1682=$3;
 var $1683=(($1682+2)|0);
 var $1684=HEAP8[($1683)];
 var $1685=($1684&255);
 var $1686=$1681|$1685;
 $number=$1686;
 var $1687=$number;
 var $1688=$1687<<1;
 $offset=$1688;
 var $1689=$6;
 var $1690=(($1689+144)|0);
 var $1691=HEAP32[(($1690)>>2)];
 var $1692=$1691&-65536;
 var $1693=$number;
 var $1694=$1692|$1693;
 var $1695=$6;
 var $1696=(($1695+144)|0);
 HEAP32[(($1696)>>2)]=$1694;
 var $1697=$offset;
 var $1698=$6;
 var $1699=(($1698+20)|0);
 var $1700=HEAP32[(($1699)>>2)];
 var $1701=($1697|0)>=($1700|0);
 if($1701){label=240;break;}else{label=241;break;}
 case 240: 
 var $1703=$6;
 var $1704=(($1703+144)|0);
 var $1705=HEAP32[(($1704)>>2)];
 var $1706=$1705|65536;
 HEAP32[(($1704)>>2)]=$1706;
 label=244;break;
 case 241: 
 var $1708=$6;
 var $1709=(($1708+16)|0);
 var $1710=HEAP32[(($1709)>>2)];
 var $1711=$number;
 var $1712=((($1710)-($1711))|0);
 var $1713=$6;
 var $1714=(($1713+12)|0);
 var $1715=HEAP32[(($1714)>>2)];
 var $1716=(($1715+($1712<<2))|0);
 var $1717=HEAP32[(($1716)>>2)];
 var $1718=$offset;
 var $1719=$6;
 var $1720=(($1719+12)|0);
 var $1721=HEAP32[(($1720)>>2)];
 var $1722=(($1721+($1718<<2))|0);
 HEAP32[(($1722)>>2)]=$1717;
 var $1723=$2;
 var $1724=$6;
 var $1725=(($1724+116)|0);
 var $1726=HEAP32[(($1725)>>2)];
 var $1727=$1723;
 var $1728=$1726;
 var $1729=((($1727)-($1728))|0);
 var $1730=$offset;
 var $1731=((($1730)+(1))|0);
 var $1732=$6;
 var $1733=(($1732+12)|0);
 var $1734=HEAP32[(($1733)>>2)];
 var $1735=(($1734+($1731<<2))|0);
 HEAP32[(($1735)>>2)]=$1729;
 var $1736=$5;
 var $1737=$offset;
 var $1738=($1736|0)<=($1737|0);
 if($1738){label=242;break;}else{label=243;break;}
 case 242: 
 var $1740=$offset;
 var $1741=((($1740)+(2))|0);
 $5=$1741;
 label=243;break;
 case 243: 
 label=244;break;
 case 244: 
 var $1744=$3;
 var $1745=(($1744+3)|0);
 $3=$1745;
 label=1657;break;
 case 245: 
 var $1747=$2;
 var $1748=$4;
 var $1749=($1747|0)==($1748|0);
 if($1749){label=246;break;}else{label=252;break;}
 case 246: 
 var $1751=$op;
 var $1752=($1751|0)!=159;
 if($1752){label=247;break;}else{label=252;break;}
 case 247: 
 var $1754=$6;
 var $1755=(($1754+164)|0);
 var $1756=HEAP32[(($1755)>>2)];
 var $1757=($1756|0)==0;
 if($1757){label=248;break;}else{label=252;break;}
 case 248: 
 var $1759=$6;
 var $1760=(($1759+92)|0);
 var $1761=HEAP32[(($1760)>>2)];
 var $1762=($1761|0)!=0;
 if($1762){label=251;break;}else{label=249;break;}
 case 249: 
 var $1764=$6;
 var $1765=(($1764+96)|0);
 var $1766=HEAP32[(($1765)>>2)];
 var $1767=($1766|0)!=0;
 if($1767){label=250;break;}else{label=252;break;}
 case 250: 
 var $1769=$4;
 var $1770=$6;
 var $1771=(($1770+116)|0);
 var $1772=HEAP32[(($1771)>>2)];
 var $1773=$6;
 var $1774=(($1773+148)|0);
 var $1775=HEAP32[(($1774)>>2)];
 var $1776=(($1772+$1775)|0);
 var $1777=($1769|0)==($1776|0);
 if($1777){label=251;break;}else{label=252;break;}
 case 251: 
 $1=0;
 label=1658;break;
 case 252: 
 var $1780=$2;
 var $1781=$6;
 var $1782=(($1781+128)|0);
 HEAP32[(($1782)>>2)]=$1780;
 var $1783=$5;
 var $1784=$6;
 var $1785=(($1784+140)|0);
 HEAP32[(($1785)>>2)]=$1783;
 var $1786=$4;
 var $1787=$6;
 var $1788=(($1787+124)|0);
 HEAP32[(($1788)>>2)]=$1786;
 var $1789=$op;
 var $1790=($1789|0)==0;
 var $1791=($1790?1:-999);
 $rrc=$1791;
 var $1792=$rrc;
 $1=$1792;
 label=1658;break;
 case 253: 
 var $1794=$6;
 var $1795=(($1794+172)|0);
 var $1796=HEAP32[(($1795)>>2)];
 $data=$1796;
 var $1797=$6;
 var $1798=(($1797+152)|0);
 var $1799=HEAP32[(($1798)>>2)];
 var $1800=($1799|0)==1;
 if($1800){label=254;break;}else{label=255;break;}
 case 254: 
 $condition=1;
 var $1802=$6;
 var $1803=(($1802+152)|0);
 HEAP32[(($1803)>>2)]=0;
 label=256;break;
 case 255: 
 $condition=0;
 label=256;break;
 case 256: 
 label=257;break;
 case 257: 
 var $1807=$2;
 var $1808=$3;
 var $1809=(($1808+1)|0);
 var $1810=(($1809+2)|0);
 var $1811=$4;
 var $1812=$5;
 var $1813=$6;
 var $1814=HEAP32[(($8)>>2)];
 var $1815=((($1814)+(1))|0);
 var $1816=_match($1807,$1810,$1811,$1812,$1813,0,$1815);
 $rrc=$1816;
 var $1817=$rrc;
 var $1818=($1817|0)==1;
 if($1818){label=259;break;}else{label=258;break;}
 case 258: 
 var $1820=$rrc;
 var $1821=($1820|0)==-999;
 if($1821){label=259;break;}else{label=260;break;}
 case 259: 
 var $1823=$6;
 var $1824=(($1823+124)|0);
 var $1825=HEAP32[(($1824)>>2)];
 $4=$1825;
 label=270;break;
 case 260: 
 var $1827=$data;
 var $1828=$6;
 var $1829=(($1828+172)|0);
 HEAP32[(($1829)>>2)]=$1827;
 var $1830=$rrc;
 var $1831=($1830|0)==-992;
 if($1831){label=261;break;}else{label=266;break;}
 case 261: 
 var $1833=$3;
 var $1834=$3;
 var $1835=(($1834+1)|0);
 var $1836=HEAP8[($1835)];
 var $1837=($1836&255);
 var $1838=$1837<<8;
 var $1839=$3;
 var $1840=(($1839+2)|0);
 var $1841=HEAP8[($1840)];
 var $1842=($1841&255);
 var $1843=$1838|$1842;
 var $1844=(($1833+$1843)|0);
 $next=$1844;
 var $1845=$6;
 var $1846=(($1845+124)|0);
 var $1847=HEAP32[(($1846)>>2)];
 var $1848=$next;
 var $1849=($1847>>>0)<($1848>>>0);
 if($1849){label=262;break;}else{label=265;break;}
 case 262: 
 var $1851=$3;
 var $1852=HEAP8[($1851)];
 var $1853=($1852&255);
 var $1854=($1853|0)==119;
 if($1854){label=264;break;}else{label=263;break;}
 case 263: 
 var $1856=$next;
 var $1857=HEAP8[($1856)];
 var $1858=($1857&255);
 var $1859=($1858|0)==119;
 if($1859){label=264;break;}else{label=265;break;}
 case 264: 
 $rrc=0;
 label=265;break;
 case 265: 
 label=266;break;
 case 266: 
 var $1863=$rrc;
 var $1864=($1863|0)!=0;
 if($1864){label=267;break;}else{label=268;break;}
 case 267: 
 var $1866=$rrc;
 $1=$1866;
 label=1658;break;
 case 268: 
 var $1868=$3;
 var $1869=(($1868+1)|0);
 var $1870=HEAP8[($1869)];
 var $1871=($1870&255);
 var $1872=$1871<<8;
 var $1873=$3;
 var $1874=(($1873+2)|0);
 var $1875=HEAP8[($1874)];
 var $1876=($1875&255);
 var $1877=$1872|$1876;
 var $1878=$3;
 var $1879=(($1878+$1877)|0);
 $3=$1879;
 label=269;break;
 case 269: 
 var $1881=$3;
 var $1882=HEAP8[($1881)];
 var $1883=($1882&255);
 var $1884=($1883|0)==119;
 if($1884){label=257;break;}else{label=270;break;}
 case 270: 
 var $1886=$3;
 var $1887=HEAP8[($1886)];
 var $1888=($1887&255);
 var $1889=($1888|0)==120;
 if($1889){label=271;break;}else{label=272;break;}
 case 271: 
 $1=0;
 label=1658;break;
 case 272: 
 var $1892=$condition;
 var $1893=($1892|0)!=0;
 if($1893){label=273;break;}else{label=274;break;}
 case 273: 
 $1=1;
 label=1658;break;
 case 274: 
 label=275;break;
 case 275: 
 var $1897=$3;
 var $1898=(($1897+1)|0);
 var $1899=HEAP8[($1898)];
 var $1900=($1899&255);
 var $1901=$1900<<8;
 var $1902=$3;
 var $1903=(($1902+2)|0);
 var $1904=HEAP8[($1903)];
 var $1905=($1904&255);
 var $1906=$1901|$1905;
 var $1907=$3;
 var $1908=(($1907+$1906)|0);
 $3=$1908;
 label=276;break;
 case 276: 
 var $1910=$3;
 var $1911=HEAP8[($1910)];
 var $1912=($1911&255);
 var $1913=($1912|0)==119;
 if($1913){label=275;break;}else{label=277;break;}
 case 277: 
 var $1915=$3;
 var $1916=(($1915+3)|0);
 $3=$1916;
 var $1917=$6;
 var $1918=(($1917+140)|0);
 var $1919=HEAP32[(($1918)>>2)];
 $5=$1919;
 label=16;break;
 case 278: 
 var $1921=$6;
 var $1922=(($1921+172)|0);
 var $1923=HEAP32[(($1922)>>2)];
 $data=$1923;
 var $1924=$6;
 var $1925=(($1924+152)|0);
 var $1926=HEAP32[(($1925)>>2)];
 var $1927=($1926|0)==1;
 if($1927){label=279;break;}else{label=280;break;}
 case 279: 
 $condition=1;
 var $1929=$6;
 var $1930=(($1929+152)|0);
 HEAP32[(($1930)>>2)]=0;
 label=281;break;
 case 280: 
 $condition=0;
 label=281;break;
 case 281: 
 label=282;break;
 case 282: 
 var $1934=$2;
 var $1935=$3;
 var $1936=(($1935+1)|0);
 var $1937=(($1936+2)|0);
 var $1938=$4;
 var $1939=$5;
 var $1940=$6;
 var $1941=HEAP32[(($8)>>2)];
 var $1942=((($1941)+(1))|0);
 var $1943=_match($1934,$1937,$1938,$1939,$1940,0,$1942);
 $rrc=$1943;
 var $1944=$data;
 var $1945=$6;
 var $1946=(($1945+172)|0);
 HEAP32[(($1946)>>2)]=$1944;
 var $1947=$rrc;
 switch(($1947|0)){case 1:case -999:{ label=283;break;}case 0:{ label=284;break;}case -992:{ label=285;break;}case -996:case -994:case -993:case -995:{ label=290;break;}default:{label=294;break;}}break;
 case 283: 
 $1=0;
 label=1658;break;
 case 284: 
 label=295;break;
 case 285: 
 var $1951=$3;
 var $1952=$3;
 var $1953=(($1952+1)|0);
 var $1954=HEAP8[($1953)];
 var $1955=($1954&255);
 var $1956=$1955<<8;
 var $1957=$3;
 var $1958=(($1957+2)|0);
 var $1959=HEAP8[($1958)];
 var $1960=($1959&255);
 var $1961=$1956|$1960;
 var $1962=(($1951+$1961)|0);
 $next=$1962;
 var $1963=$6;
 var $1964=(($1963+124)|0);
 var $1965=HEAP32[(($1964)>>2)];
 var $1966=$next;
 var $1967=($1965>>>0)<($1966>>>0);
 if($1967){label=286;break;}else{label=289;break;}
 case 286: 
 var $1969=$3;
 var $1970=HEAP8[($1969)];
 var $1971=($1970&255);
 var $1972=($1971|0)==119;
 if($1972){label=288;break;}else{label=287;break;}
 case 287: 
 var $1974=$next;
 var $1975=HEAP8[($1974)];
 var $1976=($1975&255);
 var $1977=($1976|0)==119;
 if($1977){label=288;break;}else{label=289;break;}
 case 288: 
 $rrc=0;
 label=295;break;
 case 289: 
 label=290;break;
 case 290: 
 label=291;break;
 case 291: 
 var $1982=$3;
 var $1983=(($1982+1)|0);
 var $1984=HEAP8[($1983)];
 var $1985=($1984&255);
 var $1986=$1985<<8;
 var $1987=$3;
 var $1988=(($1987+2)|0);
 var $1989=HEAP8[($1988)];
 var $1990=($1989&255);
 var $1991=$1986|$1990;
 var $1992=$3;
 var $1993=(($1992+$1991)|0);
 $3=$1993;
 label=292;break;
 case 292: 
 var $1995=$3;
 var $1996=HEAP8[($1995)];
 var $1997=($1996&255);
 var $1998=($1997|0)==119;
 if($1998){label=291;break;}else{label=293;break;}
 case 293: 
 label=298;break;
 case 294: 
 var $2001=$rrc;
 $1=$2001;
 label=1658;break;
 case 295: 
 var $2003=$3;
 var $2004=(($2003+1)|0);
 var $2005=HEAP8[($2004)];
 var $2006=($2005&255);
 var $2007=$2006<<8;
 var $2008=$3;
 var $2009=(($2008+2)|0);
 var $2010=HEAP8[($2009)];
 var $2011=($2010&255);
 var $2012=$2007|$2011;
 var $2013=$3;
 var $2014=(($2013+$2012)|0);
 $3=$2014;
 label=296;break;
 case 296: 
 var $2016=$3;
 var $2017=HEAP8[($2016)];
 var $2018=($2017&255);
 var $2019=($2018|0)==119;
 if($2019){label=282;break;}else{label=297;break;}
 case 297: 
 label=298;break;
 case 298: 
 var $2022=$condition;
 var $2023=($2022|0)!=0;
 if($2023){label=299;break;}else{label=300;break;}
 case 299: 
 $1=1;
 label=1658;break;
 case 300: 
 var $2026=$3;
 var $2027=(($2026+3)|0);
 $3=$2027;
 label=16;break;
 case 301: 
 var $2029=$3;
 var $2030=(($2029+1)|0);
 var $2031=HEAP8[($2030)];
 var $2032=($2031&255);
 var $2033=$2032<<8;
 var $2034=$3;
 var $2035=(($2034+2)|0);
 var $2036=HEAP8[($2035)];
 var $2037=($2036&255);
 var $2038=$2033|$2037;
 var $2039=$2;
 var $2040=(((-$2038))|0);
 var $2041=(($2039+$2040)|0);
 $2=$2041;
 var $2042=$2;
 var $2043=$6;
 var $2044=(($2043+116)|0);
 var $2045=HEAP32[(($2044)>>2)];
 var $2046=($2042>>>0)<($2045>>>0);
 if($2046){label=302;break;}else{label=303;break;}
 case 302: 
 $1=0;
 label=1658;break;
 case 303: 
 var $2049=$2;
 var $2050=$6;
 var $2051=(($2050+132)|0);
 var $2052=HEAP32[(($2051)>>2)];
 var $2053=($2049>>>0)<($2052>>>0);
 if($2053){label=304;break;}else{label=305;break;}
 case 304: 
 var $2055=$2;
 var $2056=$6;
 var $2057=(($2056+132)|0);
 HEAP32[(($2057)>>2)]=$2055;
 label=305;break;
 case 305: 
 var $2059=$3;
 var $2060=(($2059+3)|0);
 $3=$2060;
 label=1657;break;
 case 306: 
 var $2062=HEAP32[((6936)>>2)];
 var $2063=($2062|0)!=0;
 if($2063){label=307;break;}else{label=314;break;}
 case 307: 
 var $2065=(($cb4)|0);
 HEAP32[(($2065)>>2)]=2;
 var $2066=$3;
 var $2067=(($2066+1)|0);
 var $2068=HEAP8[($2067)];
 var $2069=($2068&255);
 var $2070=(($cb4+4)|0);
 HEAP32[(($2070)>>2)]=$2069;
 var $2071=$6;
 var $2072=(($2071+12)|0);
 var $2073=HEAP32[(($2072)>>2)];
 var $2074=(($cb4+8)|0);
 HEAP32[(($2074)>>2)]=$2073;
 var $2075=$6;
 var $2076=(($2075+116)|0);
 var $2077=HEAP32[(($2076)>>2)];
 var $2078=(($cb4+12)|0);
 HEAP32[(($2078)>>2)]=$2077;
 var $2079=$6;
 var $2080=(($2079+120)|0);
 var $2081=HEAP32[(($2080)>>2)];
 var $2082=$6;
 var $2083=(($2082+116)|0);
 var $2084=HEAP32[(($2083)>>2)];
 var $2085=$2081;
 var $2086=$2084;
 var $2087=((($2085)-($2086))|0);
 var $2088=(($cb4+16)|0);
 HEAP32[(($2088)>>2)]=$2087;
 var $2089=$4;
 var $2090=$6;
 var $2091=(($2090+116)|0);
 var $2092=HEAP32[(($2091)>>2)];
 var $2093=$2089;
 var $2094=$2092;
 var $2095=((($2093)-($2094))|0);
 var $2096=(($cb4+20)|0);
 HEAP32[(($2096)>>2)]=$2095;
 var $2097=$2;
 var $2098=$6;
 var $2099=(($2098+116)|0);
 var $2100=HEAP32[(($2099)>>2)];
 var $2101=$2097;
 var $2102=$2100;
 var $2103=((($2101)-($2102))|0);
 var $2104=(($cb4+24)|0);
 HEAP32[(($2104)>>2)]=$2103;
 var $2105=$3;
 var $2106=(($2105+2)|0);
 var $2107=HEAP8[($2106)];
 var $2108=($2107&255);
 var $2109=$2108<<8;
 var $2110=$3;
 var $2111=(($2110+3)|0);
 var $2112=HEAP8[($2111)];
 var $2113=($2112&255);
 var $2114=$2109|$2113;
 var $2115=(($cb4+40)|0);
 HEAP32[(($2115)>>2)]=$2114;
 var $2116=$3;
 var $2117=(($2116+4)|0);
 var $2118=HEAP8[($2117)];
 var $2119=($2118&255);
 var $2120=$2119<<8;
 var $2121=$3;
 var $2122=(($2121+5)|0);
 var $2123=HEAP8[($2122)];
 var $2124=($2123&255);
 var $2125=$2120|$2124;
 var $2126=(($cb4+44)|0);
 HEAP32[(($2126)>>2)]=$2125;
 var $2127=$5;
 var $2128=(((($2127|0))/(2))&-1);
 var $2129=(($cb4+28)|0);
 HEAP32[(($2129)>>2)]=$2128;
 var $2130=$6;
 var $2131=(($2130+144)|0);
 var $2132=HEAP32[(($2131)>>2)];
 var $2133=$2132&65535;
 var $2134=(($cb4+32)|0);
 HEAP32[(($2134)>>2)]=$2133;
 var $2135=(($cb4+32)|0);
 var $2136=HEAP32[(($2135)>>2)];
 var $2137=($2136|0)==0;
 if($2137){label=308;break;}else{label=309;break;}
 case 308: 
 var $2139=(($cb4+32)|0);
 HEAP32[(($2139)>>2)]=-1;
 label=309;break;
 case 309: 
 var $2141=$6;
 var $2142=(($2141+168)|0);
 var $2143=HEAP32[(($2142)>>2)];
 var $2144=(($cb4+36)|0);
 HEAP32[(($2144)>>2)]=$2143;
 var $2145=$6;
 var $2146=(($2145+176)|0);
 var $2147=HEAP32[(($2146)>>2)];
 var $2148=(($cb4+48)|0);
 HEAP32[(($2148)>>2)]=$2147;
 var $2149=HEAP32[((6936)>>2)];
 var $2150=FUNCTION_TABLE[$2149]($cb4);
 $rrc=$2150;
 var $2151=($2150|0)>0;
 if($2151){label=310;break;}else{label=311;break;}
 case 310: 
 $1=0;
 label=1658;break;
 case 311: 
 var $2154=$rrc;
 var $2155=($2154|0)<0;
 if($2155){label=312;break;}else{label=313;break;}
 case 312: 
 var $2157=$rrc;
 $1=$2157;
 label=1658;break;
 case 313: 
 label=314;break;
 case 314: 
 var $2160=$3;
 var $2161=(($2160+6)|0);
 $3=$2161;
 label=1657;break;
 case 315: 
 var $2163=$6;
 var $2164=(($2163+112)|0);
 var $2165=HEAP32[(($2164)>>2)];
 var $2166=$3;
 var $2167=(($2166+1)|0);
 var $2168=HEAP8[($2167)];
 var $2169=($2168&255);
 var $2170=$2169<<8;
 var $2171=$3;
 var $2172=(($2171+2)|0);
 var $2173=HEAP8[($2172)];
 var $2174=($2173&255);
 var $2175=$2170|$2174;
 var $2176=(($2165+$2175)|0);
 $callpat=$2176;
 var $2177=$callpat;
 var $2178=$6;
 var $2179=(($2178+112)|0);
 var $2180=HEAP32[(($2179)>>2)];
 var $2181=($2177|0)==($2180|0);
 if($2181){label=316;break;}else{label=317;break;}
 case 316: 
 var $2195=0;label=318;break;
 case 317: 
 var $2184=$callpat;
 var $2185=(($2184+3)|0);
 var $2186=HEAP8[($2185)];
 var $2187=($2186&255);
 var $2188=$2187<<8;
 var $2189=$callpat;
 var $2190=(($2189+4)|0);
 var $2191=HEAP8[($2190)];
 var $2192=($2191&255);
 var $2193=$2188|$2192;
 var $2195=$2193;label=318;break;
 case 318: 
 var $2195;
 $recno5=$2195;
 var $2196=$6;
 var $2197=(($2196+164)|0);
 var $2198=HEAP32[(($2197)>>2)];
 $ri=$2198;
 label=319;break;
 case 319: 
 var $2200=$ri;
 var $2201=($2200|0)!=0;
 if($2201){label=320;break;}else{label=325;break;}
 case 320: 
 var $2203=$recno5;
 var $2204=$ri;
 var $2205=(($2204+4)|0);
 var $2206=HEAP32[(($2205)>>2)];
 var $2207=($2203|0)==($2206|0);
 if($2207){label=321;break;}else{label=323;break;}
 case 321: 
 var $2209=$2;
 var $2210=$ri;
 var $2211=(($2210+20)|0);
 var $2212=HEAP32[(($2211)>>2)];
 var $2213=($2209|0)==($2212|0);
 if($2213){label=322;break;}else{label=323;break;}
 case 322: 
 $1=-26;
 label=1658;break;
 case 323: 
 label=324;break;
 case 324: 
 var $2217=$ri;
 var $2218=(($2217)|0);
 var $2219=HEAP32[(($2218)>>2)];
 $ri=$2219;
 label=319;break;
 case 325: 
 var $2221=$recno5;
 var $2222=(($new_recursive+4)|0);
 HEAP32[(($2222)>>2)]=$2221;
 var $2223=$6;
 var $2224=(($2223+144)|0);
 var $2225=HEAP32[(($2224)>>2)];
 var $2226=(($new_recursive+16)|0);
 HEAP32[(($2226)>>2)]=$2225;
 var $2227=$2;
 var $2228=(($new_recursive+20)|0);
 HEAP32[(($2228)>>2)]=$2227;
 var $2229=$6;
 var $2230=(($2229+164)|0);
 var $2231=HEAP32[(($2230)>>2)];
 var $2232=(($new_recursive)|0);
 HEAP32[(($2232)>>2)]=$2231;
 var $2233=$6;
 var $2234=(($2233+164)|0);
 HEAP32[(($2234)>>2)]=$new_recursive;
 var $2235=$3;
 var $2236=(($2235+3)|0);
 $3=$2236;
 var $2237=$6;
 var $2238=(($2237+16)|0);
 var $2239=HEAP32[(($2238)>>2)];
 var $2240=(($new_recursive+12)|0);
 HEAP32[(($2240)>>2)]=$2239;
 var $2241=(($new_recursive+12)|0);
 var $2242=HEAP32[(($2241)>>2)];
 var $2243=($2242|0)<=30;
 if($2243){label=326;break;}else{label=327;break;}
 case 326: 
 var $2245=(($stacksave)|0);
 var $2246=(($new_recursive+8)|0);
 HEAP32[(($2246)>>2)]=$2245;
 label=330;break;
 case 327: 
 var $2248=HEAP32[((504)>>2)];
 var $2249=(($new_recursive+12)|0);
 var $2250=HEAP32[(($2249)>>2)];
 var $2251=($2250<<2);
 var $2252=FUNCTION_TABLE[$2248]($2251);
 var $2253=$2252;
 var $2254=(($new_recursive+8)|0);
 HEAP32[(($2254)>>2)]=$2253;
 var $2255=(($new_recursive+8)|0);
 var $2256=HEAP32[(($2255)>>2)];
 var $2257=($2256|0)==0;
 if($2257){label=328;break;}else{label=329;break;}
 case 328: 
 $1=-6;
 label=1658;break;
 case 329: 
 label=330;break;
 case 330: 
 var $2261=(($new_recursive+8)|0);
 var $2262=HEAP32[(($2261)>>2)];
 var $2263=$2262;
 var $2264=$6;
 var $2265=(($2264+12)|0);
 var $2266=HEAP32[(($2265)>>2)];
 var $2267=$2266;
 var $2268=(($new_recursive+12)|0);
 var $2269=HEAP32[(($2268)>>2)];
 var $2270=($2269<<2);
 assert($2270 % 1 === 0);(_memcpy($2263, $2267, $2270)|0);
 var $2271=$callpat;
 var $2272=HEAP8[($2271)];
 var $2273=($2272&255);
 var $2274=($2273|0)>=136;
 var $2275=($2274&1);
 $condition=$2275;
 label=331;break;
 case 331: 
 var $2277=$condition;
 var $2278=($2277|0)!=0;
 if($2278){label=332;break;}else{label=333;break;}
 case 332: 
 var $2280=$6;
 var $2281=(($2280+152)|0);
 HEAP32[(($2281)>>2)]=2;
 label=333;break;
 case 333: 
 var $2283=$2;
 var $2284=$callpat;
 var $2285=$callpat;
 var $2286=HEAP8[($2285)];
 var $2287=($2286&255);
 var $2288=((6760+$2287)|0);
 var $2289=HEAP8[($2288)];
 var $2290=($2289&255);
 var $2291=(($2284+$2290)|0);
 var $2292=$4;
 var $2293=$5;
 var $2294=$6;
 var $2295=$7;
 var $2296=HEAP32[(($8)>>2)];
 var $2297=((($2296)+(1))|0);
 var $2298=_match($2283,$2291,$2292,$2293,$2294,$2295,$2297);
 $rrc=$2298;
 var $2299=$6;
 var $2300=(($2299+12)|0);
 var $2301=HEAP32[(($2300)>>2)];
 var $2302=$2301;
 var $2303=(($new_recursive+8)|0);
 var $2304=HEAP32[(($2303)>>2)];
 var $2305=$2304;
 var $2306=(($new_recursive+12)|0);
 var $2307=HEAP32[(($2306)>>2)];
 var $2308=($2307<<2);
 assert($2308 % 1 === 0);(_memcpy($2302, $2305, $2308)|0);
 var $2309=(($new_recursive+16)|0);
 var $2310=HEAP32[(($2309)>>2)];
 var $2311=$6;
 var $2312=(($2311+144)|0);
 HEAP32[(($2312)>>2)]=$2310;
 var $2313=(($new_recursive)|0);
 var $2314=HEAP32[(($2313)>>2)];
 var $2315=$6;
 var $2316=(($2315+164)|0);
 HEAP32[(($2316)>>2)]=$2314;
 var $2317=$rrc;
 var $2318=($2317|0)==1;
 if($2318){label=335;break;}else{label=334;break;}
 case 334: 
 var $2320=$rrc;
 var $2321=($2320|0)==-999;
 if($2321){label=335;break;}else{label=338;break;}
 case 335: 
 var $2323=(($new_recursive+8)|0);
 var $2324=HEAP32[(($2323)>>2)];
 var $2325=(($stacksave)|0);
 var $2326=($2324|0)!=($2325|0);
 if($2326){label=336;break;}else{label=337;break;}
 case 336: 
 var $2328=HEAP32[((512)>>2)];
 var $2329=(($new_recursive+8)|0);
 var $2330=HEAP32[(($2329)>>2)];
 var $2331=$2330;
 FUNCTION_TABLE[$2328]($2331);
 label=337;break;
 case 337: 
 var $2333=$6;
 var $2334=(($2333+128)|0);
 var $2335=HEAP32[(($2334)>>2)];
 $2=$2335;
 var $2336=$6;
 var $2337=(($2336+124)|0);
 var $2338=HEAP32[(($2337)>>2)];
 $4=$2338;
 label=350;break;
 case 338: 
 var $2340=$rrc;
 var $2341=($2340|0)>=-996;
 if($2341){label=339;break;}else{label=341;break;}
 case 339: 
 var $2343=$rrc;
 var $2344=($2343|0)<=-992;
 if($2344){label=340;break;}else{label=341;break;}
 case 340: 
 $1=0;
 label=1658;break;
 case 341: 
 var $2347=$rrc;
 var $2348=($2347|0)!=0;
 if($2348){label=342;break;}else{label=345;break;}
 case 342: 
 var $2350=(($new_recursive+8)|0);
 var $2351=HEAP32[(($2350)>>2)];
 var $2352=(($stacksave)|0);
 var $2353=($2351|0)!=($2352|0);
 if($2353){label=343;break;}else{label=344;break;}
 case 343: 
 var $2355=HEAP32[((512)>>2)];
 var $2356=(($new_recursive+8)|0);
 var $2357=HEAP32[(($2356)>>2)];
 var $2358=$2357;
 FUNCTION_TABLE[$2355]($2358);
 label=344;break;
 case 344: 
 var $2360=$rrc;
 $1=$2360;
 label=1658;break;
 case 345: 
 var $2362=$6;
 var $2363=(($2362+164)|0);
 HEAP32[(($2363)>>2)]=$new_recursive;
 var $2364=$callpat;
 var $2365=(($2364+1)|0);
 var $2366=HEAP8[($2365)];
 var $2367=($2366&255);
 var $2368=$2367<<8;
 var $2369=$callpat;
 var $2370=(($2369+2)|0);
 var $2371=HEAP8[($2370)];
 var $2372=($2371&255);
 var $2373=$2368|$2372;
 var $2374=$callpat;
 var $2375=(($2374+$2373)|0);
 $callpat=$2375;
 label=346;break;
 case 346: 
 var $2377=$callpat;
 var $2378=HEAP8[($2377)];
 var $2379=($2378&255);
 var $2380=($2379|0)==119;
 if($2380){label=331;break;}else{label=347;break;}
 case 347: 
 var $2382=(($new_recursive)|0);
 var $2383=HEAP32[(($2382)>>2)];
 var $2384=$6;
 var $2385=(($2384+164)|0);
 HEAP32[(($2385)>>2)]=$2383;
 var $2386=(($new_recursive+8)|0);
 var $2387=HEAP32[(($2386)>>2)];
 var $2388=(($stacksave)|0);
 var $2389=($2387|0)!=($2388|0);
 if($2389){label=348;break;}else{label=349;break;}
 case 348: 
 var $2391=HEAP32[((512)>>2)];
 var $2392=(($new_recursive+8)|0);
 var $2393=HEAP32[(($2392)>>2)];
 var $2394=$2393;
 FUNCTION_TABLE[$2391]($2394);
 label=349;break;
 case 349: 
 $1=0;
 label=1658;break;
 case 350: 
 label=1657;break;
 case 351: 
 label=352;break;
 case 352: 
 var $2399=$3;
 var $2400=(($2399+1)|0);
 var $2401=HEAP8[($2400)];
 var $2402=($2401&255);
 var $2403=$2402<<8;
 var $2404=$3;
 var $2405=(($2404+2)|0);
 var $2406=HEAP8[($2405)];
 var $2407=($2406&255);
 var $2408=$2403|$2407;
 var $2409=$3;
 var $2410=(($2409+$2408)|0);
 $3=$2410;
 label=353;break;
 case 353: 
 var $2412=$3;
 var $2413=HEAP8[($2412)];
 var $2414=($2413&255);
 var $2415=($2414|0)==119;
 if($2415){label=352;break;}else{label=354;break;}
 case 354: 
 label=1657;break;
 case 355: 
 var $2418=$3;
 var $2419=(($2418+1)|0);
 $next=$2419;
 var $2420=$2;
 var $2421=$next;
 var $2422=$4;
 var $2423=$5;
 var $2424=$6;
 var $2425=$7;
 var $2426=HEAP32[(($8)>>2)];
 var $2427=((($2426)+(1))|0);
 var $2428=_match($2420,$2421,$2422,$2423,$2424,$2425,$2427);
 $rrc=$2428;
 var $2429=$rrc;
 var $2430=($2429|0)!=0;
 if($2430){label=356;break;}else{label=357;break;}
 case 356: 
 var $2432=$rrc;
 $1=$2432;
 label=1658;break;
 case 357: 
 label=358;break;
 case 358: 
 var $2435=$next;
 var $2436=(($2435+1)|0);
 var $2437=HEAP8[($2436)];
 var $2438=($2437&255);
 var $2439=$2438<<8;
 var $2440=$next;
 var $2441=(($2440+2)|0);
 var $2442=HEAP8[($2441)];
 var $2443=($2442&255);
 var $2444=$2439|$2443;
 var $2445=$next;
 var $2446=(($2445+$2444)|0);
 $next=$2446;
 label=359;break;
 case 359: 
 var $2448=$next;
 var $2449=HEAP8[($2448)];
 var $2450=($2449&255);
 var $2451=($2450|0)==119;
 if($2451){label=358;break;}else{label=360;break;}
 case 360: 
 var $2453=$next;
 var $2454=(($2453+1)|0);
 var $2455=(($2454+2)|0);
 $3=$2455;
 label=1657;break;
 case 361: 
 var $2457=$3;
 var $2458=(($2457+1)|0);
 $next=$2458;
 label=362;break;
 case 362: 
 var $2460=$next;
 var $2461=(($2460+1)|0);
 var $2462=HEAP8[($2461)];
 var $2463=($2462&255);
 var $2464=$2463<<8;
 var $2465=$next;
 var $2466=(($2465+2)|0);
 var $2467=HEAP8[($2466)];
 var $2468=($2467&255);
 var $2469=$2464|$2468;
 var $2470=$next;
 var $2471=(($2470+$2469)|0);
 $next=$2471;
 label=363;break;
 case 363: 
 var $2473=$next;
 var $2474=HEAP8[($2473)];
 var $2475=($2474&255);
 var $2476=($2475|0)==119;
 if($2476){label=362;break;}else{label=364;break;}
 case 364: 
 var $2478=$2;
 var $2479=$next;
 var $2480=(($2479+1)|0);
 var $2481=(($2480+2)|0);
 var $2482=$4;
 var $2483=$5;
 var $2484=$6;
 var $2485=$7;
 var $2486=HEAP32[(($8)>>2)];
 var $2487=((($2486)+(1))|0);
 var $2488=_match($2478,$2481,$2482,$2483,$2484,$2485,$2487);
 $rrc=$2488;
 var $2489=$rrc;
 var $2490=($2489|0)!=0;
 if($2490){label=365;break;}else{label=366;break;}
 case 365: 
 var $2492=$rrc;
 $1=$2492;
 label=1658;break;
 case 366: 
 var $2494=$3;
 var $2495=(($2494+1)|0);
 $3=$2495;
 label=1657;break;
 case 367: 
 var $2497=$3;
 var $2498=(($2497+1)|0);
 $next=$2498;
 label=368;break;
 case 368: 
 var $2500=$next;
 var $2501=(($2500+1)|0);
 var $2502=HEAP8[($2501)];
 var $2503=($2502&255);
 var $2504=$2503<<8;
 var $2505=$next;
 var $2506=(($2505+2)|0);
 var $2507=HEAP8[($2506)];
 var $2508=($2507&255);
 var $2509=$2504|$2508;
 var $2510=$next;
 var $2511=(($2510+$2509)|0);
 $next=$2511;
 label=369;break;
 case 369: 
 var $2513=$next;
 var $2514=HEAP8[($2513)];
 var $2515=($2514&255);
 var $2516=($2515|0)==119;
 if($2516){label=368;break;}else{label=370;break;}
 case 370: 
 var $2518=$next;
 var $2519=(($2518+1)|0);
 var $2520=(($2519+2)|0);
 $3=$2520;
 label=1657;break;
 case 371: 
 var $2522=$3;
 var $2523=(($2522+1)|0);
 $3=$2523;
 var $2524=HEAP8[($2523)];
 var $2525=($2524&255);
 $op=$2525;
 $cur_is_word=1;
 var $2526=$op;
 var $2527=($2526|0)==134;
 if($2527){label=373;break;}else{label=372;break;}
 case 372: 
 var $2529=$op;
 var $2530=($2529|0)==139;
 if($2530){label=373;break;}else{label=374;break;}
 case 373: 
 label=136;break;
 case 374: 
 label=161;break;
 case 375: 
 var $2534=$3;
 var $2535=$3;
 var $2536=(($2535+1)|0);
 var $2537=HEAP8[($2536)];
 var $2538=($2537&255);
 var $2539=$2538<<8;
 var $2540=$3;
 var $2541=(($2540+2)|0);
 var $2542=HEAP8[($2541)];
 var $2543=($2542&255);
 var $2544=$2539|$2543;
 var $2545=(((-$2544))|0);
 var $2546=(($2534+$2545)|0);
 $prev=$2546;
 var $2547=$prev;
 var $2548=HEAP8[($2547)];
 var $2549=($2548&255);
 var $2550=($2549|0)>=136;
 if($2550){label=377;break;}else{label=376;break;}
 case 376: 
 var $2552=$prev;
 var $2553=HEAP8[($2552)];
 var $2554=($2553&255);
 var $2555=($2554|0)==129;
 if($2555){label=377;break;}else{label=378;break;}
 case 377: 
 var $2557=$7;
 var $2558=(($2557+4)|0);
 var $2559=HEAP32[(($2558)>>2)];
 $saved_eptr=$2559;
 var $2560=$7;
 var $2561=(($2560)|0);
 var $2562=HEAP32[(($2561)>>2)];
 $7=$2562;
 label=379;break;
 case 378: 
 $saved_eptr=0;
 label=379;break;
 case 379: 
 var $2565=$prev;
 var $2566=HEAP8[($2565)];
 var $2567=($2566&255);
 var $2568=($2567|0)>=125;
 if($2568){label=380;break;}else{label=381;break;}
 case 380: 
 var $2570=$prev;
 var $2571=HEAP8[($2570)];
 var $2572=($2571&255);
 var $2573=($2572|0)<=128;
 if($2573){label=382;break;}else{label=381;break;}
 case 381: 
 var $2575=$prev;
 var $2576=HEAP8[($2575)];
 var $2577=($2576&255);
 var $2578=($2577|0)==130;
 if($2578){label=382;break;}else{label=383;break;}
 case 382: 
 var $2580=$2;
 var $2581=$6;
 var $2582=(($2581+128)|0);
 HEAP32[(($2582)>>2)]=$2580;
 var $2583=$5;
 var $2584=$6;
 var $2585=(($2584+140)|0);
 HEAP32[(($2585)>>2)]=$2583;
 var $2586=$4;
 var $2587=$6;
 var $2588=(($2587+124)|0);
 HEAP32[(($2588)>>2)]=$2586;
 $1=1;
 label=1658;break;
 case 383: 
 var $2590=$prev;
 var $2591=HEAP8[($2590)];
 var $2592=($2591&255);
 var $2593=($2592|0)==133;
 if($2593){label=387;break;}else{label=384;break;}
 case 384: 
 var $2595=$prev;
 var $2596=HEAP8[($2595)];
 var $2597=($2596&255);
 var $2598=($2597|0)==138;
 if($2598){label=387;break;}else{label=385;break;}
 case 385: 
 var $2600=$prev;
 var $2601=HEAP8[($2600)];
 var $2602=($2601&255);
 var $2603=($2602|0)==134;
 if($2603){label=387;break;}else{label=386;break;}
 case 386: 
 var $2605=$prev;
 var $2606=HEAP8[($2605)];
 var $2607=($2606&255);
 var $2608=($2607|0)==139;
 if($2608){label=387;break;}else{label=401;break;}
 case 387: 
 var $2610=$prev;
 var $2611=(($2610+3)|0);
 var $2612=HEAP8[($2611)];
 var $2613=($2612&255);
 var $2614=$2613<<8;
 var $2615=$prev;
 var $2616=(($2615+4)|0);
 var $2617=HEAP8[($2616)];
 var $2618=($2617&255);
 var $2619=$2614|$2618;
 $number=$2619;
 var $2620=$number;
 var $2621=$2620<<1;
 $offset=$2621;
 var $2622=$6;
 var $2623=(($2622+164)|0);
 var $2624=HEAP32[(($2623)>>2)];
 var $2625=($2624|0)!=0;
 if($2625){label=388;break;}else{label=390;break;}
 case 388: 
 var $2627=$6;
 var $2628=(($2627+164)|0);
 var $2629=HEAP32[(($2628)>>2)];
 var $2630=(($2629+4)|0);
 var $2631=HEAP32[(($2630)>>2)];
 var $2632=$number;
 var $2633=($2631|0)==($2632|0);
 if($2633){label=389;break;}else{label=390;break;}
 case 389: 
 var $2635=$2;
 var $2636=$6;
 var $2637=(($2636+128)|0);
 HEAP32[(($2637)>>2)]=$2635;
 var $2638=$4;
 var $2639=$6;
 var $2640=(($2639+124)|0);
 HEAP32[(($2640)>>2)]=$2638;
 $1=1;
 label=1658;break;
 case 390: 
 var $2642=$6;
 var $2643=(($2642+144)|0);
 var $2644=HEAP32[(($2643)>>2)];
 var $2645=$2644&-65536;
 var $2646=$number;
 var $2647=$2645|$2646;
 var $2648=$6;
 var $2649=(($2648+144)|0);
 HEAP32[(($2649)>>2)]=$2647;
 var $2650=$offset;
 var $2651=$6;
 var $2652=(($2651+20)|0);
 var $2653=HEAP32[(($2652)>>2)];
 var $2654=($2650|0)>=($2653|0);
 if($2654){label=391;break;}else{label=392;break;}
 case 391: 
 var $2656=$6;
 var $2657=(($2656+144)|0);
 var $2658=HEAP32[(($2657)>>2)];
 var $2659=$2658|65536;
 HEAP32[(($2657)>>2)]=$2659;
 label=400;break;
 case 392: 
 var $2661=$offset;
 var $2662=$5;
 var $2663=($2661|0)>($2662|0);
 if($2663){label=393;break;}else{label=397;break;}
 case 393: 
 var $2665=$6;
 var $2666=(($2665+12)|0);
 var $2667=HEAP32[(($2666)>>2)];
 var $2668=$5;
 var $2669=(($2667+($2668<<2))|0);
 $iptr=$2669;
 var $2670=$6;
 var $2671=(($2670+12)|0);
 var $2672=HEAP32[(($2671)>>2)];
 var $2673=$offset;
 var $2674=(($2672+($2673<<2))|0);
 $iend=$2674;
 label=394;break;
 case 394: 
 var $2676=$iptr;
 var $2677=$iend;
 var $2678=($2676>>>0)<($2677>>>0);
 if($2678){label=395;break;}else{label=396;break;}
 case 395: 
 var $2680=$iptr;
 var $2681=(($2680+4)|0);
 $iptr=$2681;
 HEAP32[(($2680)>>2)]=-1;
 label=394;break;
 case 396: 
 label=397;break;
 case 397: 
 var $2684=$6;
 var $2685=(($2684+16)|0);
 var $2686=HEAP32[(($2685)>>2)];
 var $2687=$number;
 var $2688=((($2686)-($2687))|0);
 var $2689=$6;
 var $2690=(($2689+12)|0);
 var $2691=HEAP32[(($2690)>>2)];
 var $2692=(($2691+($2688<<2))|0);
 var $2693=HEAP32[(($2692)>>2)];
 var $2694=$offset;
 var $2695=$6;
 var $2696=(($2695+12)|0);
 var $2697=HEAP32[(($2696)>>2)];
 var $2698=(($2697+($2694<<2))|0);
 HEAP32[(($2698)>>2)]=$2693;
 var $2699=$2;
 var $2700=$6;
 var $2701=(($2700+116)|0);
 var $2702=HEAP32[(($2701)>>2)];
 var $2703=$2699;
 var $2704=$2702;
 var $2705=((($2703)-($2704))|0);
 var $2706=$offset;
 var $2707=((($2706)+(1))|0);
 var $2708=$6;
 var $2709=(($2708+12)|0);
 var $2710=HEAP32[(($2709)>>2)];
 var $2711=(($2710+($2707<<2))|0);
 HEAP32[(($2711)>>2)]=$2705;
 var $2712=$5;
 var $2713=$offset;
 var $2714=($2712|0)<=($2713|0);
 if($2714){label=398;break;}else{label=399;break;}
 case 398: 
 var $2716=$offset;
 var $2717=((($2716)+(2))|0);
 $5=$2717;
 label=399;break;
 case 399: 
 label=400;break;
 case 400: 
 label=401;break;
 case 401: 
 var $2721=$3;
 var $2722=HEAP8[($2721)];
 var $2723=($2722&255);
 var $2724=($2723|0)==120;
 if($2724){label=403;break;}else{label=402;break;}
 case 402: 
 var $2726=$2;
 var $2727=$saved_eptr;
 var $2728=($2726|0)==($2727|0);
 if($2728){label=403;break;}else{label=408;break;}
 case 403: 
 var $2730=$prev;
 var $2731=HEAP8[($2730)];
 var $2732=($2731&255);
 var $2733=($2732|0)==129;
 if($2733){label=404;break;}else{label=407;break;}
 case 404: 
 var $2735=$2;
 var $2736=$3;
 var $2737=(($2736+1)|0);
 var $2738=(($2737+2)|0);
 var $2739=$4;
 var $2740=$5;
 var $2741=$6;
 var $2742=$7;
 var $2743=HEAP32[(($8)>>2)];
 var $2744=((($2743)+(1))|0);
 var $2745=_match($2735,$2738,$2739,$2740,$2741,$2742,$2744);
 $rrc=$2745;
 var $2746=$rrc;
 var $2747=($2746|0)!=0;
 if($2747){label=405;break;}else{label=406;break;}
 case 405: 
 var $2749=$rrc;
 $1=$2749;
 label=1658;break;
 case 406: 
 var $2751=$prev;
 var $2752=$6;
 var $2753=(($2752+180)|0);
 HEAP32[(($2753)>>2)]=$2751;
 $1=-997;
 label=1658;break;
 case 407: 
 var $2755=$3;
 var $2756=(($2755+3)|0);
 $3=$2756;
 label=1657;break;
 case 408: 
 var $2758=$3;
 var $2759=HEAP8[($2758)];
 var $2760=($2759&255);
 var $2761=($2760|0)==123;
 if($2761){label=409;break;}else{label=410;break;}
 case 409: 
 var $2763=$4;
 var $2764=$6;
 var $2765=(($2764+124)|0);
 HEAP32[(($2765)>>2)]=$2763;
 var $2766=$2;
 var $2767=$6;
 var $2768=(($2767+128)|0);
 HEAP32[(($2768)>>2)]=$2766;
 var $2769=$5;
 var $2770=$6;
 var $2771=(($2770+140)|0);
 HEAP32[(($2771)>>2)]=$2769;
 $1=-998;
 label=1658;break;
 case 410: 
 var $2773=$3;
 var $2774=HEAP8[($2773)];
 var $2775=($2774&255);
 var $2776=($2775|0)==122;
 if($2776){label=411;break;}else{label=420;break;}
 case 411: 
 var $2778=$2;
 var $2779=$3;
 var $2780=(($2779+1)|0);
 var $2781=(($2780+2)|0);
 var $2782=$4;
 var $2783=$5;
 var $2784=$6;
 var $2785=$7;
 var $2786=HEAP32[(($8)>>2)];
 var $2787=((($2786)+(1))|0);
 var $2788=_match($2778,$2781,$2782,$2783,$2784,$2785,$2787);
 $rrc=$2788;
 var $2789=$rrc;
 var $2790=($2789|0)!=0;
 if($2790){label=412;break;}else{label=413;break;}
 case 412: 
 var $2792=$rrc;
 $1=$2792;
 label=1658;break;
 case 413: 
 var $2794=$prev;
 var $2795=HEAP8[($2794)];
 var $2796=($2795&255);
 var $2797=($2796|0)==129;
 if($2797){label=414;break;}else{label=417;break;}
 case 414: 
 var $2799=$2;
 var $2800=$prev;
 var $2801=$4;
 var $2802=$5;
 var $2803=$6;
 var $2804=$7;
 var $2805=HEAP32[(($8)>>2)];
 var $2806=((($2805)+(1))|0);
 var $2807=_match($2799,$2800,$2801,$2802,$2803,$2804,$2806);
 $rrc=$2807;
 var $2808=$rrc;
 var $2809=($2808|0)!=0;
 if($2809){label=415;break;}else{label=416;break;}
 case 415: 
 var $2811=$rrc;
 $1=$2811;
 label=1658;break;
 case 416: 
 var $2813=$prev;
 var $2814=$6;
 var $2815=(($2814+180)|0);
 HEAP32[(($2815)>>2)]=$2813;
 $1=-997;
 label=1658;break;
 case 417: 
 var $2817=$prev;
 var $2818=HEAP8[($2817)];
 var $2819=($2818&255);
 var $2820=($2819|0)>=136;
 if($2820){label=418;break;}else{label=419;break;}
 case 418: 
 var $2822=$2;
 var $2823=$prev;
 var $2824=$4;
 var $2825=$5;
 var $2826=$6;
 var $2827=$7;
 var $2828=HEAP32[(($8)>>2)];
 var $2829=((($2828)+(1))|0);
 var $2830=_match($2822,$2823,$2824,$2825,$2826,$2827,$2829);
 $rrc=$2830;
 var $2831=$rrc;
 $1=$2831;
 label=1658;break;
 case 419: 
 var $2833=$prev;
 $3=$2833;
 label=9;break;
 case 420: 
 var $2835=$2;
 var $2836=$prev;
 var $2837=$4;
 var $2838=$5;
 var $2839=$6;
 var $2840=$7;
 var $2841=HEAP32[(($8)>>2)];
 var $2842=((($2841)+(1))|0);
 var $2843=_match($2835,$2836,$2837,$2838,$2839,$2840,$2842);
 $rrc=$2843;
 var $2844=$rrc;
 var $2845=($2844|0)==-997;
 if($2845){label=421;break;}else{label=423;break;}
 case 421: 
 var $2847=$6;
 var $2848=(($2847+180)|0);
 var $2849=HEAP32[(($2848)>>2)];
 var $2850=$prev;
 var $2851=($2849|0)==($2850|0);
 if($2851){label=422;break;}else{label=423;break;}
 case 422: 
 $rrc=0;
 label=423;break;
 case 423: 
 var $2854=$rrc;
 var $2855=($2854|0)!=0;
 if($2855){label=424;break;}else{label=425;break;}
 case 424: 
 var $2857=$rrc;
 $1=$2857;
 label=1658;break;
 case 425: 
 var $2859=$prev;
 var $2860=HEAP8[($2859)];
 var $2861=($2860&255);
 var $2862=($2861|0)==129;
 if($2862){label=426;break;}else{label=429;break;}
 case 426: 
 var $2864=$2;
 var $2865=$3;
 var $2866=(($2865+1)|0);
 var $2867=(($2866+2)|0);
 var $2868=$4;
 var $2869=$5;
 var $2870=$6;
 var $2871=$7;
 var $2872=HEAP32[(($8)>>2)];
 var $2873=((($2872)+(1))|0);
 var $2874=_match($2864,$2867,$2868,$2869,$2870,$2871,$2873);
 $rrc=$2874;
 var $2875=$rrc;
 var $2876=($2875|0)!=0;
 if($2876){label=427;break;}else{label=428;break;}
 case 427: 
 var $2878=$rrc;
 $1=$2878;
 label=1658;break;
 case 428: 
 var $2880=$prev;
 var $2881=$6;
 var $2882=(($2881+180)|0);
 HEAP32[(($2882)>>2)]=$2880;
 $1=-997;
 label=1658;break;
 case 429: 
 var $2884=$3;
 var $2885=(($2884+3)|0);
 $3=$2885;
 label=9;break;
 case 430: 
 var $2887=$6;
 var $2888=(($2887+68)|0);
 var $2889=HEAP32[(($2888)>>2)];
 var $2890=($2889|0)!=0;
 if($2890){label=431;break;}else{label=433;break;}
 case 431: 
 var $2892=$2;
 var $2893=$6;
 var $2894=(($2893+116)|0);
 var $2895=HEAP32[(($2894)>>2)];
 var $2896=($2892|0)==($2895|0);
 if($2896){label=432;break;}else{label=433;break;}
 case 432: 
 $1=0;
 label=1658;break;
 case 433: 
 label=434;break;
 case 434: 
 var $2900=$2;
 var $2901=$6;
 var $2902=(($2901+116)|0);
 var $2903=HEAP32[(($2902)>>2)];
 var $2904=($2900|0)!=($2903|0);
 if($2904){label=435;break;}else{label=436;break;}
 case 435: 
 $1=0;
 label=1658;break;
 case 436: 
 var $2907=$3;
 var $2908=(($2907+1)|0);
 $3=$2908;
 label=1657;break;
 case 437: 
 var $2910=$6;
 var $2911=(($2910+68)|0);
 var $2912=HEAP32[(($2911)>>2)];
 var $2913=($2912|0)!=0;
 if($2913){label=438;break;}else{label=440;break;}
 case 438: 
 var $2915=$2;
 var $2916=$6;
 var $2917=(($2916+116)|0);
 var $2918=HEAP32[(($2917)>>2)];
 var $2919=($2915|0)==($2918|0);
 if($2919){label=439;break;}else{label=440;break;}
 case 439: 
 $1=0;
 label=1658;break;
 case 440: 
 var $2922=$2;
 var $2923=$6;
 var $2924=(($2923+116)|0);
 var $2925=HEAP32[(($2924)>>2)];
 var $2926=($2922|0)!=($2925|0);
 if($2926){label=441;break;}else{label=450;break;}
 case 441: 
 var $2928=$2;
 var $2929=$6;
 var $2930=(($2929+120)|0);
 var $2931=HEAP32[(($2930)>>2)];
 var $2932=($2928|0)==($2931|0);
 if($2932){label=449;break;}else{label=442;break;}
 case 442: 
 var $2934=$6;
 var $2935=(($2934+24)|0);
 var $2936=HEAP32[(($2935)>>2)];
 var $2937=($2936|0)!=0;
 if($2937){label=443;break;}else{label=445;break;}
 case 443: 
 var $2939=$2;
 var $2940=$6;
 var $2941=(($2940+116)|0);
 var $2942=HEAP32[(($2941)>>2)];
 var $2943=($2939>>>0)>($2942>>>0);
 if($2943){label=444;break;}else{label=449;break;}
 case 444: 
 var $2945=$2;
 var $2946=$6;
 var $2947=(($2946+24)|0);
 var $2948=HEAP32[(($2947)>>2)];
 var $2949=$6;
 var $2950=(($2949+116)|0);
 var $2951=HEAP32[(($2950)>>2)];
 var $2952=$6;
 var $2953=(($2952+28)|0);
 var $2954=$utf;
 var $2955=__pcre_was_newline($2945,$2948,$2951,$2953,$2954);
 var $2956=($2955|0)!=0;
 if($2956){label=450;break;}else{label=449;break;}
 case 445: 
 var $2958=$2;
 var $2959=$6;
 var $2960=(($2959+116)|0);
 var $2961=HEAP32[(($2960)>>2)];
 var $2962=$6;
 var $2963=(($2962+28)|0);
 var $2964=HEAP32[(($2963)>>2)];
 var $2965=(($2961+$2964)|0);
 var $2966=($2958>>>0)>=($2965>>>0);
 if($2966){label=446;break;}else{label=449;break;}
 case 446: 
 var $2968=$2;
 var $2969=$6;
 var $2970=(($2969+28)|0);
 var $2971=HEAP32[(($2970)>>2)];
 var $2972=(((-$2971))|0);
 var $2973=(($2968+$2972)|0);
 var $2974=HEAP8[($2973)];
 var $2975=($2974&255);
 var $2976=$6;
 var $2977=(($2976+52)|0);
 var $2978=(($2977)|0);
 var $2979=HEAP8[($2978)];
 var $2980=($2979&255);
 var $2981=($2975|0)==($2980|0);
 if($2981){label=447;break;}else{label=449;break;}
 case 447: 
 var $2983=$6;
 var $2984=(($2983+28)|0);
 var $2985=HEAP32[(($2984)>>2)];
 var $2986=($2985|0)==1;
 if($2986){label=450;break;}else{label=448;break;}
 case 448: 
 var $2988=$2;
 var $2989=$6;
 var $2990=(($2989+28)|0);
 var $2991=HEAP32[(($2990)>>2)];
 var $2992=(((-$2991))|0);
 var $2993=(($2988+$2992)|0);
 var $2994=(($2993+1)|0);
 var $2995=HEAP8[($2994)];
 var $2996=($2995&255);
 var $2997=$6;
 var $2998=(($2997+52)|0);
 var $2999=(($2998+1)|0);
 var $3000=HEAP8[($2999)];
 var $3001=($3000&255);
 var $3002=($2996|0)==($3001|0);
 if($3002){label=450;break;}else{label=449;break;}
 case 449: 
 $1=0;
 label=1658;break;
 case 450: 
 var $3005=$3;
 var $3006=(($3005+1)|0);
 $3=$3006;
 label=1657;break;
 case 451: 
 var $3008=$2;
 var $3009=$6;
 var $3010=(($3009+116)|0);
 var $3011=HEAP32[(($3010)>>2)];
 var $3012=$6;
 var $3013=(($3012+148)|0);
 var $3014=HEAP32[(($3013)>>2)];
 var $3015=(($3011+$3014)|0);
 var $3016=($3008|0)!=($3015|0);
 if($3016){label=452;break;}else{label=453;break;}
 case 452: 
 $1=0;
 label=1658;break;
 case 453: 
 var $3019=$3;
 var $3020=(($3019+1)|0);
 $3=$3020;
 label=1657;break;
 case 454: 
 var $3022=$2;
 $4=$3022;
 var $3023=$3;
 var $3024=(($3023+1)|0);
 $3=$3024;
 label=1657;break;
 case 455: 
 var $3026=$2;
 var $3027=$6;
 var $3028=(($3027+120)|0);
 var $3029=HEAP32[(($3028)>>2)];
 var $3030=($3026>>>0)<($3029>>>0);
 if($3030){label=456;break;}else{label=473;break;}
 case 456: 
 var $3032=$6;
 var $3033=(($3032+24)|0);
 var $3034=HEAP32[(($3033)>>2)];
 var $3035=($3034|0)!=0;
 if($3035){label=457;break;}else{label=459;break;}
 case 457: 
 var $3037=$2;
 var $3038=$6;
 var $3039=(($3038+120)|0);
 var $3040=HEAP32[(($3039)>>2)];
 var $3041=($3037>>>0)<($3040>>>0);
 if($3041){label=458;break;}else{label=463;break;}
 case 458: 
 var $3043=$2;
 var $3044=$6;
 var $3045=(($3044+24)|0);
 var $3046=HEAP32[(($3045)>>2)];
 var $3047=$6;
 var $3048=(($3047+120)|0);
 var $3049=HEAP32[(($3048)>>2)];
 var $3050=$6;
 var $3051=(($3050+28)|0);
 var $3052=$utf;
 var $3053=__pcre_is_newline($3043,$3046,$3049,$3051,$3052);
 var $3054=($3053|0)!=0;
 if($3054){label=472;break;}else{label=463;break;}
 case 459: 
 var $3056=$2;
 var $3057=$6;
 var $3058=(($3057+120)|0);
 var $3059=HEAP32[(($3058)>>2)];
 var $3060=$6;
 var $3061=(($3060+28)|0);
 var $3062=HEAP32[(($3061)>>2)];
 var $3063=(((-$3062))|0);
 var $3064=(($3059+$3063)|0);
 var $3065=($3056>>>0)<=($3064>>>0);
 if($3065){label=460;break;}else{label=463;break;}
 case 460: 
 var $3067=$2;
 var $3068=HEAP8[($3067)];
 var $3069=($3068&255);
 var $3070=$6;
 var $3071=(($3070+52)|0);
 var $3072=(($3071)|0);
 var $3073=HEAP8[($3072)];
 var $3074=($3073&255);
 var $3075=($3069|0)==($3074|0);
 if($3075){label=461;break;}else{label=463;break;}
 case 461: 
 var $3077=$6;
 var $3078=(($3077+28)|0);
 var $3079=HEAP32[(($3078)>>2)];
 var $3080=($3079|0)==1;
 if($3080){label=472;break;}else{label=462;break;}
 case 462: 
 var $3082=$2;
 var $3083=(($3082+1)|0);
 var $3084=HEAP8[($3083)];
 var $3085=($3084&255);
 var $3086=$6;
 var $3087=(($3086+52)|0);
 var $3088=(($3087+1)|0);
 var $3089=HEAP8[($3088)];
 var $3090=($3089&255);
 var $3091=($3085|0)==($3090|0);
 if($3091){label=472;break;}else{label=463;break;}
 case 463: 
 var $3093=$6;
 var $3094=(($3093+136)|0);
 var $3095=HEAP32[(($3094)>>2)];
 var $3096=($3095|0)!=0;
 if($3096){label=464;break;}else{label=471;break;}
 case 464: 
 var $3098=$2;
 var $3099=(($3098+1)|0);
 var $3100=$6;
 var $3101=(($3100+120)|0);
 var $3102=HEAP32[(($3101)>>2)];
 var $3103=($3099>>>0)>=($3102>>>0);
 if($3103){label=465;break;}else{label=471;break;}
 case 465: 
 var $3105=$6;
 var $3106=(($3105+24)|0);
 var $3107=HEAP32[(($3106)>>2)];
 var $3108=($3107|0)==0;
 if($3108){label=466;break;}else{label=471;break;}
 case 466: 
 var $3110=$6;
 var $3111=(($3110+28)|0);
 var $3112=HEAP32[(($3111)>>2)];
 var $3113=($3112|0)==2;
 if($3113){label=467;break;}else{label=471;break;}
 case 467: 
 var $3115=$2;
 var $3116=HEAP8[($3115)];
 var $3117=($3116&255);
 var $3118=$6;
 var $3119=(($3118+52)|0);
 var $3120=(($3119)|0);
 var $3121=HEAP8[($3120)];
 var $3122=($3121&255);
 var $3123=($3117|0)==($3122|0);
 if($3123){label=468;break;}else{label=471;break;}
 case 468: 
 var $3125=$6;
 var $3126=(($3125+100)|0);
 HEAP32[(($3126)>>2)]=1;
 var $3127=$6;
 var $3128=(($3127+136)|0);
 var $3129=HEAP32[(($3128)>>2)];
 var $3130=($3129|0)>1;
 if($3130){label=469;break;}else{label=470;break;}
 case 469: 
 $1=-12;
 label=1658;break;
 case 470: 
 label=471;break;
 case 471: 
 $1=0;
 label=1658;break;
 case 472: 
 label=481;break;
 case 473: 
 var $3136=$6;
 var $3137=(($3136+72)|0);
 var $3138=HEAP32[(($3137)>>2)];
 var $3139=($3138|0)!=0;
 if($3139){label=474;break;}else{label=475;break;}
 case 474: 
 $1=0;
 label=1658;break;
 case 475: 
 var $3142=$6;
 var $3143=(($3142+136)|0);
 var $3144=HEAP32[(($3143)>>2)];
 var $3145=($3144|0)!=0;
 if($3145){label=476;break;}else{label=480;break;}
 case 476: 
 var $3147=$2;
 var $3148=$6;
 var $3149=(($3148+132)|0);
 var $3150=HEAP32[(($3149)>>2)];
 var $3151=($3147>>>0)>($3150>>>0);
 if($3151){label=477;break;}else{label=480;break;}
 case 477: 
 var $3153=$6;
 var $3154=(($3153+100)|0);
 HEAP32[(($3154)>>2)]=1;
 var $3155=$6;
 var $3156=(($3155+136)|0);
 var $3157=HEAP32[(($3156)>>2)];
 var $3158=($3157|0)>1;
 if($3158){label=478;break;}else{label=479;break;}
 case 478: 
 $1=-12;
 label=1658;break;
 case 479: 
 label=480;break;
 case 480: 
 label=481;break;
 case 481: 
 var $3163=$3;
 var $3164=(($3163+1)|0);
 $3=$3164;
 label=1657;break;
 case 482: 
 var $3166=$6;
 var $3167=(($3166+72)|0);
 var $3168=HEAP32[(($3167)>>2)];
 var $3169=($3168|0)!=0;
 if($3169){label=483;break;}else{label=484;break;}
 case 483: 
 $1=0;
 label=1658;break;
 case 484: 
 var $3172=$6;
 var $3173=(($3172+88)|0);
 var $3174=HEAP32[(($3173)>>2)];
 var $3175=($3174|0)!=0;
 if($3175){label=486;break;}else{label=485;break;}
 case 485: 
 label=496;break;
 case 486: 
 label=487;break;
 case 487: 
 var $3179=$2;
 var $3180=$6;
 var $3181=(($3180+120)|0);
 var $3182=HEAP32[(($3181)>>2)];
 var $3183=($3179>>>0)<($3182>>>0);
 if($3183){label=488;break;}else{label=489;break;}
 case 488: 
 $1=0;
 label=1658;break;
 case 489: 
 var $3186=$6;
 var $3187=(($3186+136)|0);
 var $3188=HEAP32[(($3187)>>2)];
 var $3189=($3188|0)!=0;
 if($3189){label=490;break;}else{label=494;break;}
 case 490: 
 var $3191=$2;
 var $3192=$6;
 var $3193=(($3192+132)|0);
 var $3194=HEAP32[(($3193)>>2)];
 var $3195=($3191>>>0)>($3194>>>0);
 if($3195){label=491;break;}else{label=494;break;}
 case 491: 
 var $3197=$6;
 var $3198=(($3197+100)|0);
 HEAP32[(($3198)>>2)]=1;
 var $3199=$6;
 var $3200=(($3199+136)|0);
 var $3201=HEAP32[(($3200)>>2)];
 var $3202=($3201|0)>1;
 if($3202){label=492;break;}else{label=493;break;}
 case 492: 
 $1=-12;
 label=1658;break;
 case 493: 
 label=494;break;
 case 494: 
 var $3206=$3;
 var $3207=(($3206+1)|0);
 $3=$3207;
 label=1657;break;
 case 495: 
 label=496;break;
 case 496: 
 var $3210=$2;
 var $3211=$6;
 var $3212=(($3211+120)|0);
 var $3213=HEAP32[(($3212)>>2)];
 var $3214=($3210>>>0)<($3213>>>0);
 if($3214){label=497;break;}else{label=514;break;}
 case 497: 
 var $3216=$6;
 var $3217=(($3216+24)|0);
 var $3218=HEAP32[(($3217)>>2)];
 var $3219=($3218|0)!=0;
 if($3219){label=498;break;}else{label=500;break;}
 case 498: 
 var $3221=$2;
 var $3222=$6;
 var $3223=(($3222+120)|0);
 var $3224=HEAP32[(($3223)>>2)];
 var $3225=($3221>>>0)<($3224>>>0);
 if($3225){label=499;break;}else{label=505;break;}
 case 499: 
 var $3227=$2;
 var $3228=$6;
 var $3229=(($3228+24)|0);
 var $3230=HEAP32[(($3229)>>2)];
 var $3231=$6;
 var $3232=(($3231+120)|0);
 var $3233=HEAP32[(($3232)>>2)];
 var $3234=$6;
 var $3235=(($3234+28)|0);
 var $3236=$utf;
 var $3237=__pcre_is_newline($3227,$3230,$3233,$3235,$3236);
 var $3238=($3237|0)!=0;
 if($3238){label=504;break;}else{label=505;break;}
 case 500: 
 var $3240=$2;
 var $3241=$6;
 var $3242=(($3241+120)|0);
 var $3243=HEAP32[(($3242)>>2)];
 var $3244=$6;
 var $3245=(($3244+28)|0);
 var $3246=HEAP32[(($3245)>>2)];
 var $3247=(((-$3246))|0);
 var $3248=(($3243+$3247)|0);
 var $3249=($3240>>>0)<=($3248>>>0);
 if($3249){label=501;break;}else{label=505;break;}
 case 501: 
 var $3251=$2;
 var $3252=HEAP8[($3251)];
 var $3253=($3252&255);
 var $3254=$6;
 var $3255=(($3254+52)|0);
 var $3256=(($3255)|0);
 var $3257=HEAP8[($3256)];
 var $3258=($3257&255);
 var $3259=($3253|0)==($3258|0);
 if($3259){label=502;break;}else{label=505;break;}
 case 502: 
 var $3261=$6;
 var $3262=(($3261+28)|0);
 var $3263=HEAP32[(($3262)>>2)];
 var $3264=($3263|0)==1;
 if($3264){label=504;break;}else{label=503;break;}
 case 503: 
 var $3266=$2;
 var $3267=(($3266+1)|0);
 var $3268=HEAP8[($3267)];
 var $3269=($3268&255);
 var $3270=$6;
 var $3271=(($3270+52)|0);
 var $3272=(($3271+1)|0);
 var $3273=HEAP8[($3272)];
 var $3274=($3273&255);
 var $3275=($3269|0)==($3274|0);
 if($3275){label=504;break;}else{label=505;break;}
 case 504: 
 var $3277=$2;
 var $3278=$6;
 var $3279=(($3278+120)|0);
 var $3280=HEAP32[(($3279)>>2)];
 var $3281=$6;
 var $3282=(($3281+28)|0);
 var $3283=HEAP32[(($3282)>>2)];
 var $3284=(((-$3283))|0);
 var $3285=(($3280+$3284)|0);
 var $3286=($3277|0)!=($3285|0);
 if($3286){label=505;break;}else{label=514;break;}
 case 505: 
 var $3288=$6;
 var $3289=(($3288+136)|0);
 var $3290=HEAP32[(($3289)>>2)];
 var $3291=($3290|0)!=0;
 if($3291){label=506;break;}else{label=513;break;}
 case 506: 
 var $3293=$2;
 var $3294=(($3293+1)|0);
 var $3295=$6;
 var $3296=(($3295+120)|0);
 var $3297=HEAP32[(($3296)>>2)];
 var $3298=($3294>>>0)>=($3297>>>0);
 if($3298){label=507;break;}else{label=513;break;}
 case 507: 
 var $3300=$6;
 var $3301=(($3300+24)|0);
 var $3302=HEAP32[(($3301)>>2)];
 var $3303=($3302|0)==0;
 if($3303){label=508;break;}else{label=513;break;}
 case 508: 
 var $3305=$6;
 var $3306=(($3305+28)|0);
 var $3307=HEAP32[(($3306)>>2)];
 var $3308=($3307|0)==2;
 if($3308){label=509;break;}else{label=513;break;}
 case 509: 
 var $3310=$2;
 var $3311=HEAP8[($3310)];
 var $3312=($3311&255);
 var $3313=$6;
 var $3314=(($3313+52)|0);
 var $3315=(($3314)|0);
 var $3316=HEAP8[($3315)];
 var $3317=($3316&255);
 var $3318=($3312|0)==($3317|0);
 if($3318){label=510;break;}else{label=513;break;}
 case 510: 
 var $3320=$6;
 var $3321=(($3320+100)|0);
 HEAP32[(($3321)>>2)]=1;
 var $3322=$6;
 var $3323=(($3322+136)|0);
 var $3324=HEAP32[(($3323)>>2)];
 var $3325=($3324|0)>1;
 if($3325){label=511;break;}else{label=512;break;}
 case 511: 
 $1=-12;
 label=1658;break;
 case 512: 
 label=513;break;
 case 513: 
 $1=0;
 label=1658;break;
 case 514: 
 var $3330=$6;
 var $3331=(($3330+136)|0);
 var $3332=HEAP32[(($3331)>>2)];
 var $3333=($3332|0)!=0;
 if($3333){label=515;break;}else{label=519;break;}
 case 515: 
 var $3335=$2;
 var $3336=$6;
 var $3337=(($3336+132)|0);
 var $3338=HEAP32[(($3337)>>2)];
 var $3339=($3335>>>0)>($3338>>>0);
 if($3339){label=516;break;}else{label=519;break;}
 case 516: 
 var $3341=$6;
 var $3342=(($3341+100)|0);
 HEAP32[(($3342)>>2)]=1;
 var $3343=$6;
 var $3344=(($3343+136)|0);
 var $3345=HEAP32[(($3344)>>2)];
 var $3346=($3345|0)>1;
 if($3346){label=517;break;}else{label=518;break;}
 case 517: 
 $1=-12;
 label=1658;break;
 case 518: 
 label=519;break;
 case 519: 
 var $3350=$3;
 var $3351=(($3350+1)|0);
 $3=$3351;
 label=1657;break;
 case 520: 
 var $3353=$2;
 var $3354=$6;
 var $3355=(($3354+116)|0);
 var $3356=HEAP32[(($3355)>>2)];
 var $3357=($3353|0)==($3356|0);
 if($3357){label=521;break;}else{label=522;break;}
 case 521: 
 $prev_is_word=0;
 label=525;break;
 case 522: 
 var $3360=$2;
 var $3361=$6;
 var $3362=(($3361+132)|0);
 var $3363=HEAP32[(($3362)>>2)];
 var $3364=($3360>>>0)<=($3363>>>0);
 if($3364){label=523;break;}else{label=524;break;}
 case 523: 
 var $3366=$2;
 var $3367=((($3366)-(1))|0);
 var $3368=$6;
 var $3369=(($3368+132)|0);
 HEAP32[(($3369)>>2)]=$3367;
 label=524;break;
 case 524: 
 var $3371=$2;
 var $3372=((($3371)-(1))|0);
 var $3373=HEAP8[($3372)];
 var $3374=($3373&255);
 var $3375=$6;
 var $3376=(($3375+64)|0);
 var $3377=HEAP32[(($3376)>>2)];
 var $3378=(($3377+$3374)|0);
 var $3379=HEAP8[($3378)];
 var $3380=($3379&255);
 var $3381=$3380&16;
 var $3382=($3381|0)!=0;
 var $3383=($3382&1);
 $prev_is_word=$3383;
 label=525;break;
 case 525: 
 var $3385=$2;
 var $3386=$6;
 var $3387=(($3386+120)|0);
 var $3388=HEAP32[(($3387)>>2)];
 var $3389=($3385>>>0)>=($3388>>>0);
 if($3389){label=526;break;}else{label=532;break;}
 case 526: 
 var $3391=$6;
 var $3392=(($3391+136)|0);
 var $3393=HEAP32[(($3392)>>2)];
 var $3394=($3393|0)!=0;
 if($3394){label=527;break;}else{label=531;break;}
 case 527: 
 var $3396=$2;
 var $3397=$6;
 var $3398=(($3397+132)|0);
 var $3399=HEAP32[(($3398)>>2)];
 var $3400=($3396>>>0)>($3399>>>0);
 if($3400){label=528;break;}else{label=531;break;}
 case 528: 
 var $3402=$6;
 var $3403=(($3402+100)|0);
 HEAP32[(($3403)>>2)]=1;
 var $3404=$6;
 var $3405=(($3404+136)|0);
 var $3406=HEAP32[(($3405)>>2)];
 var $3407=($3406|0)>1;
 if($3407){label=529;break;}else{label=530;break;}
 case 529: 
 $1=-12;
 label=1658;break;
 case 530: 
 label=531;break;
 case 531: 
 $cur_is_word=0;
 label=533;break;
 case 532: 
 var $3412=$2;
 var $3413=HEAP8[($3412)];
 var $3414=($3413&255);
 var $3415=$6;
 var $3416=(($3415+64)|0);
 var $3417=HEAP32[(($3416)>>2)];
 var $3418=(($3417+$3414)|0);
 var $3419=HEAP8[($3418)];
 var $3420=($3419&255);
 var $3421=$3420&16;
 var $3422=($3421|0)!=0;
 var $3423=($3422&1);
 $cur_is_word=$3423;
 label=533;break;
 case 533: 
 var $3425=$3;
 var $3426=(($3425+1)|0);
 $3=$3426;
 var $3427=HEAP8[($3425)];
 var $3428=($3427&255);
 var $3429=($3428|0)==5;
 if($3429){label=534;break;}else{label=535;break;}
 case 534: 
 var $3431=$cur_is_word;
 var $3432=$prev_is_word;
 var $3433=($3431|0)==($3432|0);
 if($3433){label=536;break;}else{label=537;break;}
 case 535: 
 var $3435=$cur_is_word;
 var $3436=$prev_is_word;
 var $3437=($3435|0)!=($3436|0);
 if($3437){label=536;break;}else{label=537;break;}
 case 536: 
 $1=0;
 label=1658;break;
 case 537: 
 label=1657;break;
 case 538: 
 var $3441=$6;
 var $3442=(($3441+24)|0);
 var $3443=HEAP32[(($3442)>>2)];
 var $3444=($3443|0)!=0;
 if($3444){label=539;break;}else{label=541;break;}
 case 539: 
 var $3446=$2;
 var $3447=$6;
 var $3448=(($3447+120)|0);
 var $3449=HEAP32[(($3448)>>2)];
 var $3450=($3446>>>0)<($3449>>>0);
 if($3450){label=540;break;}else{label=546;break;}
 case 540: 
 var $3452=$2;
 var $3453=$6;
 var $3454=(($3453+24)|0);
 var $3455=HEAP32[(($3454)>>2)];
 var $3456=$6;
 var $3457=(($3456+120)|0);
 var $3458=HEAP32[(($3457)>>2)];
 var $3459=$6;
 var $3460=(($3459+28)|0);
 var $3461=$utf;
 var $3462=__pcre_is_newline($3452,$3455,$3458,$3460,$3461);
 var $3463=($3462|0)!=0;
 if($3463){label=545;break;}else{label=546;break;}
 case 541: 
 var $3465=$2;
 var $3466=$6;
 var $3467=(($3466+120)|0);
 var $3468=HEAP32[(($3467)>>2)];
 var $3469=$6;
 var $3470=(($3469+28)|0);
 var $3471=HEAP32[(($3470)>>2)];
 var $3472=(((-$3471))|0);
 var $3473=(($3468+$3472)|0);
 var $3474=($3465>>>0)<=($3473>>>0);
 if($3474){label=542;break;}else{label=546;break;}
 case 542: 
 var $3476=$2;
 var $3477=HEAP8[($3476)];
 var $3478=($3477&255);
 var $3479=$6;
 var $3480=(($3479+52)|0);
 var $3481=(($3480)|0);
 var $3482=HEAP8[($3481)];
 var $3483=($3482&255);
 var $3484=($3478|0)==($3483|0);
 if($3484){label=543;break;}else{label=546;break;}
 case 543: 
 var $3486=$6;
 var $3487=(($3486+28)|0);
 var $3488=HEAP32[(($3487)>>2)];
 var $3489=($3488|0)==1;
 if($3489){label=545;break;}else{label=544;break;}
 case 544: 
 var $3491=$2;
 var $3492=(($3491+1)|0);
 var $3493=HEAP8[($3492)];
 var $3494=($3493&255);
 var $3495=$6;
 var $3496=(($3495+52)|0);
 var $3497=(($3496+1)|0);
 var $3498=HEAP8[($3497)];
 var $3499=($3498&255);
 var $3500=($3494|0)==($3499|0);
 if($3500){label=545;break;}else{label=546;break;}
 case 545: 
 $1=0;
 label=1658;break;
 case 546: 
 var $3503=$6;
 var $3504=(($3503+136)|0);
 var $3505=HEAP32[(($3504)>>2)];
 var $3506=($3505|0)!=0;
 if($3506){label=547;break;}else{label=554;break;}
 case 547: 
 var $3508=$2;
 var $3509=(($3508+1)|0);
 var $3510=$6;
 var $3511=(($3510+120)|0);
 var $3512=HEAP32[(($3511)>>2)];
 var $3513=($3509>>>0)>=($3512>>>0);
 if($3513){label=548;break;}else{label=554;break;}
 case 548: 
 var $3515=$6;
 var $3516=(($3515+24)|0);
 var $3517=HEAP32[(($3516)>>2)];
 var $3518=($3517|0)==0;
 if($3518){label=549;break;}else{label=554;break;}
 case 549: 
 var $3520=$6;
 var $3521=(($3520+28)|0);
 var $3522=HEAP32[(($3521)>>2)];
 var $3523=($3522|0)==2;
 if($3523){label=550;break;}else{label=554;break;}
 case 550: 
 var $3525=$2;
 var $3526=HEAP8[($3525)];
 var $3527=($3526&255);
 var $3528=$6;
 var $3529=(($3528+52)|0);
 var $3530=(($3529)|0);
 var $3531=HEAP8[($3530)];
 var $3532=($3531&255);
 var $3533=($3527|0)==($3532|0);
 if($3533){label=551;break;}else{label=554;break;}
 case 551: 
 var $3535=$6;
 var $3536=(($3535+100)|0);
 HEAP32[(($3536)>>2)]=1;
 var $3537=$6;
 var $3538=(($3537+136)|0);
 var $3539=HEAP32[(($3538)>>2)];
 var $3540=($3539|0)>1;
 if($3540){label=552;break;}else{label=553;break;}
 case 552: 
 $1=-12;
 label=1658;break;
 case 553: 
 label=554;break;
 case 554: 
 label=555;break;
 case 555: 
 var $3545=$2;
 var $3546=$6;
 var $3547=(($3546+120)|0);
 var $3548=HEAP32[(($3547)>>2)];
 var $3549=($3545>>>0)>=($3548>>>0);
 if($3549){label=556;break;}else{label=562;break;}
 case 556: 
 var $3551=$6;
 var $3552=(($3551+136)|0);
 var $3553=HEAP32[(($3552)>>2)];
 var $3554=($3553|0)!=0;
 if($3554){label=557;break;}else{label=561;break;}
 case 557: 
 var $3556=$2;
 var $3557=$6;
 var $3558=(($3557+132)|0);
 var $3559=HEAP32[(($3558)>>2)];
 var $3560=($3556>>>0)>($3559>>>0);
 if($3560){label=558;break;}else{label=561;break;}
 case 558: 
 var $3562=$6;
 var $3563=(($3562+100)|0);
 HEAP32[(($3563)>>2)]=1;
 var $3564=$6;
 var $3565=(($3564+136)|0);
 var $3566=HEAP32[(($3565)>>2)];
 var $3567=($3566|0)>1;
 if($3567){label=559;break;}else{label=560;break;}
 case 559: 
 $1=-12;
 label=1658;break;
 case 560: 
 label=561;break;
 case 561: 
 $1=0;
 label=1658;break;
 case 562: 
 var $3572=$2;
 var $3573=(($3572+1)|0);
 $2=$3573;
 var $3574=$3;
 var $3575=(($3574+1)|0);
 $3=$3575;
 label=1657;break;
 case 563: 
 var $3577=$2;
 var $3578=$6;
 var $3579=(($3578+120)|0);
 var $3580=HEAP32[(($3579)>>2)];
 var $3581=($3577>>>0)>=($3580>>>0);
 if($3581){label=564;break;}else{label=570;break;}
 case 564: 
 var $3583=$6;
 var $3584=(($3583+136)|0);
 var $3585=HEAP32[(($3584)>>2)];
 var $3586=($3585|0)!=0;
 if($3586){label=565;break;}else{label=569;break;}
 case 565: 
 var $3588=$2;
 var $3589=$6;
 var $3590=(($3589+132)|0);
 var $3591=HEAP32[(($3590)>>2)];
 var $3592=($3588>>>0)>($3591>>>0);
 if($3592){label=566;break;}else{label=569;break;}
 case 566: 
 var $3594=$6;
 var $3595=(($3594+100)|0);
 HEAP32[(($3595)>>2)]=1;
 var $3596=$6;
 var $3597=(($3596+136)|0);
 var $3598=HEAP32[(($3597)>>2)];
 var $3599=($3598|0)>1;
 if($3599){label=567;break;}else{label=568;break;}
 case 567: 
 $1=-12;
 label=1658;break;
 case 568: 
 label=569;break;
 case 569: 
 $1=0;
 label=1658;break;
 case 570: 
 var $3604=$2;
 var $3605=(($3604+1)|0);
 $2=$3605;
 var $3606=$3;
 var $3607=(($3606+1)|0);
 $3=$3607;
 label=1657;break;
 case 571: 
 var $3609=$2;
 var $3610=$6;
 var $3611=(($3610+120)|0);
 var $3612=HEAP32[(($3611)>>2)];
 var $3613=($3609>>>0)>=($3612>>>0);
 if($3613){label=572;break;}else{label=578;break;}
 case 572: 
 var $3615=$6;
 var $3616=(($3615+136)|0);
 var $3617=HEAP32[(($3616)>>2)];
 var $3618=($3617|0)!=0;
 if($3618){label=573;break;}else{label=577;break;}
 case 573: 
 var $3620=$2;
 var $3621=$6;
 var $3622=(($3621+132)|0);
 var $3623=HEAP32[(($3622)>>2)];
 var $3624=($3620>>>0)>($3623>>>0);
 if($3624){label=574;break;}else{label=577;break;}
 case 574: 
 var $3626=$6;
 var $3627=(($3626+100)|0);
 HEAP32[(($3627)>>2)]=1;
 var $3628=$6;
 var $3629=(($3628+136)|0);
 var $3630=HEAP32[(($3629)>>2)];
 var $3631=($3630|0)>1;
 if($3631){label=575;break;}else{label=576;break;}
 case 575: 
 $1=-12;
 label=1658;break;
 case 576: 
 label=577;break;
 case 577: 
 $1=0;
 label=1658;break;
 case 578: 
 var $3636=$2;
 var $3637=(($3636+1)|0);
 $2=$3637;
 var $3638=HEAP8[($3636)];
 var $3639=($3638&255);
 $c=$3639;
 var $3640=$c;
 var $3641=$6;
 var $3642=(($3641+64)|0);
 var $3643=HEAP32[(($3642)>>2)];
 var $3644=(($3643+$3640)|0);
 var $3645=HEAP8[($3644)];
 var $3646=($3645&255);
 var $3647=$3646&4;
 var $3648=($3647|0)!=0;
 if($3648){label=579;break;}else{label=580;break;}
 case 579: 
 $1=0;
 label=1658;break;
 case 580: 
 var $3651=$3;
 var $3652=(($3651+1)|0);
 $3=$3652;
 label=1657;break;
 case 581: 
 var $3654=$2;
 var $3655=$6;
 var $3656=(($3655+120)|0);
 var $3657=HEAP32[(($3656)>>2)];
 var $3658=($3654>>>0)>=($3657>>>0);
 if($3658){label=582;break;}else{label=588;break;}
 case 582: 
 var $3660=$6;
 var $3661=(($3660+136)|0);
 var $3662=HEAP32[(($3661)>>2)];
 var $3663=($3662|0)!=0;
 if($3663){label=583;break;}else{label=587;break;}
 case 583: 
 var $3665=$2;
 var $3666=$6;
 var $3667=(($3666+132)|0);
 var $3668=HEAP32[(($3667)>>2)];
 var $3669=($3665>>>0)>($3668>>>0);
 if($3669){label=584;break;}else{label=587;break;}
 case 584: 
 var $3671=$6;
 var $3672=(($3671+100)|0);
 HEAP32[(($3672)>>2)]=1;
 var $3673=$6;
 var $3674=(($3673+136)|0);
 var $3675=HEAP32[(($3674)>>2)];
 var $3676=($3675|0)>1;
 if($3676){label=585;break;}else{label=586;break;}
 case 585: 
 $1=-12;
 label=1658;break;
 case 586: 
 label=587;break;
 case 587: 
 $1=0;
 label=1658;break;
 case 588: 
 var $3681=$2;
 var $3682=(($3681+1)|0);
 $2=$3682;
 var $3683=HEAP8[($3681)];
 var $3684=($3683&255);
 $c=$3684;
 var $3685=$c;
 var $3686=$6;
 var $3687=(($3686+64)|0);
 var $3688=HEAP32[(($3687)>>2)];
 var $3689=(($3688+$3685)|0);
 var $3690=HEAP8[($3689)];
 var $3691=($3690&255);
 var $3692=$3691&4;
 var $3693=($3692|0)==0;
 if($3693){label=589;break;}else{label=590;break;}
 case 589: 
 $1=0;
 label=1658;break;
 case 590: 
 var $3696=$3;
 var $3697=(($3696+1)|0);
 $3=$3697;
 label=1657;break;
 case 591: 
 var $3699=$2;
 var $3700=$6;
 var $3701=(($3700+120)|0);
 var $3702=HEAP32[(($3701)>>2)];
 var $3703=($3699>>>0)>=($3702>>>0);
 if($3703){label=592;break;}else{label=598;break;}
 case 592: 
 var $3705=$6;
 var $3706=(($3705+136)|0);
 var $3707=HEAP32[(($3706)>>2)];
 var $3708=($3707|0)!=0;
 if($3708){label=593;break;}else{label=597;break;}
 case 593: 
 var $3710=$2;
 var $3711=$6;
 var $3712=(($3711+132)|0);
 var $3713=HEAP32[(($3712)>>2)];
 var $3714=($3710>>>0)>($3713>>>0);
 if($3714){label=594;break;}else{label=597;break;}
 case 594: 
 var $3716=$6;
 var $3717=(($3716+100)|0);
 HEAP32[(($3717)>>2)]=1;
 var $3718=$6;
 var $3719=(($3718+136)|0);
 var $3720=HEAP32[(($3719)>>2)];
 var $3721=($3720|0)>1;
 if($3721){label=595;break;}else{label=596;break;}
 case 595: 
 $1=-12;
 label=1658;break;
 case 596: 
 label=597;break;
 case 597: 
 $1=0;
 label=1658;break;
 case 598: 
 var $3726=$2;
 var $3727=(($3726+1)|0);
 $2=$3727;
 var $3728=HEAP8[($3726)];
 var $3729=($3728&255);
 $c=$3729;
 var $3730=$c;
 var $3731=$6;
 var $3732=(($3731+64)|0);
 var $3733=HEAP32[(($3732)>>2)];
 var $3734=(($3733+$3730)|0);
 var $3735=HEAP8[($3734)];
 var $3736=($3735&255);
 var $3737=$3736&1;
 var $3738=($3737|0)!=0;
 if($3738){label=599;break;}else{label=600;break;}
 case 599: 
 $1=0;
 label=1658;break;
 case 600: 
 var $3741=$3;
 var $3742=(($3741+1)|0);
 $3=$3742;
 label=1657;break;
 case 601: 
 var $3744=$2;
 var $3745=$6;
 var $3746=(($3745+120)|0);
 var $3747=HEAP32[(($3746)>>2)];
 var $3748=($3744>>>0)>=($3747>>>0);
 if($3748){label=602;break;}else{label=608;break;}
 case 602: 
 var $3750=$6;
 var $3751=(($3750+136)|0);
 var $3752=HEAP32[(($3751)>>2)];
 var $3753=($3752|0)!=0;
 if($3753){label=603;break;}else{label=607;break;}
 case 603: 
 var $3755=$2;
 var $3756=$6;
 var $3757=(($3756+132)|0);
 var $3758=HEAP32[(($3757)>>2)];
 var $3759=($3755>>>0)>($3758>>>0);
 if($3759){label=604;break;}else{label=607;break;}
 case 604: 
 var $3761=$6;
 var $3762=(($3761+100)|0);
 HEAP32[(($3762)>>2)]=1;
 var $3763=$6;
 var $3764=(($3763+136)|0);
 var $3765=HEAP32[(($3764)>>2)];
 var $3766=($3765|0)>1;
 if($3766){label=605;break;}else{label=606;break;}
 case 605: 
 $1=-12;
 label=1658;break;
 case 606: 
 label=607;break;
 case 607: 
 $1=0;
 label=1658;break;
 case 608: 
 var $3771=$2;
 var $3772=(($3771+1)|0);
 $2=$3772;
 var $3773=HEAP8[($3771)];
 var $3774=($3773&255);
 $c=$3774;
 var $3775=$c;
 var $3776=$6;
 var $3777=(($3776+64)|0);
 var $3778=HEAP32[(($3777)>>2)];
 var $3779=(($3778+$3775)|0);
 var $3780=HEAP8[($3779)];
 var $3781=($3780&255);
 var $3782=$3781&1;
 var $3783=($3782|0)==0;
 if($3783){label=609;break;}else{label=610;break;}
 case 609: 
 $1=0;
 label=1658;break;
 case 610: 
 var $3786=$3;
 var $3787=(($3786+1)|0);
 $3=$3787;
 label=1657;break;
 case 611: 
 var $3789=$2;
 var $3790=$6;
 var $3791=(($3790+120)|0);
 var $3792=HEAP32[(($3791)>>2)];
 var $3793=($3789>>>0)>=($3792>>>0);
 if($3793){label=612;break;}else{label=618;break;}
 case 612: 
 var $3795=$6;
 var $3796=(($3795+136)|0);
 var $3797=HEAP32[(($3796)>>2)];
 var $3798=($3797|0)!=0;
 if($3798){label=613;break;}else{label=617;break;}
 case 613: 
 var $3800=$2;
 var $3801=$6;
 var $3802=(($3801+132)|0);
 var $3803=HEAP32[(($3802)>>2)];
 var $3804=($3800>>>0)>($3803>>>0);
 if($3804){label=614;break;}else{label=617;break;}
 case 614: 
 var $3806=$6;
 var $3807=(($3806+100)|0);
 HEAP32[(($3807)>>2)]=1;
 var $3808=$6;
 var $3809=(($3808+136)|0);
 var $3810=HEAP32[(($3809)>>2)];
 var $3811=($3810|0)>1;
 if($3811){label=615;break;}else{label=616;break;}
 case 615: 
 $1=-12;
 label=1658;break;
 case 616: 
 label=617;break;
 case 617: 
 $1=0;
 label=1658;break;
 case 618: 
 var $3816=$2;
 var $3817=(($3816+1)|0);
 $2=$3817;
 var $3818=HEAP8[($3816)];
 var $3819=($3818&255);
 $c=$3819;
 var $3820=$c;
 var $3821=$6;
 var $3822=(($3821+64)|0);
 var $3823=HEAP32[(($3822)>>2)];
 var $3824=(($3823+$3820)|0);
 var $3825=HEAP8[($3824)];
 var $3826=($3825&255);
 var $3827=$3826&16;
 var $3828=($3827|0)!=0;
 if($3828){label=619;break;}else{label=620;break;}
 case 619: 
 $1=0;
 label=1658;break;
 case 620: 
 var $3831=$3;
 var $3832=(($3831+1)|0);
 $3=$3832;
 label=1657;break;
 case 621: 
 var $3834=$2;
 var $3835=$6;
 var $3836=(($3835+120)|0);
 var $3837=HEAP32[(($3836)>>2)];
 var $3838=($3834>>>0)>=($3837>>>0);
 if($3838){label=622;break;}else{label=628;break;}
 case 622: 
 var $3840=$6;
 var $3841=(($3840+136)|0);
 var $3842=HEAP32[(($3841)>>2)];
 var $3843=($3842|0)!=0;
 if($3843){label=623;break;}else{label=627;break;}
 case 623: 
 var $3845=$2;
 var $3846=$6;
 var $3847=(($3846+132)|0);
 var $3848=HEAP32[(($3847)>>2)];
 var $3849=($3845>>>0)>($3848>>>0);
 if($3849){label=624;break;}else{label=627;break;}
 case 624: 
 var $3851=$6;
 var $3852=(($3851+100)|0);
 HEAP32[(($3852)>>2)]=1;
 var $3853=$6;
 var $3854=(($3853+136)|0);
 var $3855=HEAP32[(($3854)>>2)];
 var $3856=($3855|0)>1;
 if($3856){label=625;break;}else{label=626;break;}
 case 625: 
 $1=-12;
 label=1658;break;
 case 626: 
 label=627;break;
 case 627: 
 $1=0;
 label=1658;break;
 case 628: 
 var $3861=$2;
 var $3862=(($3861+1)|0);
 $2=$3862;
 var $3863=HEAP8[($3861)];
 var $3864=($3863&255);
 $c=$3864;
 var $3865=$c;
 var $3866=$6;
 var $3867=(($3866+64)|0);
 var $3868=HEAP32[(($3867)>>2)];
 var $3869=(($3868+$3865)|0);
 var $3870=HEAP8[($3869)];
 var $3871=($3870&255);
 var $3872=$3871&16;
 var $3873=($3872|0)==0;
 if($3873){label=629;break;}else{label=630;break;}
 case 629: 
 $1=0;
 label=1658;break;
 case 630: 
 var $3876=$3;
 var $3877=(($3876+1)|0);
 $3=$3877;
 label=1657;break;
 case 631: 
 var $3879=$2;
 var $3880=$6;
 var $3881=(($3880+120)|0);
 var $3882=HEAP32[(($3881)>>2)];
 var $3883=($3879>>>0)>=($3882>>>0);
 if($3883){label=632;break;}else{label=638;break;}
 case 632: 
 var $3885=$6;
 var $3886=(($3885+136)|0);
 var $3887=HEAP32[(($3886)>>2)];
 var $3888=($3887|0)!=0;
 if($3888){label=633;break;}else{label=637;break;}
 case 633: 
 var $3890=$2;
 var $3891=$6;
 var $3892=(($3891+132)|0);
 var $3893=HEAP32[(($3892)>>2)];
 var $3894=($3890>>>0)>($3893>>>0);
 if($3894){label=634;break;}else{label=637;break;}
 case 634: 
 var $3896=$6;
 var $3897=(($3896+100)|0);
 HEAP32[(($3897)>>2)]=1;
 var $3898=$6;
 var $3899=(($3898+136)|0);
 var $3900=HEAP32[(($3899)>>2)];
 var $3901=($3900|0)>1;
 if($3901){label=635;break;}else{label=636;break;}
 case 635: 
 $1=-12;
 label=1658;break;
 case 636: 
 label=637;break;
 case 637: 
 $1=0;
 label=1658;break;
 case 638: 
 var $3906=$2;
 var $3907=(($3906+1)|0);
 $2=$3907;
 var $3908=HEAP8[($3906)];
 var $3909=($3908&255);
 $c=$3909;
 var $3910=$c;
 if(($3910|0)==13){ label=640;break;}else if(($3910|0)==10){ label=651;break;}else if(($3910|0)==11|($3910|0)==12|($3910|0)==133|($3910|0)==8232|($3910|0)==8233){ label=652;break;}else{label=639;break;}
 case 639: 
 $1=0;
 label=1658;break;
 case 640: 
 var $3913=$2;
 var $3914=$6;
 var $3915=(($3914+120)|0);
 var $3916=HEAP32[(($3915)>>2)];
 var $3917=($3913>>>0)>=($3916>>>0);
 if($3917){label=641;break;}else{label=647;break;}
 case 641: 
 var $3919=$6;
 var $3920=(($3919+136)|0);
 var $3921=HEAP32[(($3920)>>2)];
 var $3922=($3921|0)!=0;
 if($3922){label=642;break;}else{label=646;break;}
 case 642: 
 var $3924=$2;
 var $3925=$6;
 var $3926=(($3925+132)|0);
 var $3927=HEAP32[(($3926)>>2)];
 var $3928=($3924>>>0)>($3927>>>0);
 if($3928){label=643;break;}else{label=646;break;}
 case 643: 
 var $3930=$6;
 var $3931=(($3930+100)|0);
 HEAP32[(($3931)>>2)]=1;
 var $3932=$6;
 var $3933=(($3932+136)|0);
 var $3934=HEAP32[(($3933)>>2)];
 var $3935=($3934|0)>1;
 if($3935){label=644;break;}else{label=645;break;}
 case 644: 
 $1=-12;
 label=1658;break;
 case 645: 
 label=646;break;
 case 646: 
 label=650;break;
 case 647: 
 var $3940=$2;
 var $3941=HEAP8[($3940)];
 var $3942=($3941&255);
 var $3943=($3942|0)==10;
 if($3943){label=648;break;}else{label=649;break;}
 case 648: 
 var $3945=$2;
 var $3946=(($3945+1)|0);
 $2=$3946;
 label=649;break;
 case 649: 
 label=650;break;
 case 650: 
 label=655;break;
 case 651: 
 label=655;break;
 case 652: 
 var $3951=$6;
 var $3952=(($3951+104)|0);
 var $3953=HEAP32[(($3952)>>2)];
 var $3954=($3953|0)!=0;
 if($3954){label=653;break;}else{label=654;break;}
 case 653: 
 $1=0;
 label=1658;break;
 case 654: 
 label=655;break;
 case 655: 
 var $3958=$3;
 var $3959=(($3958+1)|0);
 $3=$3959;
 label=1657;break;
 case 656: 
 var $3961=$2;
 var $3962=$6;
 var $3963=(($3962+120)|0);
 var $3964=HEAP32[(($3963)>>2)];
 var $3965=($3961>>>0)>=($3964>>>0);
 if($3965){label=657;break;}else{label=663;break;}
 case 657: 
 var $3967=$6;
 var $3968=(($3967+136)|0);
 var $3969=HEAP32[(($3968)>>2)];
 var $3970=($3969|0)!=0;
 if($3970){label=658;break;}else{label=662;break;}
 case 658: 
 var $3972=$2;
 var $3973=$6;
 var $3974=(($3973+132)|0);
 var $3975=HEAP32[(($3974)>>2)];
 var $3976=($3972>>>0)>($3975>>>0);
 if($3976){label=659;break;}else{label=662;break;}
 case 659: 
 var $3978=$6;
 var $3979=(($3978+100)|0);
 HEAP32[(($3979)>>2)]=1;
 var $3980=$6;
 var $3981=(($3980+136)|0);
 var $3982=HEAP32[(($3981)>>2)];
 var $3983=($3982|0)>1;
 if($3983){label=660;break;}else{label=661;break;}
 case 660: 
 $1=-12;
 label=1658;break;
 case 661: 
 label=662;break;
 case 662: 
 $1=0;
 label=1658;break;
 case 663: 
 var $3988=$2;
 var $3989=(($3988+1)|0);
 $2=$3989;
 var $3990=HEAP8[($3988)];
 var $3991=($3990&255);
 $c=$3991;
 var $3992=$c;
 if(($3992|0)==9|($3992|0)==32|($3992|0)==160|($3992|0)==5760|($3992|0)==6158|($3992|0)==8192|($3992|0)==8193|($3992|0)==8194|($3992|0)==8195|($3992|0)==8196|($3992|0)==8197|($3992|0)==8198|($3992|0)==8199|($3992|0)==8200|($3992|0)==8201|($3992|0)==8202|($3992|0)==8239|($3992|0)==8287|($3992|0)==12288){ label=664;break;}else{label=665;break;}
 case 664: 
 $1=0;
 label=1658;break;
 case 665: 
 label=666;break;
 case 666: 
 var $3996=$3;
 var $3997=(($3996+1)|0);
 $3=$3997;
 label=1657;break;
 case 667: 
 var $3999=$2;
 var $4000=$6;
 var $4001=(($4000+120)|0);
 var $4002=HEAP32[(($4001)>>2)];
 var $4003=($3999>>>0)>=($4002>>>0);
 if($4003){label=668;break;}else{label=674;break;}
 case 668: 
 var $4005=$6;
 var $4006=(($4005+136)|0);
 var $4007=HEAP32[(($4006)>>2)];
 var $4008=($4007|0)!=0;
 if($4008){label=669;break;}else{label=673;break;}
 case 669: 
 var $4010=$2;
 var $4011=$6;
 var $4012=(($4011+132)|0);
 var $4013=HEAP32[(($4012)>>2)];
 var $4014=($4010>>>0)>($4013>>>0);
 if($4014){label=670;break;}else{label=673;break;}
 case 670: 
 var $4016=$6;
 var $4017=(($4016+100)|0);
 HEAP32[(($4017)>>2)]=1;
 var $4018=$6;
 var $4019=(($4018+136)|0);
 var $4020=HEAP32[(($4019)>>2)];
 var $4021=($4020|0)>1;
 if($4021){label=671;break;}else{label=672;break;}
 case 671: 
 $1=-12;
 label=1658;break;
 case 672: 
 label=673;break;
 case 673: 
 $1=0;
 label=1658;break;
 case 674: 
 var $4026=$2;
 var $4027=(($4026+1)|0);
 $2=$4027;
 var $4028=HEAP8[($4026)];
 var $4029=($4028&255);
 $c=$4029;
 var $4030=$c;
 if(($4030|0)==9|($4030|0)==32|($4030|0)==160|($4030|0)==5760|($4030|0)==6158|($4030|0)==8192|($4030|0)==8193|($4030|0)==8194|($4030|0)==8195|($4030|0)==8196|($4030|0)==8197|($4030|0)==8198|($4030|0)==8199|($4030|0)==8200|($4030|0)==8201|($4030|0)==8202|($4030|0)==8239|($4030|0)==8287|($4030|0)==12288){ label=675;break;}else{label=676;break;}
 case 675: 
 label=677;break;
 case 676: 
 $1=0;
 label=1658;break;
 case 677: 
 var $4034=$3;
 var $4035=(($4034+1)|0);
 $3=$4035;
 label=1657;break;
 case 678: 
 var $4037=$2;
 var $4038=$6;
 var $4039=(($4038+120)|0);
 var $4040=HEAP32[(($4039)>>2)];
 var $4041=($4037>>>0)>=($4040>>>0);
 if($4041){label=679;break;}else{label=685;break;}
 case 679: 
 var $4043=$6;
 var $4044=(($4043+136)|0);
 var $4045=HEAP32[(($4044)>>2)];
 var $4046=($4045|0)!=0;
 if($4046){label=680;break;}else{label=684;break;}
 case 680: 
 var $4048=$2;
 var $4049=$6;
 var $4050=(($4049+132)|0);
 var $4051=HEAP32[(($4050)>>2)];
 var $4052=($4048>>>0)>($4051>>>0);
 if($4052){label=681;break;}else{label=684;break;}
 case 681: 
 var $4054=$6;
 var $4055=(($4054+100)|0);
 HEAP32[(($4055)>>2)]=1;
 var $4056=$6;
 var $4057=(($4056+136)|0);
 var $4058=HEAP32[(($4057)>>2)];
 var $4059=($4058|0)>1;
 if($4059){label=682;break;}else{label=683;break;}
 case 682: 
 $1=-12;
 label=1658;break;
 case 683: 
 label=684;break;
 case 684: 
 $1=0;
 label=1658;break;
 case 685: 
 var $4064=$2;
 var $4065=(($4064+1)|0);
 $2=$4065;
 var $4066=HEAP8[($4064)];
 var $4067=($4066&255);
 $c=$4067;
 var $4068=$c;
 if(($4068|0)==10|($4068|0)==11|($4068|0)==12|($4068|0)==13|($4068|0)==133|($4068|0)==8232|($4068|0)==8233){ label=686;break;}else{label=687;break;}
 case 686: 
 $1=0;
 label=1658;break;
 case 687: 
 label=688;break;
 case 688: 
 var $4072=$3;
 var $4073=(($4072+1)|0);
 $3=$4073;
 label=1657;break;
 case 689: 
 var $4075=$2;
 var $4076=$6;
 var $4077=(($4076+120)|0);
 var $4078=HEAP32[(($4077)>>2)];
 var $4079=($4075>>>0)>=($4078>>>0);
 if($4079){label=690;break;}else{label=696;break;}
 case 690: 
 var $4081=$6;
 var $4082=(($4081+136)|0);
 var $4083=HEAP32[(($4082)>>2)];
 var $4084=($4083|0)!=0;
 if($4084){label=691;break;}else{label=695;break;}
 case 691: 
 var $4086=$2;
 var $4087=$6;
 var $4088=(($4087+132)|0);
 var $4089=HEAP32[(($4088)>>2)];
 var $4090=($4086>>>0)>($4089>>>0);
 if($4090){label=692;break;}else{label=695;break;}
 case 692: 
 var $4092=$6;
 var $4093=(($4092+100)|0);
 HEAP32[(($4093)>>2)]=1;
 var $4094=$6;
 var $4095=(($4094+136)|0);
 var $4096=HEAP32[(($4095)>>2)];
 var $4097=($4096|0)>1;
 if($4097){label=693;break;}else{label=694;break;}
 case 693: 
 $1=-12;
 label=1658;break;
 case 694: 
 label=695;break;
 case 695: 
 $1=0;
 label=1658;break;
 case 696: 
 var $4102=$2;
 var $4103=(($4102+1)|0);
 $2=$4103;
 var $4104=HEAP8[($4102)];
 var $4105=($4104&255);
 $c=$4105;
 var $4106=$c;
 if(($4106|0)==10|($4106|0)==11|($4106|0)==12|($4106|0)==13|($4106|0)==133|($4106|0)==8232|($4106|0)==8233){ label=697;break;}else{label=698;break;}
 case 697: 
 label=699;break;
 case 698: 
 $1=0;
 label=1658;break;
 case 699: 
 var $4110=$3;
 var $4111=(($4110+1)|0);
 $3=$4111;
 label=1657;break;
 case 700: 
 var $4113=$op;
 var $4114=($4113|0)==116;
 var $4115=($4114&1);
 $caseless=$4115;
 var $4116=$3;
 var $4117=(($4116+3)|0);
 var $4118=HEAP8[($4117)];
 var $4119=($4118&255);
 var $4120=$4119<<8;
 var $4121=$3;
 var $4122=(($4121+4)|0);
 var $4123=HEAP8[($4122)];
 var $4124=($4123&255);
 var $4125=$4120|$4124;
 $count6=$4125;
 var $4126=$6;
 var $4127=(($4126+48)|0);
 var $4128=HEAP32[(($4127)>>2)];
 var $4129=$3;
 var $4130=(($4129+1)|0);
 var $4131=HEAP8[($4130)];
 var $4132=($4131&255);
 var $4133=$4132<<8;
 var $4134=$3;
 var $4135=(($4134+2)|0);
 var $4136=HEAP8[($4135)];
 var $4137=($4136&255);
 var $4138=$4133|$4137;
 var $4139=$6;
 var $4140=(($4139+36)|0);
 var $4141=HEAP32[(($4140)>>2)];
 var $4142=(Math_imul($4138,$4141)|0);
 var $4143=(($4128+$4142)|0);
 $slot7=$4143;
 var $4144=$3;
 var $4145=(($4144+5)|0);
 $3=$4145;
 var $4146=$6;
 var $4147=(($4146+80)|0);
 var $4148=HEAP32[(($4147)>>2)];
 var $4149=($4148|0)!=0;
 var $4150=($4149?0:-1);
 $length=$4150;
 $offset=0;
 label=701;break;
 case 701: 
 var $4152=$count6;
 var $4153=((($4152)-(1))|0);
 $count6=$4153;
 var $4154=($4152|0)>0;
 if($4154){label=702;break;}else{label=706;break;}
 case 702: 
 var $4156=$slot7;
 var $4157=(($4156)|0);
 var $4158=HEAP8[($4157)];
 var $4159=($4158&255);
 var $4160=$4159<<8;
 var $4161=$slot7;
 var $4162=(($4161+1)|0);
 var $4163=HEAP8[($4162)];
 var $4164=($4163&255);
 var $4165=$4160|$4164;
 var $4166=$4165<<1;
 $offset=$4166;
 var $4167=$offset;
 var $4168=$5;
 var $4169=($4167|0)<($4168|0);
 if($4169){label=703;break;}else{label=705;break;}
 case 703: 
 var $4171=$offset;
 var $4172=$6;
 var $4173=(($4172+12)|0);
 var $4174=HEAP32[(($4173)>>2)];
 var $4175=(($4174+($4171<<2))|0);
 var $4176=HEAP32[(($4175)>>2)];
 var $4177=($4176|0)>=0;
 if($4177){label=704;break;}else{label=705;break;}
 case 704: 
 var $4179=$offset;
 var $4180=((($4179)+(1))|0);
 var $4181=$6;
 var $4182=(($4181+12)|0);
 var $4183=HEAP32[(($4182)>>2)];
 var $4184=(($4183+($4180<<2))|0);
 var $4185=HEAP32[(($4184)>>2)];
 var $4186=$offset;
 var $4187=$6;
 var $4188=(($4187+12)|0);
 var $4189=HEAP32[(($4188)>>2)];
 var $4190=(($4189+($4186<<2))|0);
 var $4191=HEAP32[(($4190)>>2)];
 var $4192=((($4185)-($4191))|0);
 $length=$4192;
 label=706;break;
 case 705: 
 var $4194=$6;
 var $4195=(($4194+36)|0);
 var $4196=HEAP32[(($4195)>>2)];
 var $4197=$slot7;
 var $4198=(($4197+$4196)|0);
 $slot7=$4198;
 label=701;break;
 case 706: 
 label=712;break;
 case 707: 
 var $4201=$op;
 var $4202=($4201|0)==114;
 var $4203=($4202&1);
 $caseless=$4203;
 var $4204=$3;
 var $4205=(($4204+1)|0);
 var $4206=HEAP8[($4205)];
 var $4207=($4206&255);
 var $4208=$4207<<8;
 var $4209=$3;
 var $4210=(($4209+2)|0);
 var $4211=HEAP8[($4210)];
 var $4212=($4211&255);
 var $4213=$4208|$4212;
 var $4214=$4213<<1;
 $offset=$4214;
 var $4215=$3;
 var $4216=(($4215+3)|0);
 $3=$4216;
 var $4217=$offset;
 var $4218=$5;
 var $4219=($4217|0)>=($4218|0);
 if($4219){label=709;break;}else{label=708;break;}
 case 708: 
 var $4221=$offset;
 var $4222=$6;
 var $4223=(($4222+12)|0);
 var $4224=HEAP32[(($4223)>>2)];
 var $4225=(($4224+($4221<<2))|0);
 var $4226=HEAP32[(($4225)>>2)];
 var $4227=($4226|0)<0;
 if($4227){label=709;break;}else{label=710;break;}
 case 709: 
 var $4229=$6;
 var $4230=(($4229+80)|0);
 var $4231=HEAP32[(($4230)>>2)];
 var $4232=($4231|0)!=0;
 var $4233=($4232?0:-1);
 $length=$4233;
 label=711;break;
 case 710: 
 var $4235=$offset;
 var $4236=((($4235)+(1))|0);
 var $4237=$6;
 var $4238=(($4237+12)|0);
 var $4239=HEAP32[(($4238)>>2)];
 var $4240=(($4239+($4236<<2))|0);
 var $4241=HEAP32[(($4240)>>2)];
 var $4242=$offset;
 var $4243=$6;
 var $4244=(($4243+12)|0);
 var $4245=HEAP32[(($4244)>>2)];
 var $4246=(($4245+($4242<<2))|0);
 var $4247=HEAP32[(($4246)>>2)];
 var $4248=((($4241)-($4247))|0);
 $length=$4248;
 label=711;break;
 case 711: 
 label=712;break;
 case 712: 
 var $4251=$3;
 var $4252=HEAP8[($4251)];
 var $4253=($4252&255);
 switch(($4253|0)){case 98:case 99:case 100:case 101:case 102:case 103:{ label=713;break;}case 104:case 105:{ label=716;break;}default:{label=719;break;}}break;
 case 713: 
 var $4255=$3;
 var $4256=(($4255+1)|0);
 $3=$4256;
 var $4257=HEAP8[($4255)];
 var $4258=($4257&255);
 var $4259=((($4258)-(98))|0);
 $c=$4259;
 var $4260=$c;
 var $4261=$4260&1;
 var $4262=($4261|0)!=0;
 var $4263=($4262&1);
 $minimize=$4263;
 var $4264=$c;
 var $4265=((200+$4264)|0);
 var $4266=HEAP8[($4265)];
 var $4267=(($4266<<24)>>24);
 $min=$4267;
 var $4268=$c;
 var $4269=((216+$4268)|0);
 var $4270=HEAP8[($4269)];
 var $4271=(($4270<<24)>>24);
 $max=$4271;
 var $4272=$max;
 var $4273=($4272|0)==0;
 if($4273){label=714;break;}else{label=715;break;}
 case 714: 
 $max=2147483647;
 label=715;break;
 case 715: 
 label=730;break;
 case 716: 
 var $4277=$3;
 var $4278=HEAP8[($4277)];
 var $4279=($4278&255);
 var $4280=($4279|0)==105;
 var $4281=($4280&1);
 $minimize=$4281;
 var $4282=$3;
 var $4283=(($4282+1)|0);
 var $4284=HEAP8[($4283)];
 var $4285=($4284&255);
 var $4286=$4285<<8;
 var $4287=$3;
 var $4288=(($4287+2)|0);
 var $4289=HEAP8[($4288)];
 var $4290=($4289&255);
 var $4291=$4286|$4290;
 $min=$4291;
 var $4292=$3;
 var $4293=(($4292+3)|0);
 var $4294=HEAP8[($4293)];
 var $4295=($4294&255);
 var $4296=$4295<<8;
 var $4297=$3;
 var $4298=(($4297+4)|0);
 var $4299=HEAP8[($4298)];
 var $4300=($4299&255);
 var $4301=$4296|$4300;
 $max=$4301;
 var $4302=$max;
 var $4303=($4302|0)==0;
 if($4303){label=717;break;}else{label=718;break;}
 case 717: 
 $max=2147483647;
 label=718;break;
 case 718: 
 var $4306=$3;
 var $4307=(($4306+5)|0);
 $3=$4307;
 label=730;break;
 case 719: 
 var $4309=$offset;
 var $4310=$2;
 var $4311=$length;
 var $4312=$6;
 var $4313=$caseless;
 var $4314=_match_ref($4309,$4310,$4311,$4312,$4313);
 $length=$4314;
 var $4315=($4314|0)<0;
 if($4315){label=720;break;}else{label=729;break;}
 case 720: 
 var $4317=$length;
 var $4318=($4317|0)==-2;
 if($4318){label=721;break;}else{label=722;break;}
 case 721: 
 var $4320=$6;
 var $4321=(($4320+120)|0);
 var $4322=HEAP32[(($4321)>>2)];
 $2=$4322;
 label=722;break;
 case 722: 
 var $4324=$6;
 var $4325=(($4324+136)|0);
 var $4326=HEAP32[(($4325)>>2)];
 var $4327=($4326|0)!=0;
 if($4327){label=723;break;}else{label=728;break;}
 case 723: 
 var $4329=$2;
 var $4330=$6;
 var $4331=(($4330+120)|0);
 var $4332=HEAP32[(($4331)>>2)];
 var $4333=($4329>>>0)>=($4332>>>0);
 if($4333){label=724;break;}else{label=728;break;}
 case 724: 
 var $4335=$2;
 var $4336=$6;
 var $4337=(($4336+132)|0);
 var $4338=HEAP32[(($4337)>>2)];
 var $4339=($4335>>>0)>($4338>>>0);
 if($4339){label=725;break;}else{label=728;break;}
 case 725: 
 var $4341=$6;
 var $4342=(($4341+100)|0);
 HEAP32[(($4342)>>2)]=1;
 var $4343=$6;
 var $4344=(($4343+136)|0);
 var $4345=HEAP32[(($4344)>>2)];
 var $4346=($4345|0)>1;
 if($4346){label=726;break;}else{label=727;break;}
 case 726: 
 $1=-12;
 label=1658;break;
 case 727: 
 label=728;break;
 case 728: 
 $1=0;
 label=1658;break;
 case 729: 
 var $4351=$length;
 var $4352=$2;
 var $4353=(($4352+$4351)|0);
 $2=$4353;
 label=16;break;
 case 730: 
 var $4355=$length;
 var $4356=($4355|0)==0;
 if($4356){label=731;break;}else{label=732;break;}
 case 731: 
 label=16;break;
 case 732: 
 var $4359=$length;
 var $4360=($4359|0)<0;
 if($4360){label=733;break;}else{label=735;break;}
 case 733: 
 var $4362=$min;
 var $4363=($4362|0)==0;
 if($4363){label=734;break;}else{label=735;break;}
 case 734: 
 label=16;break;
 case 735: 
 $i=1;
 label=736;break;
 case 736: 
 var $4367=$i;
 var $4368=$min;
 var $4369=($4367|0)<=($4368|0);
 if($4369){label=737;break;}else{label=749;break;}
 case 737: 
 var $4371=$offset;
 var $4372=$2;
 var $4373=$length;
 var $4374=$6;
 var $4375=$caseless;
 var $4376=_match_ref($4371,$4372,$4373,$4374,$4375);
 $slength=$4376;
 var $4377=($4376|0)<0;
 if($4377){label=738;break;}else{label=747;break;}
 case 738: 
 var $4379=$slength;
 var $4380=($4379|0)==-2;
 if($4380){label=739;break;}else{label=740;break;}
 case 739: 
 var $4382=$6;
 var $4383=(($4382+120)|0);
 var $4384=HEAP32[(($4383)>>2)];
 $2=$4384;
 label=740;break;
 case 740: 
 var $4386=$6;
 var $4387=(($4386+136)|0);
 var $4388=HEAP32[(($4387)>>2)];
 var $4389=($4388|0)!=0;
 if($4389){label=741;break;}else{label=746;break;}
 case 741: 
 var $4391=$2;
 var $4392=$6;
 var $4393=(($4392+120)|0);
 var $4394=HEAP32[(($4393)>>2)];
 var $4395=($4391>>>0)>=($4394>>>0);
 if($4395){label=742;break;}else{label=746;break;}
 case 742: 
 var $4397=$2;
 var $4398=$6;
 var $4399=(($4398+132)|0);
 var $4400=HEAP32[(($4399)>>2)];
 var $4401=($4397>>>0)>($4400>>>0);
 if($4401){label=743;break;}else{label=746;break;}
 case 743: 
 var $4403=$6;
 var $4404=(($4403+100)|0);
 HEAP32[(($4404)>>2)]=1;
 var $4405=$6;
 var $4406=(($4405+136)|0);
 var $4407=HEAP32[(($4406)>>2)];
 var $4408=($4407|0)>1;
 if($4408){label=744;break;}else{label=745;break;}
 case 744: 
 $1=-12;
 label=1658;break;
 case 745: 
 label=746;break;
 case 746: 
 $1=0;
 label=1658;break;
 case 747: 
 var $4413=$slength;
 var $4414=$2;
 var $4415=(($4414+$4413)|0);
 $2=$4415;
 label=748;break;
 case 748: 
 var $4417=$i;
 var $4418=((($4417)+(1))|0);
 $i=$4418;
 label=736;break;
 case 749: 
 var $4420=$min;
 var $4421=$max;
 var $4422=($4420|0)==($4421|0);
 if($4422){label=750;break;}else{label=751;break;}
 case 750: 
 label=16;break;
 case 751: 
 var $4425=$minimize;
 var $4426=($4425|0)!=0;
 if($4426){label=752;break;}else{label=769;break;}
 case 752: 
 var $4428=$min;
 $i=$4428;
 label=753;break;
 case 753: 
 var $4430=$2;
 var $4431=$3;
 var $4432=$4;
 var $4433=$5;
 var $4434=$6;
 var $4435=$7;
 var $4436=HEAP32[(($8)>>2)];
 var $4437=((($4436)+(1))|0);
 var $4438=_match($4430,$4431,$4432,$4433,$4434,$4435,$4437);
 $rrc=$4438;
 var $4439=$rrc;
 var $4440=($4439|0)!=0;
 if($4440){label=754;break;}else{label=755;break;}
 case 754: 
 var $4442=$rrc;
 $1=$4442;
 label=1658;break;
 case 755: 
 var $4444=$i;
 var $4445=$max;
 var $4446=($4444|0)>=($4445|0);
 if($4446){label=756;break;}else{label=757;break;}
 case 756: 
 $1=0;
 label=1658;break;
 case 757: 
 var $4449=$offset;
 var $4450=$2;
 var $4451=$length;
 var $4452=$6;
 var $4453=$caseless;
 var $4454=_match_ref($4449,$4450,$4451,$4452,$4453);
 $slength8=$4454;
 var $4455=($4454|0)<0;
 if($4455){label=758;break;}else{label=767;break;}
 case 758: 
 var $4457=$slength8;
 var $4458=($4457|0)==-2;
 if($4458){label=759;break;}else{label=760;break;}
 case 759: 
 var $4460=$6;
 var $4461=(($4460+120)|0);
 var $4462=HEAP32[(($4461)>>2)];
 $2=$4462;
 label=760;break;
 case 760: 
 var $4464=$6;
 var $4465=(($4464+136)|0);
 var $4466=HEAP32[(($4465)>>2)];
 var $4467=($4466|0)!=0;
 if($4467){label=761;break;}else{label=766;break;}
 case 761: 
 var $4469=$2;
 var $4470=$6;
 var $4471=(($4470+120)|0);
 var $4472=HEAP32[(($4471)>>2)];
 var $4473=($4469>>>0)>=($4472>>>0);
 if($4473){label=762;break;}else{label=766;break;}
 case 762: 
 var $4475=$2;
 var $4476=$6;
 var $4477=(($4476+132)|0);
 var $4478=HEAP32[(($4477)>>2)];
 var $4479=($4475>>>0)>($4478>>>0);
 if($4479){label=763;break;}else{label=766;break;}
 case 763: 
 var $4481=$6;
 var $4482=(($4481+100)|0);
 HEAP32[(($4482)>>2)]=1;
 var $4483=$6;
 var $4484=(($4483+136)|0);
 var $4485=HEAP32[(($4484)>>2)];
 var $4486=($4485|0)>1;
 if($4486){label=764;break;}else{label=765;break;}
 case 764: 
 $1=-12;
 label=1658;break;
 case 765: 
 label=766;break;
 case 766: 
 $1=0;
 label=1658;break;
 case 767: 
 var $4491=$slength8;
 var $4492=$2;
 var $4493=(($4492+$4491)|0);
 $2=$4493;
 label=768;break;
 case 768: 
 var $4495=$i;
 var $4496=((($4495)+(1))|0);
 $i=$4496;
 label=753;break;
 case 769: 
 var $4498=$2;
 $pp=$4498;
 var $4499=$min;
 $i=$4499;
 label=770;break;
 case 770: 
 var $4501=$i;
 var $4502=$max;
 var $4503=($4501|0)<($4502|0);
 if($4503){label=771;break;}else{label=781;break;}
 case 771: 
 var $4505=$offset;
 var $4506=$2;
 var $4507=$length;
 var $4508=$6;
 var $4509=$caseless;
 var $4510=_match_ref($4505,$4506,$4507,$4508,$4509);
 $slength9=$4510;
 var $4511=($4510|0)<0;
 if($4511){label=772;break;}else{label=779;break;}
 case 772: 
 var $4513=$slength9;
 var $4514=($4513|0)==-2;
 if($4514){label=773;break;}else{label=778;break;}
 case 773: 
 var $4516=$6;
 var $4517=(($4516+136)|0);
 var $4518=HEAP32[(($4517)>>2)];
 var $4519=($4518|0)!=0;
 if($4519){label=774;break;}else{label=778;break;}
 case 774: 
 var $4521=$6;
 var $4522=(($4521+120)|0);
 var $4523=HEAP32[(($4522)>>2)];
 var $4524=$6;
 var $4525=(($4524+132)|0);
 var $4526=HEAP32[(($4525)>>2)];
 var $4527=($4523>>>0)>($4526>>>0);
 if($4527){label=775;break;}else{label=778;break;}
 case 775: 
 var $4529=$6;
 var $4530=(($4529+100)|0);
 HEAP32[(($4530)>>2)]=1;
 var $4531=$6;
 var $4532=(($4531+136)|0);
 var $4533=HEAP32[(($4532)>>2)];
 var $4534=($4533|0)>1;
 if($4534){label=776;break;}else{label=777;break;}
 case 776: 
 $1=-12;
 label=1658;break;
 case 777: 
 label=778;break;
 case 778: 
 label=781;break;
 case 779: 
 var $4539=$slength9;
 var $4540=$2;
 var $4541=(($4540+$4539)|0);
 $2=$4541;
 label=780;break;
 case 780: 
 var $4543=$i;
 var $4544=((($4543)+(1))|0);
 $i=$4544;
 label=770;break;
 case 781: 
 label=782;break;
 case 782: 
 var $4547=$2;
 var $4548=$pp;
 var $4549=($4547>>>0)>=($4548>>>0);
 if($4549){label=783;break;}else{label=786;break;}
 case 783: 
 var $4551=$2;
 var $4552=$3;
 var $4553=$4;
 var $4554=$5;
 var $4555=$6;
 var $4556=$7;
 var $4557=HEAP32[(($8)>>2)];
 var $4558=((($4557)+(1))|0);
 var $4559=_match($4551,$4552,$4553,$4554,$4555,$4556,$4558);
 $rrc=$4559;
 var $4560=$rrc;
 var $4561=($4560|0)!=0;
 if($4561){label=784;break;}else{label=785;break;}
 case 784: 
 var $4563=$rrc;
 $1=$4563;
 label=1658;break;
 case 785: 
 var $4565=$length;
 var $4566=$2;
 var $4567=(((-$4565))|0);
 var $4568=(($4566+$4567)|0);
 $2=$4568;
 label=782;break;
 case 786: 
 $1=0;
 label=1658;break;
 case 787: 
 var $4571=$3;
 var $4572=(($4571+1)|0);
 $data=$4572;
 var $4573=$3;
 var $4574=(($4573+33)|0);
 $3=$4574;
 var $4575=$3;
 var $4576=HEAP8[($4575)];
 var $4577=($4576&255);
 switch(($4577|0)){case 98:case 99:case 100:case 101:case 102:case 103:case 106:case 107:case 108:{ label=788;break;}case 104:case 105:case 109:{ label=794;break;}default:{label=797;break;}}break;
 case 788: 
 var $4579=$3;
 var $4580=(($4579+1)|0);
 $3=$4580;
 var $4581=HEAP8[($4579)];
 var $4582=($4581&255);
 var $4583=((($4582)-(98))|0);
 $c=$4583;
 var $4584=$c;
 var $4585=($4584>>>0)<8;
 if($4585){label=789;break;}else{label=790;break;}
 case 789: 
 var $4587=$c;
 var $4588=$4587&1;
 var $4589=($4588|0)!=0;
 var $4590=($4589&1);
 $minimize=$4590;
 label=791;break;
 case 790: 
 $possessive=1;
 label=791;break;
 case 791: 
 var $4593=$c;
 var $4594=((200+$4593)|0);
 var $4595=HEAP8[($4594)];
 var $4596=(($4595<<24)>>24);
 $min=$4596;
 var $4597=$c;
 var $4598=((216+$4597)|0);
 var $4599=HEAP8[($4598)];
 var $4600=(($4599<<24)>>24);
 $max=$4600;
 var $4601=$max;
 var $4602=($4601|0)==0;
 if($4602){label=792;break;}else{label=793;break;}
 case 792: 
 $max=2147483647;
 label=793;break;
 case 793: 
 label=798;break;
 case 794: 
 var $4606=$3;
 var $4607=HEAP8[($4606)];
 var $4608=($4607&255);
 var $4609=($4608|0)==105;
 var $4610=($4609&1);
 $minimize=$4610;
 var $4611=$3;
 var $4612=HEAP8[($4611)];
 var $4613=($4612&255);
 var $4614=($4613|0)==109;
 var $4615=($4614&1);
 $possessive=$4615;
 var $4616=$3;
 var $4617=(($4616+1)|0);
 var $4618=HEAP8[($4617)];
 var $4619=($4618&255);
 var $4620=$4619<<8;
 var $4621=$3;
 var $4622=(($4621+2)|0);
 var $4623=HEAP8[($4622)];
 var $4624=($4623&255);
 var $4625=$4620|$4624;
 $min=$4625;
 var $4626=$3;
 var $4627=(($4626+3)|0);
 var $4628=HEAP8[($4627)];
 var $4629=($4628&255);
 var $4630=$4629<<8;
 var $4631=$3;
 var $4632=(($4631+4)|0);
 var $4633=HEAP8[($4632)];
 var $4634=($4633&255);
 var $4635=$4630|$4634;
 $max=$4635;
 var $4636=$max;
 var $4637=($4636|0)==0;
 if($4637){label=795;break;}else{label=796;break;}
 case 795: 
 $max=2147483647;
 label=796;break;
 case 796: 
 var $4640=$3;
 var $4641=(($4640+5)|0);
 $3=$4641;
 label=798;break;
 case 797: 
 $max=1;
 $min=1;
 label=798;break;
 case 798: 
 $i=1;
 label=799;break;
 case 799: 
 var $4645=$i;
 var $4646=$min;
 var $4647=($4645|0)<=($4646|0);
 if($4647){label=800;break;}else{label=811;break;}
 case 800: 
 var $4649=$2;
 var $4650=$6;
 var $4651=(($4650+120)|0);
 var $4652=HEAP32[(($4651)>>2)];
 var $4653=($4649>>>0)>=($4652>>>0);
 if($4653){label=801;break;}else{label=807;break;}
 case 801: 
 var $4655=$6;
 var $4656=(($4655+136)|0);
 var $4657=HEAP32[(($4656)>>2)];
 var $4658=($4657|0)!=0;
 if($4658){label=802;break;}else{label=806;break;}
 case 802: 
 var $4660=$2;
 var $4661=$6;
 var $4662=(($4661+132)|0);
 var $4663=HEAP32[(($4662)>>2)];
 var $4664=($4660>>>0)>($4663>>>0);
 if($4664){label=803;break;}else{label=806;break;}
 case 803: 
 var $4666=$6;
 var $4667=(($4666+100)|0);
 HEAP32[(($4667)>>2)]=1;
 var $4668=$6;
 var $4669=(($4668+136)|0);
 var $4670=HEAP32[(($4669)>>2)];
 var $4671=($4670|0)>1;
 if($4671){label=804;break;}else{label=805;break;}
 case 804: 
 $1=-12;
 label=1658;break;
 case 805: 
 label=806;break;
 case 806: 
 $1=0;
 label=1658;break;
 case 807: 
 var $4676=$2;
 var $4677=(($4676+1)|0);
 $2=$4677;
 var $4678=HEAP8[($4676)];
 var $4679=($4678&255);
 $c=$4679;
 var $4680=$c;
 var $4681=(((($4680>>>0))/(8))&-1);
 var $4682=$data;
 var $4683=(($4682+$4681)|0);
 var $4684=HEAP8[($4683)];
 var $4685=($4684&255);
 var $4686=$c;
 var $4687=$4686&7;
 var $4688=1<<$4687;
 var $4689=$4685&$4688;
 var $4690=($4689|0)==0;
 if($4690){label=808;break;}else{label=809;break;}
 case 808: 
 $1=0;
 label=1658;break;
 case 809: 
 label=810;break;
 case 810: 
 var $4694=$i;
 var $4695=((($4694)+(1))|0);
 $i=$4695;
 label=799;break;
 case 811: 
 var $4697=$min;
 var $4698=$max;
 var $4699=($4697|0)==($4698|0);
 if($4699){label=812;break;}else{label=813;break;}
 case 812: 
 label=16;break;
 case 813: 
 var $4702=$minimize;
 var $4703=($4702|0)!=0;
 if($4703){label=814;break;}else{label=830;break;}
 case 814: 
 var $4705=$min;
 $i=$4705;
 label=815;break;
 case 815: 
 var $4707=$2;
 var $4708=$3;
 var $4709=$4;
 var $4710=$5;
 var $4711=$6;
 var $4712=$7;
 var $4713=HEAP32[(($8)>>2)];
 var $4714=((($4713)+(1))|0);
 var $4715=_match($4707,$4708,$4709,$4710,$4711,$4712,$4714);
 $rrc=$4715;
 var $4716=$rrc;
 var $4717=($4716|0)!=0;
 if($4717){label=816;break;}else{label=817;break;}
 case 816: 
 var $4719=$rrc;
 $1=$4719;
 label=1658;break;
 case 817: 
 var $4721=$i;
 var $4722=$max;
 var $4723=($4721|0)>=($4722|0);
 if($4723){label=818;break;}else{label=819;break;}
 case 818: 
 $1=0;
 label=1658;break;
 case 819: 
 var $4726=$2;
 var $4727=$6;
 var $4728=(($4727+120)|0);
 var $4729=HEAP32[(($4728)>>2)];
 var $4730=($4726>>>0)>=($4729>>>0);
 if($4730){label=820;break;}else{label=826;break;}
 case 820: 
 var $4732=$6;
 var $4733=(($4732+136)|0);
 var $4734=HEAP32[(($4733)>>2)];
 var $4735=($4734|0)!=0;
 if($4735){label=821;break;}else{label=825;break;}
 case 821: 
 var $4737=$2;
 var $4738=$6;
 var $4739=(($4738+132)|0);
 var $4740=HEAP32[(($4739)>>2)];
 var $4741=($4737>>>0)>($4740>>>0);
 if($4741){label=822;break;}else{label=825;break;}
 case 822: 
 var $4743=$6;
 var $4744=(($4743+100)|0);
 HEAP32[(($4744)>>2)]=1;
 var $4745=$6;
 var $4746=(($4745+136)|0);
 var $4747=HEAP32[(($4746)>>2)];
 var $4748=($4747|0)>1;
 if($4748){label=823;break;}else{label=824;break;}
 case 823: 
 $1=-12;
 label=1658;break;
 case 824: 
 label=825;break;
 case 825: 
 $1=0;
 label=1658;break;
 case 826: 
 var $4753=$2;
 var $4754=(($4753+1)|0);
 $2=$4754;
 var $4755=HEAP8[($4753)];
 var $4756=($4755&255);
 $c=$4756;
 var $4757=$c;
 var $4758=(((($4757>>>0))/(8))&-1);
 var $4759=$data;
 var $4760=(($4759+$4758)|0);
 var $4761=HEAP8[($4760)];
 var $4762=($4761&255);
 var $4763=$c;
 var $4764=$4763&7;
 var $4765=1<<$4764;
 var $4766=$4762&$4765;
 var $4767=($4766|0)==0;
 if($4767){label=827;break;}else{label=828;break;}
 case 827: 
 $1=0;
 label=1658;break;
 case 828: 
 label=829;break;
 case 829: 
 var $4771=$i;
 var $4772=((($4771)+(1))|0);
 $i=$4772;
 label=815;break;
 case 830: 
 var $4774=$2;
 $pp=$4774;
 var $4775=$min;
 $i=$4775;
 label=831;break;
 case 831: 
 var $4777=$i;
 var $4778=$max;
 var $4779=($4777|0)<($4778|0);
 if($4779){label=832;break;}else{label=843;break;}
 case 832: 
 var $4781=$2;
 var $4782=$6;
 var $4783=(($4782+120)|0);
 var $4784=HEAP32[(($4783)>>2)];
 var $4785=($4781>>>0)>=($4784>>>0);
 if($4785){label=833;break;}else{label=839;break;}
 case 833: 
 var $4787=$6;
 var $4788=(($4787+136)|0);
 var $4789=HEAP32[(($4788)>>2)];
 var $4790=($4789|0)!=0;
 if($4790){label=834;break;}else{label=838;break;}
 case 834: 
 var $4792=$2;
 var $4793=$6;
 var $4794=(($4793+132)|0);
 var $4795=HEAP32[(($4794)>>2)];
 var $4796=($4792>>>0)>($4795>>>0);
 if($4796){label=835;break;}else{label=838;break;}
 case 835: 
 var $4798=$6;
 var $4799=(($4798+100)|0);
 HEAP32[(($4799)>>2)]=1;
 var $4800=$6;
 var $4801=(($4800+136)|0);
 var $4802=HEAP32[(($4801)>>2)];
 var $4803=($4802|0)>1;
 if($4803){label=836;break;}else{label=837;break;}
 case 836: 
 $1=-12;
 label=1658;break;
 case 837: 
 label=838;break;
 case 838: 
 label=843;break;
 case 839: 
 var $4808=$2;
 var $4809=HEAP8[($4808)];
 var $4810=($4809&255);
 $c=$4810;
 var $4811=$c;
 var $4812=(((($4811>>>0))/(8))&-1);
 var $4813=$data;
 var $4814=(($4813+$4812)|0);
 var $4815=HEAP8[($4814)];
 var $4816=($4815&255);
 var $4817=$c;
 var $4818=$4817&7;
 var $4819=1<<$4818;
 var $4820=$4816&$4819;
 var $4821=($4820|0)==0;
 if($4821){label=840;break;}else{label=841;break;}
 case 840: 
 label=843;break;
 case 841: 
 var $4824=$2;
 var $4825=(($4824+1)|0);
 $2=$4825;
 label=842;break;
 case 842: 
 var $4827=$i;
 var $4828=((($4827)+(1))|0);
 $i=$4828;
 label=831;break;
 case 843: 
 var $4830=$possessive;
 var $4831=($4830|0)!=0;
 if($4831){label=844;break;}else{label=845;break;}
 case 844: 
 label=16;break;
 case 845: 
 label=846;break;
 case 846: 
 var $4835=$2;
 var $4836=$pp;
 var $4837=($4835>>>0)>=($4836>>>0);
 if($4837){label=847;break;}else{label=850;break;}
 case 847: 
 var $4839=$2;
 var $4840=$3;
 var $4841=$4;
 var $4842=$5;
 var $4843=$6;
 var $4844=$7;
 var $4845=HEAP32[(($8)>>2)];
 var $4846=((($4845)+(1))|0);
 var $4847=_match($4839,$4840,$4841,$4842,$4843,$4844,$4846);
 $rrc=$4847;
 var $4848=$rrc;
 var $4849=($4848|0)!=0;
 if($4849){label=848;break;}else{label=849;break;}
 case 848: 
 var $4851=$rrc;
 $1=$4851;
 label=1658;break;
 case 849: 
 var $4853=$2;
 var $4854=((($4853)-(1))|0);
 $2=$4854;
 label=846;break;
 case 850: 
 $1=0;
 label=1658;break;
 case 851: 
 var $4857=$6;
 var $4858=(($4857+120)|0);
 var $4859=HEAP32[(($4858)>>2)];
 var $4860=$2;
 var $4861=$4859;
 var $4862=$4860;
 var $4863=((($4861)-($4862))|0);
 var $4864=($4863|0)<1;
 if($4864){label=852;break;}else{label=858;break;}
 case 852: 
 var $4866=$6;
 var $4867=(($4866+136)|0);
 var $4868=HEAP32[(($4867)>>2)];
 var $4869=($4868|0)!=0;
 if($4869){label=853;break;}else{label=857;break;}
 case 853: 
 var $4871=$2;
 var $4872=$6;
 var $4873=(($4872+132)|0);
 var $4874=HEAP32[(($4873)>>2)];
 var $4875=($4871>>>0)>($4874>>>0);
 if($4875){label=854;break;}else{label=857;break;}
 case 854: 
 var $4877=$6;
 var $4878=(($4877+100)|0);
 HEAP32[(($4878)>>2)]=1;
 var $4879=$6;
 var $4880=(($4879+136)|0);
 var $4881=HEAP32[(($4880)>>2)];
 var $4882=($4881|0)>1;
 if($4882){label=855;break;}else{label=856;break;}
 case 855: 
 $1=-12;
 label=1658;break;
 case 856: 
 label=857;break;
 case 857: 
 $1=0;
 label=1658;break;
 case 858: 
 var $4887=$3;
 var $4888=(($4887+1)|0);
 var $4889=HEAP8[($4888)];
 var $4890=($4889&255);
 var $4891=$2;
 var $4892=(($4891+1)|0);
 $2=$4892;
 var $4893=HEAP8[($4891)];
 var $4894=($4893&255);
 var $4895=($4890|0)!=($4894|0);
 if($4895){label=859;break;}else{label=860;break;}
 case 859: 
 $1=0;
 label=1658;break;
 case 860: 
 var $4898=$3;
 var $4899=(($4898+2)|0);
 $3=$4899;
 label=1657;break;
 case 861: 
 var $4901=$2;
 var $4902=$6;
 var $4903=(($4902+120)|0);
 var $4904=HEAP32[(($4903)>>2)];
 var $4905=($4901>>>0)>=($4904>>>0);
 if($4905){label=862;break;}else{label=868;break;}
 case 862: 
 var $4907=$6;
 var $4908=(($4907+136)|0);
 var $4909=HEAP32[(($4908)>>2)];
 var $4910=($4909|0)!=0;
 if($4910){label=863;break;}else{label=867;break;}
 case 863: 
 var $4912=$2;
 var $4913=$6;
 var $4914=(($4913+132)|0);
 var $4915=HEAP32[(($4914)>>2)];
 var $4916=($4912>>>0)>($4915>>>0);
 if($4916){label=864;break;}else{label=867;break;}
 case 864: 
 var $4918=$6;
 var $4919=(($4918+100)|0);
 HEAP32[(($4919)>>2)]=1;
 var $4920=$6;
 var $4921=(($4920+136)|0);
 var $4922=HEAP32[(($4921)>>2)];
 var $4923=($4922|0)>1;
 if($4923){label=865;break;}else{label=866;break;}
 case 865: 
 $1=-12;
 label=1658;break;
 case 866: 
 label=867;break;
 case 867: 
 $1=0;
 label=1658;break;
 case 868: 
 var $4928=$3;
 var $4929=(($4928+1)|0);
 var $4930=HEAP8[($4929)];
 var $4931=($4930&255);
 var $4932=$6;
 var $4933=(($4932+56)|0);
 var $4934=HEAP32[(($4933)>>2)];
 var $4935=(($4934+$4931)|0);
 var $4936=HEAP8[($4935)];
 var $4937=($4936&255);
 var $4938=$2;
 var $4939=HEAP8[($4938)];
 var $4940=($4939&255);
 var $4941=$6;
 var $4942=(($4941+56)|0);
 var $4943=HEAP32[(($4942)>>2)];
 var $4944=(($4943+$4940)|0);
 var $4945=HEAP8[($4944)];
 var $4946=($4945&255);
 var $4947=($4937|0)!=($4946|0);
 if($4947){label=869;break;}else{label=870;break;}
 case 869: 
 $1=0;
 label=1658;break;
 case 870: 
 var $4950=$2;
 var $4951=(($4950+1)|0);
 $2=$4951;
 var $4952=$3;
 var $4953=(($4952+2)|0);
 $3=$4953;
 label=1657;break;
 case 871: 
 var $4955=$3;
 var $4956=(($4955+1)|0);
 var $4957=HEAP8[($4956)];
 var $4958=($4957&255);
 var $4959=$4958<<8;
 var $4960=$3;
 var $4961=(($4960+2)|0);
 var $4962=HEAP8[($4961)];
 var $4963=($4962&255);
 var $4964=$4959|$4963;
 $max=$4964;
 $min=$4964;
 var $4965=$3;
 var $4966=(($4965+3)|0);
 $3=$4966;
 label=882;break;
 case 872: 
 $possessive=1;
 label=873;break;
 case 873: 
 $min=0;
 var $4969=$3;
 var $4970=(($4969+1)|0);
 var $4971=HEAP8[($4970)];
 var $4972=($4971&255);
 var $4973=$4972<<8;
 var $4974=$3;
 var $4975=(($4974+2)|0);
 var $4976=HEAP8[($4975)];
 var $4977=($4976&255);
 var $4978=$4973|$4977;
 $max=$4978;
 var $4979=$3;
 var $4980=HEAP8[($4979)];
 var $4981=($4980&255);
 var $4982=($4981|0)==40;
 if($4982){var $4989=1;label=875;break;}else{label=874;break;}
 case 874: 
 var $4984=$3;
 var $4985=HEAP8[($4984)];
 var $4986=($4985&255);
 var $4987=($4986|0)==53;
 var $4989=$4987;label=875;break;
 case 875: 
 var $4989;
 var $4990=($4989&1);
 $minimize=$4990;
 var $4991=$3;
 var $4992=(($4991+3)|0);
 $3=$4992;
 label=882;break;
 case 876: 
 $possessive=1;
 $min=0;
 $max=2147483647;
 var $4994=$3;
 var $4995=(($4994+1)|0);
 $3=$4995;
 label=882;break;
 case 877: 
 $possessive=1;
 $min=1;
 $max=2147483647;
 var $4997=$3;
 var $4998=(($4997+1)|0);
 $3=$4998;
 label=882;break;
 case 878: 
 $possessive=1;
 $min=0;
 $max=1;
 var $5000=$3;
 var $5001=(($5000+1)|0);
 $3=$5001;
 label=882;break;
 case 879: 
 var $5003=$3;
 var $5004=(($5003+1)|0);
 $3=$5004;
 var $5005=HEAP8[($5003)];
 var $5006=($5005&255);
 var $5007=$op;
 var $5008=($5007>>>0)<46;
 var $5009=($5008?33:46);
 var $5010=((($5006)-($5009))|0);
 $c=$5010;
 var $5011=$c;
 var $5012=$5011&1;
 var $5013=($5012|0)!=0;
 var $5014=($5013&1);
 $minimize=$5014;
 var $5015=$c;
 var $5016=((200+$5015)|0);
 var $5017=HEAP8[($5016)];
 var $5018=(($5017<<24)>>24);
 $min=$5018;
 var $5019=$c;
 var $5020=((216+$5019)|0);
 var $5021=HEAP8[($5020)];
 var $5022=(($5021<<24)>>24);
 $max=$5022;
 var $5023=$max;
 var $5024=($5023|0)==0;
 if($5024){label=880;break;}else{label=881;break;}
 case 880: 
 $max=2147483647;
 label=881;break;
 case 881: 
 label=882;break;
 case 882: 
 var $5028=$3;
 var $5029=(($5028+1)|0);
 $3=$5029;
 var $5030=HEAP8[($5028)];
 var $5031=($5030&255);
 $c=$5031;
 var $5032=$op;
 var $5033=($5032>>>0)>=46;
 if($5033){label=883;break;}else{label=939;break;}
 case 883: 
 var $5035=$c;
 var $5036=$6;
 var $5037=(($5036+60)|0);
 var $5038=HEAP32[(($5037)>>2)];
 var $5039=(($5038+$5035)|0);
 var $5040=HEAP8[($5039)];
 var $5041=($5040&255);
 $number=$5041;
 $i=1;
 label=884;break;
 case 884: 
 var $5043=$i;
 var $5044=$min;
 var $5045=($5043|0)<=($5044|0);
 if($5045){label=885;break;}else{label=897;break;}
 case 885: 
 var $5047=$2;
 var $5048=$6;
 var $5049=(($5048+120)|0);
 var $5050=HEAP32[(($5049)>>2)];
 var $5051=($5047>>>0)>=($5050>>>0);
 if($5051){label=886;break;}else{label=892;break;}
 case 886: 
 var $5053=$6;
 var $5054=(($5053+136)|0);
 var $5055=HEAP32[(($5054)>>2)];
 var $5056=($5055|0)!=0;
 if($5056){label=887;break;}else{label=891;break;}
 case 887: 
 var $5058=$2;
 var $5059=$6;
 var $5060=(($5059+132)|0);
 var $5061=HEAP32[(($5060)>>2)];
 var $5062=($5058>>>0)>($5061>>>0);
 if($5062){label=888;break;}else{label=891;break;}
 case 888: 
 var $5064=$6;
 var $5065=(($5064+100)|0);
 HEAP32[(($5065)>>2)]=1;
 var $5066=$6;
 var $5067=(($5066+136)|0);
 var $5068=HEAP32[(($5067)>>2)];
 var $5069=($5068|0)>1;
 if($5069){label=889;break;}else{label=890;break;}
 case 889: 
 $1=-12;
 label=1658;break;
 case 890: 
 label=891;break;
 case 891: 
 $1=0;
 label=1658;break;
 case 892: 
 var $5074=$2;
 var $5075=HEAP8[($5074)];
 var $5076=($5075&255);
 $cc=$5076;
 var $5077=$c;
 var $5078=$cc;
 var $5079=($5077|0)!=($5078|0);
 if($5079){label=893;break;}else{label=895;break;}
 case 893: 
 var $5081=$number;
 var $5082=$cc;
 var $5083=($5081|0)!=($5082|0);
 if($5083){label=894;break;}else{label=895;break;}
 case 894: 
 $1=0;
 label=1658;break;
 case 895: 
 var $5086=$2;
 var $5087=(($5086+1)|0);
 $2=$5087;
 label=896;break;
 case 896: 
 var $5089=$i;
 var $5090=((($5089)+(1))|0);
 $i=$5090;
 label=884;break;
 case 897: 
 var $5092=$min;
 var $5093=$max;
 var $5094=($5092|0)==($5093|0);
 if($5094){label=898;break;}else{label=899;break;}
 case 898: 
 label=16;break;
 case 899: 
 var $5097=$minimize;
 var $5098=($5097|0)!=0;
 if($5098){label=900;break;}else{label=917;break;}
 case 900: 
 var $5100=$min;
 $i=$5100;
 label=901;break;
 case 901: 
 var $5102=$2;
 var $5103=$3;
 var $5104=$4;
 var $5105=$5;
 var $5106=$6;
 var $5107=$7;
 var $5108=HEAP32[(($8)>>2)];
 var $5109=((($5108)+(1))|0);
 var $5110=_match($5102,$5103,$5104,$5105,$5106,$5107,$5109);
 $rrc=$5110;
 var $5111=$rrc;
 var $5112=($5111|0)!=0;
 if($5112){label=902;break;}else{label=903;break;}
 case 902: 
 var $5114=$rrc;
 $1=$5114;
 label=1658;break;
 case 903: 
 var $5116=$i;
 var $5117=$max;
 var $5118=($5116|0)>=($5117|0);
 if($5118){label=904;break;}else{label=905;break;}
 case 904: 
 $1=0;
 label=1658;break;
 case 905: 
 var $5121=$2;
 var $5122=$6;
 var $5123=(($5122+120)|0);
 var $5124=HEAP32[(($5123)>>2)];
 var $5125=($5121>>>0)>=($5124>>>0);
 if($5125){label=906;break;}else{label=912;break;}
 case 906: 
 var $5127=$6;
 var $5128=(($5127+136)|0);
 var $5129=HEAP32[(($5128)>>2)];
 var $5130=($5129|0)!=0;
 if($5130){label=907;break;}else{label=911;break;}
 case 907: 
 var $5132=$2;
 var $5133=$6;
 var $5134=(($5133+132)|0);
 var $5135=HEAP32[(($5134)>>2)];
 var $5136=($5132>>>0)>($5135>>>0);
 if($5136){label=908;break;}else{label=911;break;}
 case 908: 
 var $5138=$6;
 var $5139=(($5138+100)|0);
 HEAP32[(($5139)>>2)]=1;
 var $5140=$6;
 var $5141=(($5140+136)|0);
 var $5142=HEAP32[(($5141)>>2)];
 var $5143=($5142|0)>1;
 if($5143){label=909;break;}else{label=910;break;}
 case 909: 
 $1=-12;
 label=1658;break;
 case 910: 
 label=911;break;
 case 911: 
 $1=0;
 label=1658;break;
 case 912: 
 var $5148=$2;
 var $5149=HEAP8[($5148)];
 var $5150=($5149&255);
 $cc10=$5150;
 var $5151=$c;
 var $5152=$cc10;
 var $5153=($5151|0)!=($5152|0);
 if($5153){label=913;break;}else{label=915;break;}
 case 913: 
 var $5155=$number;
 var $5156=$cc10;
 var $5157=($5155|0)!=($5156|0);
 if($5157){label=914;break;}else{label=915;break;}
 case 914: 
 $1=0;
 label=1658;break;
 case 915: 
 var $5160=$2;
 var $5161=(($5160+1)|0);
 $2=$5161;
 label=916;break;
 case 916: 
 var $5163=$i;
 var $5164=((($5163)+(1))|0);
 $i=$5164;
 label=901;break;
 case 917: 
 var $5166=$2;
 $pp=$5166;
 var $5167=$min;
 $i=$5167;
 label=918;break;
 case 918: 
 var $5169=$i;
 var $5170=$max;
 var $5171=($5169|0)<($5170|0);
 if($5171){label=919;break;}else{label=931;break;}
 case 919: 
 var $5173=$2;
 var $5174=$6;
 var $5175=(($5174+120)|0);
 var $5176=HEAP32[(($5175)>>2)];
 var $5177=($5173>>>0)>=($5176>>>0);
 if($5177){label=920;break;}else{label=926;break;}
 case 920: 
 var $5179=$6;
 var $5180=(($5179+136)|0);
 var $5181=HEAP32[(($5180)>>2)];
 var $5182=($5181|0)!=0;
 if($5182){label=921;break;}else{label=925;break;}
 case 921: 
 var $5184=$2;
 var $5185=$6;
 var $5186=(($5185+132)|0);
 var $5187=HEAP32[(($5186)>>2)];
 var $5188=($5184>>>0)>($5187>>>0);
 if($5188){label=922;break;}else{label=925;break;}
 case 922: 
 var $5190=$6;
 var $5191=(($5190+100)|0);
 HEAP32[(($5191)>>2)]=1;
 var $5192=$6;
 var $5193=(($5192+136)|0);
 var $5194=HEAP32[(($5193)>>2)];
 var $5195=($5194|0)>1;
 if($5195){label=923;break;}else{label=924;break;}
 case 923: 
 $1=-12;
 label=1658;break;
 case 924: 
 label=925;break;
 case 925: 
 label=931;break;
 case 926: 
 var $5200=$2;
 var $5201=HEAP8[($5200)];
 var $5202=($5201&255);
 $cc11=$5202;
 var $5203=$c;
 var $5204=$cc11;
 var $5205=($5203|0)!=($5204|0);
 if($5205){label=927;break;}else{label=929;break;}
 case 927: 
 var $5207=$number;
 var $5208=$cc11;
 var $5209=($5207|0)!=($5208|0);
 if($5209){label=928;break;}else{label=929;break;}
 case 928: 
 label=931;break;
 case 929: 
 var $5212=$2;
 var $5213=(($5212+1)|0);
 $2=$5213;
 label=930;break;
 case 930: 
 var $5215=$i;
 var $5216=((($5215)+(1))|0);
 $i=$5216;
 label=918;break;
 case 931: 
 var $5218=$possessive;
 var $5219=($5218|0)!=0;
 if($5219){label=932;break;}else{label=933;break;}
 case 932: 
 label=16;break;
 case 933: 
 label=934;break;
 case 934: 
 var $5223=$2;
 var $5224=$pp;
 var $5225=($5223|0)==($5224|0);
 if($5225){label=935;break;}else{label=936;break;}
 case 935: 
 label=9;break;
 case 936: 
 var $5228=$2;
 var $5229=$3;
 var $5230=$4;
 var $5231=$5;
 var $5232=$6;
 var $5233=$7;
 var $5234=HEAP32[(($8)>>2)];
 var $5235=((($5234)+(1))|0);
 var $5236=_match($5228,$5229,$5230,$5231,$5232,$5233,$5235);
 $rrc=$5236;
 var $5237=$2;
 var $5238=((($5237)-(1))|0);
 $2=$5238;
 var $5239=$rrc;
 var $5240=($5239|0)!=0;
 if($5240){label=937;break;}else{label=938;break;}
 case 937: 
 var $5242=$rrc;
 $1=$5242;
 label=1658;break;
 case 938: 
 label=934;break;
 case 939: 
 $i=1;
 label=940;break;
 case 940: 
 var $5246=$i;
 var $5247=$min;
 var $5248=($5246|0)<=($5247|0);
 if($5248){label=941;break;}else{label=952;break;}
 case 941: 
 var $5250=$2;
 var $5251=$6;
 var $5252=(($5251+120)|0);
 var $5253=HEAP32[(($5252)>>2)];
 var $5254=($5250>>>0)>=($5253>>>0);
 if($5254){label=942;break;}else{label=948;break;}
 case 942: 
 var $5256=$6;
 var $5257=(($5256+136)|0);
 var $5258=HEAP32[(($5257)>>2)];
 var $5259=($5258|0)!=0;
 if($5259){label=943;break;}else{label=947;break;}
 case 943: 
 var $5261=$2;
 var $5262=$6;
 var $5263=(($5262+132)|0);
 var $5264=HEAP32[(($5263)>>2)];
 var $5265=($5261>>>0)>($5264>>>0);
 if($5265){label=944;break;}else{label=947;break;}
 case 944: 
 var $5267=$6;
 var $5268=(($5267+100)|0);
 HEAP32[(($5268)>>2)]=1;
 var $5269=$6;
 var $5270=(($5269+136)|0);
 var $5271=HEAP32[(($5270)>>2)];
 var $5272=($5271|0)>1;
 if($5272){label=945;break;}else{label=946;break;}
 case 945: 
 $1=-12;
 label=1658;break;
 case 946: 
 label=947;break;
 case 947: 
 $1=0;
 label=1658;break;
 case 948: 
 var $5277=$c;
 var $5278=$2;
 var $5279=(($5278+1)|0);
 $2=$5279;
 var $5280=HEAP8[($5278)];
 var $5281=($5280&255);
 var $5282=($5277|0)!=($5281|0);
 if($5282){label=949;break;}else{label=950;break;}
 case 949: 
 $1=0;
 label=1658;break;
 case 950: 
 label=951;break;
 case 951: 
 var $5286=$i;
 var $5287=((($5286)+(1))|0);
 $i=$5287;
 label=940;break;
 case 952: 
 var $5289=$min;
 var $5290=$max;
 var $5291=($5289|0)==($5290|0);
 if($5291){label=953;break;}else{label=954;break;}
 case 953: 
 label=16;break;
 case 954: 
 var $5294=$minimize;
 var $5295=($5294|0)!=0;
 if($5295){label=955;break;}else{label=971;break;}
 case 955: 
 var $5297=$min;
 $i=$5297;
 label=956;break;
 case 956: 
 var $5299=$2;
 var $5300=$3;
 var $5301=$4;
 var $5302=$5;
 var $5303=$6;
 var $5304=$7;
 var $5305=HEAP32[(($8)>>2)];
 var $5306=((($5305)+(1))|0);
 var $5307=_match($5299,$5300,$5301,$5302,$5303,$5304,$5306);
 $rrc=$5307;
 var $5308=$rrc;
 var $5309=($5308|0)!=0;
 if($5309){label=957;break;}else{label=958;break;}
 case 957: 
 var $5311=$rrc;
 $1=$5311;
 label=1658;break;
 case 958: 
 var $5313=$i;
 var $5314=$max;
 var $5315=($5313|0)>=($5314|0);
 if($5315){label=959;break;}else{label=960;break;}
 case 959: 
 $1=0;
 label=1658;break;
 case 960: 
 var $5318=$2;
 var $5319=$6;
 var $5320=(($5319+120)|0);
 var $5321=HEAP32[(($5320)>>2)];
 var $5322=($5318>>>0)>=($5321>>>0);
 if($5322){label=961;break;}else{label=967;break;}
 case 961: 
 var $5324=$6;
 var $5325=(($5324+136)|0);
 var $5326=HEAP32[(($5325)>>2)];
 var $5327=($5326|0)!=0;
 if($5327){label=962;break;}else{label=966;break;}
 case 962: 
 var $5329=$2;
 var $5330=$6;
 var $5331=(($5330+132)|0);
 var $5332=HEAP32[(($5331)>>2)];
 var $5333=($5329>>>0)>($5332>>>0);
 if($5333){label=963;break;}else{label=966;break;}
 case 963: 
 var $5335=$6;
 var $5336=(($5335+100)|0);
 HEAP32[(($5336)>>2)]=1;
 var $5337=$6;
 var $5338=(($5337+136)|0);
 var $5339=HEAP32[(($5338)>>2)];
 var $5340=($5339|0)>1;
 if($5340){label=964;break;}else{label=965;break;}
 case 964: 
 $1=-12;
 label=1658;break;
 case 965: 
 label=966;break;
 case 966: 
 $1=0;
 label=1658;break;
 case 967: 
 var $5345=$c;
 var $5346=$2;
 var $5347=(($5346+1)|0);
 $2=$5347;
 var $5348=HEAP8[($5346)];
 var $5349=($5348&255);
 var $5350=($5345|0)!=($5349|0);
 if($5350){label=968;break;}else{label=969;break;}
 case 968: 
 $1=0;
 label=1658;break;
 case 969: 
 label=970;break;
 case 970: 
 var $5354=$i;
 var $5355=((($5354)+(1))|0);
 $i=$5355;
 label=956;break;
 case 971: 
 var $5357=$2;
 $pp=$5357;
 var $5358=$min;
 $i=$5358;
 label=972;break;
 case 972: 
 var $5360=$i;
 var $5361=$max;
 var $5362=($5360|0)<($5361|0);
 if($5362){label=973;break;}else{label=984;break;}
 case 973: 
 var $5364=$2;
 var $5365=$6;
 var $5366=(($5365+120)|0);
 var $5367=HEAP32[(($5366)>>2)];
 var $5368=($5364>>>0)>=($5367>>>0);
 if($5368){label=974;break;}else{label=980;break;}
 case 974: 
 var $5370=$6;
 var $5371=(($5370+136)|0);
 var $5372=HEAP32[(($5371)>>2)];
 var $5373=($5372|0)!=0;
 if($5373){label=975;break;}else{label=979;break;}
 case 975: 
 var $5375=$2;
 var $5376=$6;
 var $5377=(($5376+132)|0);
 var $5378=HEAP32[(($5377)>>2)];
 var $5379=($5375>>>0)>($5378>>>0);
 if($5379){label=976;break;}else{label=979;break;}
 case 976: 
 var $5381=$6;
 var $5382=(($5381+100)|0);
 HEAP32[(($5382)>>2)]=1;
 var $5383=$6;
 var $5384=(($5383+136)|0);
 var $5385=HEAP32[(($5384)>>2)];
 var $5386=($5385|0)>1;
 if($5386){label=977;break;}else{label=978;break;}
 case 977: 
 $1=-12;
 label=1658;break;
 case 978: 
 label=979;break;
 case 979: 
 label=984;break;
 case 980: 
 var $5391=$c;
 var $5392=$2;
 var $5393=HEAP8[($5392)];
 var $5394=($5393&255);
 var $5395=($5391|0)!=($5394|0);
 if($5395){label=981;break;}else{label=982;break;}
 case 981: 
 label=984;break;
 case 982: 
 var $5398=$2;
 var $5399=(($5398+1)|0);
 $2=$5399;
 label=983;break;
 case 983: 
 var $5401=$i;
 var $5402=((($5401)+(1))|0);
 $i=$5402;
 label=972;break;
 case 984: 
 var $5404=$possessive;
 var $5405=($5404|0)!=0;
 if($5405){label=985;break;}else{label=986;break;}
 case 985: 
 label=16;break;
 case 986: 
 label=987;break;
 case 987: 
 var $5409=$2;
 var $5410=$pp;
 var $5411=($5409|0)==($5410|0);
 if($5411){label=988;break;}else{label=989;break;}
 case 988: 
 label=9;break;
 case 989: 
 var $5414=$2;
 var $5415=$3;
 var $5416=$4;
 var $5417=$5;
 var $5418=$6;
 var $5419=$7;
 var $5420=HEAP32[(($8)>>2)];
 var $5421=((($5420)+(1))|0);
 var $5422=_match($5414,$5415,$5416,$5417,$5418,$5419,$5421);
 $rrc=$5422;
 var $5423=$2;
 var $5424=((($5423)-(1))|0);
 $2=$5424;
 var $5425=$rrc;
 var $5426=($5425|0)!=0;
 if($5426){label=990;break;}else{label=991;break;}
 case 990: 
 var $5428=$rrc;
 $1=$5428;
 label=1658;break;
 case 991: 
 label=987;break;
 case 992: 
 var $5431=$2;
 var $5432=$6;
 var $5433=(($5432+120)|0);
 var $5434=HEAP32[(($5433)>>2)];
 var $5435=($5431>>>0)>=($5434>>>0);
 if($5435){label=993;break;}else{label=999;break;}
 case 993: 
 var $5437=$6;
 var $5438=(($5437+136)|0);
 var $5439=HEAP32[(($5438)>>2)];
 var $5440=($5439|0)!=0;
 if($5440){label=994;break;}else{label=998;break;}
 case 994: 
 var $5442=$2;
 var $5443=$6;
 var $5444=(($5443+132)|0);
 var $5445=HEAP32[(($5444)>>2)];
 var $5446=($5442>>>0)>($5445>>>0);
 if($5446){label=995;break;}else{label=998;break;}
 case 995: 
 var $5448=$6;
 var $5449=(($5448+100)|0);
 HEAP32[(($5449)>>2)]=1;
 var $5450=$6;
 var $5451=(($5450+136)|0);
 var $5452=HEAP32[(($5451)>>2)];
 var $5453=($5452|0)>1;
 if($5453){label=996;break;}else{label=997;break;}
 case 996: 
 $1=-12;
 label=1658;break;
 case 997: 
 label=998;break;
 case 998: 
 $1=0;
 label=1658;break;
 case 999: 
 var $5458=$3;
 var $5459=(($5458+1)|0);
 var $5460=HEAP8[($5459)];
 var $5461=($5460&255);
 $ch=$5461;
 var $5462=$2;
 var $5463=(($5462+1)|0);
 $2=$5463;
 var $5464=HEAP8[($5462)];
 var $5465=($5464&255);
 $c=$5465;
 var $5466=$ch;
 var $5467=$c;
 var $5468=($5466|0)==($5467|0);
 if($5468){label=1002;break;}else{label=1000;break;}
 case 1000: 
 var $5470=$op;
 var $5471=($5470|0)==32;
 if($5471){label=1001;break;}else{label=1003;break;}
 case 1001: 
 var $5473=$ch;
 var $5474=$6;
 var $5475=(($5474+60)|0);
 var $5476=HEAP32[(($5475)>>2)];
 var $5477=(($5476+$5473)|0);
 var $5478=HEAP8[($5477)];
 var $5479=($5478&255);
 var $5480=$c;
 var $5481=($5479|0)==($5480|0);
 if($5481){label=1002;break;}else{label=1003;break;}
 case 1002: 
 $1=0;
 label=1658;break;
 case 1003: 
 var $5484=$3;
 var $5485=(($5484+2)|0);
 $3=$5485;
 label=1657;break;
 case 1004: 
 var $5487=$3;
 var $5488=(($5487+1)|0);
 var $5489=HEAP8[($5488)];
 var $5490=($5489&255);
 var $5491=$5490<<8;
 var $5492=$3;
 var $5493=(($5492+2)|0);
 var $5494=HEAP8[($5493)];
 var $5495=($5494&255);
 var $5496=$5491|$5495;
 $max=$5496;
 $min=$5496;
 var $5497=$3;
 var $5498=(($5497+3)|0);
 $3=$5498;
 label=1015;break;
 case 1005: 
 $min=0;
 var $5500=$3;
 var $5501=(($5500+1)|0);
 var $5502=HEAP8[($5501)];
 var $5503=($5502&255);
 var $5504=$5503<<8;
 var $5505=$3;
 var $5506=(($5505+2)|0);
 var $5507=HEAP8[($5506)];
 var $5508=($5507&255);
 var $5509=$5504|$5508;
 $max=$5509;
 var $5510=$3;
 var $5511=HEAP8[($5510)];
 var $5512=($5511&255);
 var $5513=($5512|0)==66;
 if($5513){var $5520=1;label=1007;break;}else{label=1006;break;}
 case 1006: 
 var $5515=$3;
 var $5516=HEAP8[($5515)];
 var $5517=($5516&255);
 var $5518=($5517|0)==79;
 var $5520=$5518;label=1007;break;
 case 1007: 
 var $5520;
 var $5521=($5520&1);
 $minimize=$5521;
 var $5522=$3;
 var $5523=(($5522+3)|0);
 $3=$5523;
 label=1015;break;
 case 1008: 
 $possessive=1;
 $min=0;
 $max=2147483647;
 var $5525=$3;
 var $5526=(($5525+1)|0);
 $3=$5526;
 label=1015;break;
 case 1009: 
 $possessive=1;
 $min=1;
 $max=2147483647;
 var $5528=$3;
 var $5529=(($5528+1)|0);
 $3=$5529;
 label=1015;break;
 case 1010: 
 $possessive=1;
 $min=0;
 $max=1;
 var $5531=$3;
 var $5532=(($5531+1)|0);
 $3=$5532;
 label=1015;break;
 case 1011: 
 $possessive=1;
 $min=0;
 var $5534=$3;
 var $5535=(($5534+1)|0);
 var $5536=HEAP8[($5535)];
 var $5537=($5536&255);
 var $5538=$5537<<8;
 var $5539=$3;
 var $5540=(($5539+2)|0);
 var $5541=HEAP8[($5540)];
 var $5542=($5541&255);
 var $5543=$5538|$5542;
 $max=$5543;
 var $5544=$3;
 var $5545=(($5544+3)|0);
 $3=$5545;
 label=1015;break;
 case 1012: 
 var $5547=$3;
 var $5548=(($5547+1)|0);
 $3=$5548;
 var $5549=HEAP8[($5547)];
 var $5550=($5549&255);
 var $5551=$op;
 var $5552=($5551>>>0)>=72;
 var $5553=($5552?72:59);
 var $5554=((($5550)-($5553))|0);
 $c=$5554;
 var $5555=$c;
 var $5556=$5555&1;
 var $5557=($5556|0)!=0;
 var $5558=($5557&1);
 $minimize=$5558;
 var $5559=$c;
 var $5560=((200+$5559)|0);
 var $5561=HEAP8[($5560)];
 var $5562=(($5561<<24)>>24);
 $min=$5562;
 var $5563=$c;
 var $5564=((216+$5563)|0);
 var $5565=HEAP8[($5564)];
 var $5566=(($5565<<24)>>24);
 $max=$5566;
 var $5567=$max;
 var $5568=($5567|0)==0;
 if($5568){label=1013;break;}else{label=1014;break;}
 case 1013: 
 $max=2147483647;
 label=1014;break;
 case 1014: 
 label=1015;break;
 case 1015: 
 var $5572=$3;
 var $5573=(($5572+1)|0);
 $3=$5573;
 var $5574=HEAP8[($5572)];
 var $5575=($5574&255);
 $c=$5575;
 var $5576=$op;
 var $5577=($5576>>>0)>=72;
 if($5577){label=1016;break;}else{label=1072;break;}
 case 1016: 
 var $5579=$c;
 var $5580=$6;
 var $5581=(($5580+60)|0);
 var $5582=HEAP32[(($5581)>>2)];
 var $5583=(($5582+$5579)|0);
 var $5584=HEAP8[($5583)];
 var $5585=($5584&255);
 $number=$5585;
 $i=1;
 label=1017;break;
 case 1017: 
 var $5587=$i;
 var $5588=$min;
 var $5589=($5587|0)<=($5588|0);
 if($5589){label=1018;break;}else{label=1030;break;}
 case 1018: 
 var $5591=$2;
 var $5592=$6;
 var $5593=(($5592+120)|0);
 var $5594=HEAP32[(($5593)>>2)];
 var $5595=($5591>>>0)>=($5594>>>0);
 if($5595){label=1019;break;}else{label=1025;break;}
 case 1019: 
 var $5597=$6;
 var $5598=(($5597+136)|0);
 var $5599=HEAP32[(($5598)>>2)];
 var $5600=($5599|0)!=0;
 if($5600){label=1020;break;}else{label=1024;break;}
 case 1020: 
 var $5602=$2;
 var $5603=$6;
 var $5604=(($5603+132)|0);
 var $5605=HEAP32[(($5604)>>2)];
 var $5606=($5602>>>0)>($5605>>>0);
 if($5606){label=1021;break;}else{label=1024;break;}
 case 1021: 
 var $5608=$6;
 var $5609=(($5608+100)|0);
 HEAP32[(($5609)>>2)]=1;
 var $5610=$6;
 var $5611=(($5610+136)|0);
 var $5612=HEAP32[(($5611)>>2)];
 var $5613=($5612|0)>1;
 if($5613){label=1022;break;}else{label=1023;break;}
 case 1022: 
 $1=-12;
 label=1658;break;
 case 1023: 
 label=1024;break;
 case 1024: 
 $1=0;
 label=1658;break;
 case 1025: 
 var $5618=$c;
 var $5619=$2;
 var $5620=HEAP8[($5619)];
 var $5621=($5620&255);
 var $5622=($5618|0)==($5621|0);
 if($5622){label=1027;break;}else{label=1026;break;}
 case 1026: 
 var $5624=$number;
 var $5625=$2;
 var $5626=HEAP8[($5625)];
 var $5627=($5626&255);
 var $5628=($5624|0)==($5627|0);
 if($5628){label=1027;break;}else{label=1028;break;}
 case 1027: 
 $1=0;
 label=1658;break;
 case 1028: 
 var $5631=$2;
 var $5632=(($5631+1)|0);
 $2=$5632;
 label=1029;break;
 case 1029: 
 var $5634=$i;
 var $5635=((($5634)+(1))|0);
 $i=$5635;
 label=1017;break;
 case 1030: 
 var $5637=$min;
 var $5638=$max;
 var $5639=($5637|0)==($5638|0);
 if($5639){label=1031;break;}else{label=1032;break;}
 case 1031: 
 label=16;break;
 case 1032: 
 var $5642=$minimize;
 var $5643=($5642|0)!=0;
 if($5643){label=1033;break;}else{label=1050;break;}
 case 1033: 
 var $5645=$min;
 $i=$5645;
 label=1034;break;
 case 1034: 
 var $5647=$2;
 var $5648=$3;
 var $5649=$4;
 var $5650=$5;
 var $5651=$6;
 var $5652=$7;
 var $5653=HEAP32[(($8)>>2)];
 var $5654=((($5653)+(1))|0);
 var $5655=_match($5647,$5648,$5649,$5650,$5651,$5652,$5654);
 $rrc=$5655;
 var $5656=$rrc;
 var $5657=($5656|0)!=0;
 if($5657){label=1035;break;}else{label=1036;break;}
 case 1035: 
 var $5659=$rrc;
 $1=$5659;
 label=1658;break;
 case 1036: 
 var $5661=$i;
 var $5662=$max;
 var $5663=($5661|0)>=($5662|0);
 if($5663){label=1037;break;}else{label=1038;break;}
 case 1037: 
 $1=0;
 label=1658;break;
 case 1038: 
 var $5666=$2;
 var $5667=$6;
 var $5668=(($5667+120)|0);
 var $5669=HEAP32[(($5668)>>2)];
 var $5670=($5666>>>0)>=($5669>>>0);
 if($5670){label=1039;break;}else{label=1045;break;}
 case 1039: 
 var $5672=$6;
 var $5673=(($5672+136)|0);
 var $5674=HEAP32[(($5673)>>2)];
 var $5675=($5674|0)!=0;
 if($5675){label=1040;break;}else{label=1044;break;}
 case 1040: 
 var $5677=$2;
 var $5678=$6;
 var $5679=(($5678+132)|0);
 var $5680=HEAP32[(($5679)>>2)];
 var $5681=($5677>>>0)>($5680>>>0);
 if($5681){label=1041;break;}else{label=1044;break;}
 case 1041: 
 var $5683=$6;
 var $5684=(($5683+100)|0);
 HEAP32[(($5684)>>2)]=1;
 var $5685=$6;
 var $5686=(($5685+136)|0);
 var $5687=HEAP32[(($5686)>>2)];
 var $5688=($5687|0)>1;
 if($5688){label=1042;break;}else{label=1043;break;}
 case 1042: 
 $1=-12;
 label=1658;break;
 case 1043: 
 label=1044;break;
 case 1044: 
 $1=0;
 label=1658;break;
 case 1045: 
 var $5693=$c;
 var $5694=$2;
 var $5695=HEAP8[($5694)];
 var $5696=($5695&255);
 var $5697=($5693|0)==($5696|0);
 if($5697){label=1047;break;}else{label=1046;break;}
 case 1046: 
 var $5699=$number;
 var $5700=$2;
 var $5701=HEAP8[($5700)];
 var $5702=($5701&255);
 var $5703=($5699|0)==($5702|0);
 if($5703){label=1047;break;}else{label=1048;break;}
 case 1047: 
 $1=0;
 label=1658;break;
 case 1048: 
 var $5706=$2;
 var $5707=(($5706+1)|0);
 $2=$5707;
 label=1049;break;
 case 1049: 
 var $5709=$i;
 var $5710=((($5709)+(1))|0);
 $i=$5710;
 label=1034;break;
 case 1050: 
 var $5712=$2;
 $pp=$5712;
 var $5713=$min;
 $i=$5713;
 label=1051;break;
 case 1051: 
 var $5715=$i;
 var $5716=$max;
 var $5717=($5715|0)<($5716|0);
 if($5717){label=1052;break;}else{label=1064;break;}
 case 1052: 
 var $5719=$2;
 var $5720=$6;
 var $5721=(($5720+120)|0);
 var $5722=HEAP32[(($5721)>>2)];
 var $5723=($5719>>>0)>=($5722>>>0);
 if($5723){label=1053;break;}else{label=1059;break;}
 case 1053: 
 var $5725=$6;
 var $5726=(($5725+136)|0);
 var $5727=HEAP32[(($5726)>>2)];
 var $5728=($5727|0)!=0;
 if($5728){label=1054;break;}else{label=1058;break;}
 case 1054: 
 var $5730=$2;
 var $5731=$6;
 var $5732=(($5731+132)|0);
 var $5733=HEAP32[(($5732)>>2)];
 var $5734=($5730>>>0)>($5733>>>0);
 if($5734){label=1055;break;}else{label=1058;break;}
 case 1055: 
 var $5736=$6;
 var $5737=(($5736+100)|0);
 HEAP32[(($5737)>>2)]=1;
 var $5738=$6;
 var $5739=(($5738+136)|0);
 var $5740=HEAP32[(($5739)>>2)];
 var $5741=($5740|0)>1;
 if($5741){label=1056;break;}else{label=1057;break;}
 case 1056: 
 $1=-12;
 label=1658;break;
 case 1057: 
 label=1058;break;
 case 1058: 
 label=1064;break;
 case 1059: 
 var $5746=$c;
 var $5747=$2;
 var $5748=HEAP8[($5747)];
 var $5749=($5748&255);
 var $5750=($5746|0)==($5749|0);
 if($5750){label=1061;break;}else{label=1060;break;}
 case 1060: 
 var $5752=$number;
 var $5753=$2;
 var $5754=HEAP8[($5753)];
 var $5755=($5754&255);
 var $5756=($5752|0)==($5755|0);
 if($5756){label=1061;break;}else{label=1062;break;}
 case 1061: 
 label=1064;break;
 case 1062: 
 var $5759=$2;
 var $5760=(($5759+1)|0);
 $2=$5760;
 label=1063;break;
 case 1063: 
 var $5762=$i;
 var $5763=((($5762)+(1))|0);
 $i=$5763;
 label=1051;break;
 case 1064: 
 var $5765=$possessive;
 var $5766=($5765|0)!=0;
 if($5766){label=1065;break;}else{label=1066;break;}
 case 1065: 
 label=16;break;
 case 1066: 
 label=1067;break;
 case 1067: 
 var $5770=$2;
 var $5771=$pp;
 var $5772=($5770|0)==($5771|0);
 if($5772){label=1068;break;}else{label=1069;break;}
 case 1068: 
 label=9;break;
 case 1069: 
 var $5775=$2;
 var $5776=$3;
 var $5777=$4;
 var $5778=$5;
 var $5779=$6;
 var $5780=$7;
 var $5781=HEAP32[(($8)>>2)];
 var $5782=((($5781)+(1))|0);
 var $5783=_match($5775,$5776,$5777,$5778,$5779,$5780,$5782);
 $rrc=$5783;
 var $5784=$rrc;
 var $5785=($5784|0)!=0;
 if($5785){label=1070;break;}else{label=1071;break;}
 case 1070: 
 var $5787=$rrc;
 $1=$5787;
 label=1658;break;
 case 1071: 
 var $5789=$2;
 var $5790=((($5789)-(1))|0);
 $2=$5790;
 label=1067;break;
 case 1072: 
 $i=1;
 label=1073;break;
 case 1073: 
 var $5793=$i;
 var $5794=$min;
 var $5795=($5793|0)<=($5794|0);
 if($5795){label=1074;break;}else{label=1085;break;}
 case 1074: 
 var $5797=$2;
 var $5798=$6;
 var $5799=(($5798+120)|0);
 var $5800=HEAP32[(($5799)>>2)];
 var $5801=($5797>>>0)>=($5800>>>0);
 if($5801){label=1075;break;}else{label=1081;break;}
 case 1075: 
 var $5803=$6;
 var $5804=(($5803+136)|0);
 var $5805=HEAP32[(($5804)>>2)];
 var $5806=($5805|0)!=0;
 if($5806){label=1076;break;}else{label=1080;break;}
 case 1076: 
 var $5808=$2;
 var $5809=$6;
 var $5810=(($5809+132)|0);
 var $5811=HEAP32[(($5810)>>2)];
 var $5812=($5808>>>0)>($5811>>>0);
 if($5812){label=1077;break;}else{label=1080;break;}
 case 1077: 
 var $5814=$6;
 var $5815=(($5814+100)|0);
 HEAP32[(($5815)>>2)]=1;
 var $5816=$6;
 var $5817=(($5816+136)|0);
 var $5818=HEAP32[(($5817)>>2)];
 var $5819=($5818|0)>1;
 if($5819){label=1078;break;}else{label=1079;break;}
 case 1078: 
 $1=-12;
 label=1658;break;
 case 1079: 
 label=1080;break;
 case 1080: 
 $1=0;
 label=1658;break;
 case 1081: 
 var $5824=$c;
 var $5825=$2;
 var $5826=(($5825+1)|0);
 $2=$5826;
 var $5827=HEAP8[($5825)];
 var $5828=($5827&255);
 var $5829=($5824|0)==($5828|0);
 if($5829){label=1082;break;}else{label=1083;break;}
 case 1082: 
 $1=0;
 label=1658;break;
 case 1083: 
 label=1084;break;
 case 1084: 
 var $5833=$i;
 var $5834=((($5833)+(1))|0);
 $i=$5834;
 label=1073;break;
 case 1085: 
 var $5836=$min;
 var $5837=$max;
 var $5838=($5836|0)==($5837|0);
 if($5838){label=1086;break;}else{label=1087;break;}
 case 1086: 
 label=16;break;
 case 1087: 
 var $5841=$minimize;
 var $5842=($5841|0)!=0;
 if($5842){label=1088;break;}else{label=1104;break;}
 case 1088: 
 var $5844=$min;
 $i=$5844;
 label=1089;break;
 case 1089: 
 var $5846=$2;
 var $5847=$3;
 var $5848=$4;
 var $5849=$5;
 var $5850=$6;
 var $5851=$7;
 var $5852=HEAP32[(($8)>>2)];
 var $5853=((($5852)+(1))|0);
 var $5854=_match($5846,$5847,$5848,$5849,$5850,$5851,$5853);
 $rrc=$5854;
 var $5855=$rrc;
 var $5856=($5855|0)!=0;
 if($5856){label=1090;break;}else{label=1091;break;}
 case 1090: 
 var $5858=$rrc;
 $1=$5858;
 label=1658;break;
 case 1091: 
 var $5860=$i;
 var $5861=$max;
 var $5862=($5860|0)>=($5861|0);
 if($5862){label=1092;break;}else{label=1093;break;}
 case 1092: 
 $1=0;
 label=1658;break;
 case 1093: 
 var $5865=$2;
 var $5866=$6;
 var $5867=(($5866+120)|0);
 var $5868=HEAP32[(($5867)>>2)];
 var $5869=($5865>>>0)>=($5868>>>0);
 if($5869){label=1094;break;}else{label=1100;break;}
 case 1094: 
 var $5871=$6;
 var $5872=(($5871+136)|0);
 var $5873=HEAP32[(($5872)>>2)];
 var $5874=($5873|0)!=0;
 if($5874){label=1095;break;}else{label=1099;break;}
 case 1095: 
 var $5876=$2;
 var $5877=$6;
 var $5878=(($5877+132)|0);
 var $5879=HEAP32[(($5878)>>2)];
 var $5880=($5876>>>0)>($5879>>>0);
 if($5880){label=1096;break;}else{label=1099;break;}
 case 1096: 
 var $5882=$6;
 var $5883=(($5882+100)|0);
 HEAP32[(($5883)>>2)]=1;
 var $5884=$6;
 var $5885=(($5884+136)|0);
 var $5886=HEAP32[(($5885)>>2)];
 var $5887=($5886|0)>1;
 if($5887){label=1097;break;}else{label=1098;break;}
 case 1097: 
 $1=-12;
 label=1658;break;
 case 1098: 
 label=1099;break;
 case 1099: 
 $1=0;
 label=1658;break;
 case 1100: 
 var $5892=$c;
 var $5893=$2;
 var $5894=(($5893+1)|0);
 $2=$5894;
 var $5895=HEAP8[($5893)];
 var $5896=($5895&255);
 var $5897=($5892|0)==($5896|0);
 if($5897){label=1101;break;}else{label=1102;break;}
 case 1101: 
 $1=0;
 label=1658;break;
 case 1102: 
 label=1103;break;
 case 1103: 
 var $5901=$i;
 var $5902=((($5901)+(1))|0);
 $i=$5902;
 label=1089;break;
 case 1104: 
 var $5904=$2;
 $pp=$5904;
 var $5905=$min;
 $i=$5905;
 label=1105;break;
 case 1105: 
 var $5907=$i;
 var $5908=$max;
 var $5909=($5907|0)<($5908|0);
 if($5909){label=1106;break;}else{label=1117;break;}
 case 1106: 
 var $5911=$2;
 var $5912=$6;
 var $5913=(($5912+120)|0);
 var $5914=HEAP32[(($5913)>>2)];
 var $5915=($5911>>>0)>=($5914>>>0);
 if($5915){label=1107;break;}else{label=1113;break;}
 case 1107: 
 var $5917=$6;
 var $5918=(($5917+136)|0);
 var $5919=HEAP32[(($5918)>>2)];
 var $5920=($5919|0)!=0;
 if($5920){label=1108;break;}else{label=1112;break;}
 case 1108: 
 var $5922=$2;
 var $5923=$6;
 var $5924=(($5923+132)|0);
 var $5925=HEAP32[(($5924)>>2)];
 var $5926=($5922>>>0)>($5925>>>0);
 if($5926){label=1109;break;}else{label=1112;break;}
 case 1109: 
 var $5928=$6;
 var $5929=(($5928+100)|0);
 HEAP32[(($5929)>>2)]=1;
 var $5930=$6;
 var $5931=(($5930+136)|0);
 var $5932=HEAP32[(($5931)>>2)];
 var $5933=($5932|0)>1;
 if($5933){label=1110;break;}else{label=1111;break;}
 case 1110: 
 $1=-12;
 label=1658;break;
 case 1111: 
 label=1112;break;
 case 1112: 
 label=1117;break;
 case 1113: 
 var $5938=$c;
 var $5939=$2;
 var $5940=HEAP8[($5939)];
 var $5941=($5940&255);
 var $5942=($5938|0)==($5941|0);
 if($5942){label=1114;break;}else{label=1115;break;}
 case 1114: 
 label=1117;break;
 case 1115: 
 var $5945=$2;
 var $5946=(($5945+1)|0);
 $2=$5946;
 label=1116;break;
 case 1116: 
 var $5948=$i;
 var $5949=((($5948)+(1))|0);
 $i=$5949;
 label=1105;break;
 case 1117: 
 var $5951=$possessive;
 var $5952=($5951|0)!=0;
 if($5952){label=1118;break;}else{label=1119;break;}
 case 1118: 
 label=16;break;
 case 1119: 
 label=1120;break;
 case 1120: 
 var $5956=$2;
 var $5957=$pp;
 var $5958=($5956|0)==($5957|0);
 if($5958){label=1121;break;}else{label=1122;break;}
 case 1121: 
 label=9;break;
 case 1122: 
 var $5961=$2;
 var $5962=$3;
 var $5963=$4;
 var $5964=$5;
 var $5965=$6;
 var $5966=$7;
 var $5967=HEAP32[(($8)>>2)];
 var $5968=((($5967)+(1))|0);
 var $5969=_match($5961,$5962,$5963,$5964,$5965,$5966,$5968);
 $rrc=$5969;
 var $5970=$rrc;
 var $5971=($5970|0)!=0;
 if($5971){label=1123;break;}else{label=1124;break;}
 case 1123: 
 var $5973=$rrc;
 $1=$5973;
 label=1658;break;
 case 1124: 
 var $5975=$2;
 var $5976=((($5975)-(1))|0);
 $2=$5976;
 label=1120;break;
 case 1125: 
 var $5978=$3;
 var $5979=(($5978+1)|0);
 var $5980=HEAP8[($5979)];
 var $5981=($5980&255);
 var $5982=$5981<<8;
 var $5983=$3;
 var $5984=(($5983+2)|0);
 var $5985=HEAP8[($5984)];
 var $5986=($5985&255);
 var $5987=$5982|$5986;
 $max=$5987;
 $min=$5987;
 $minimize=1;
 var $5988=$3;
 var $5989=(($5988+3)|0);
 $3=$5989;
 label=1134;break;
 case 1126: 
 $min=0;
 var $5991=$3;
 var $5992=(($5991+1)|0);
 var $5993=HEAP8[($5992)];
 var $5994=($5993&255);
 var $5995=$5994<<8;
 var $5996=$3;
 var $5997=(($5996+2)|0);
 var $5998=HEAP8[($5997)];
 var $5999=($5998&255);
 var $6000=$5995|$5999;
 $max=$6000;
 var $6001=$3;
 var $6002=HEAP8[($6001)];
 var $6003=($6002&255);
 var $6004=($6003|0)==92;
 var $6005=($6004&1);
 $minimize=$6005;
 var $6006=$3;
 var $6007=(($6006+3)|0);
 $3=$6007;
 label=1134;break;
 case 1127: 
 $possessive=1;
 $min=0;
 $max=2147483647;
 var $6009=$3;
 var $6010=(($6009+1)|0);
 $3=$6010;
 label=1134;break;
 case 1128: 
 $possessive=1;
 $min=1;
 $max=2147483647;
 var $6012=$3;
 var $6013=(($6012+1)|0);
 $3=$6013;
 label=1134;break;
 case 1129: 
 $possessive=1;
 $min=0;
 $max=1;
 var $6015=$3;
 var $6016=(($6015+1)|0);
 $3=$6016;
 label=1134;break;
 case 1130: 
 $possessive=1;
 $min=0;
 var $6018=$3;
 var $6019=(($6018+1)|0);
 var $6020=HEAP8[($6019)];
 var $6021=($6020&255);
 var $6022=$6021<<8;
 var $6023=$3;
 var $6024=(($6023+2)|0);
 var $6025=HEAP8[($6024)];
 var $6026=($6025&255);
 var $6027=$6022|$6026;
 $max=$6027;
 var $6028=$3;
 var $6029=(($6028+3)|0);
 $3=$6029;
 label=1134;break;
 case 1131: 
 var $6031=$3;
 var $6032=(($6031+1)|0);
 $3=$6032;
 var $6033=HEAP8[($6031)];
 var $6034=($6033&255);
 var $6035=((($6034)-(85))|0);
 $c=$6035;
 var $6036=$c;
 var $6037=$6036&1;
 var $6038=($6037|0)!=0;
 var $6039=($6038&1);
 $minimize=$6039;
 var $6040=$c;
 var $6041=((200+$6040)|0);
 var $6042=HEAP8[($6041)];
 var $6043=(($6042<<24)>>24);
 $min=$6043;
 var $6044=$c;
 var $6045=((216+$6044)|0);
 var $6046=HEAP8[($6045)];
 var $6047=(($6046<<24)>>24);
 $max=$6047;
 var $6048=$max;
 var $6049=($6048|0)==0;
 if($6049){label=1132;break;}else{label=1133;break;}
 case 1132: 
 $max=2147483647;
 label=1133;break;
 case 1133: 
 label=1134;break;
 case 1134: 
 var $6053=$3;
 var $6054=(($6053+1)|0);
 $3=$6054;
 var $6055=HEAP8[($6053)];
 var $6056=($6055&255);
 $ctype=$6056;
 var $6057=$min;
 var $6058=($6057|0)>0;
 if($6058){label=1135;break;}else{label=1348;break;}
 case 1135: 
 var $6060=$ctype;
 switch(($6060|0)){case 12:{ label=1136;break;}case 13:{ label=1164;break;}case 14:{ label=1172;break;}case 17:{ label=1180;break;}case 18:{ label=1202;break;}case 19:{ label=1217;break;}case 20:{ label=1232;break;}case 21:{ label=1247;break;}case 6:{ label=1262;break;}case 7:{ label=1276;break;}case 8:{ label=1290;break;}case 9:{ label=1304;break;}case 10:{ label=1318;break;}case 11:{ label=1332;break;}default:{label=1346;break;}}break;
 case 1136: 
 $i=1;
 label=1137;break;
 case 1137: 
 var $6063=$i;
 var $6064=$min;
 var $6065=($6063|0)<=($6064|0);
 if($6065){label=1138;break;}else{label=1163;break;}
 case 1138: 
 var $6067=$2;
 var $6068=$6;
 var $6069=(($6068+120)|0);
 var $6070=HEAP32[(($6069)>>2)];
 var $6071=($6067>>>0)>=($6070>>>0);
 if($6071){label=1139;break;}else{label=1145;break;}
 case 1139: 
 var $6073=$6;
 var $6074=(($6073+136)|0);
 var $6075=HEAP32[(($6074)>>2)];
 var $6076=($6075|0)!=0;
 if($6076){label=1140;break;}else{label=1144;break;}
 case 1140: 
 var $6078=$2;
 var $6079=$6;
 var $6080=(($6079+132)|0);
 var $6081=HEAP32[(($6080)>>2)];
 var $6082=($6078>>>0)>($6081>>>0);
 if($6082){label=1141;break;}else{label=1144;break;}
 case 1141: 
 var $6084=$6;
 var $6085=(($6084+100)|0);
 HEAP32[(($6085)>>2)]=1;
 var $6086=$6;
 var $6087=(($6086+136)|0);
 var $6088=HEAP32[(($6087)>>2)];
 var $6089=($6088|0)>1;
 if($6089){label=1142;break;}else{label=1143;break;}
 case 1142: 
 $1=-12;
 label=1658;break;
 case 1143: 
 label=1144;break;
 case 1144: 
 $1=0;
 label=1658;break;
 case 1145: 
 var $6094=$6;
 var $6095=(($6094+24)|0);
 var $6096=HEAP32[(($6095)>>2)];
 var $6097=($6096|0)!=0;
 if($6097){label=1146;break;}else{label=1148;break;}
 case 1146: 
 var $6099=$2;
 var $6100=$6;
 var $6101=(($6100+120)|0);
 var $6102=HEAP32[(($6101)>>2)];
 var $6103=($6099>>>0)<($6102>>>0);
 if($6103){label=1147;break;}else{label=1153;break;}
 case 1147: 
 var $6105=$2;
 var $6106=$6;
 var $6107=(($6106+24)|0);
 var $6108=HEAP32[(($6107)>>2)];
 var $6109=$6;
 var $6110=(($6109+120)|0);
 var $6111=HEAP32[(($6110)>>2)];
 var $6112=$6;
 var $6113=(($6112+28)|0);
 var $6114=$utf;
 var $6115=__pcre_is_newline($6105,$6108,$6111,$6113,$6114);
 var $6116=($6115|0)!=0;
 if($6116){label=1152;break;}else{label=1153;break;}
 case 1148: 
 var $6118=$2;
 var $6119=$6;
 var $6120=(($6119+120)|0);
 var $6121=HEAP32[(($6120)>>2)];
 var $6122=$6;
 var $6123=(($6122+28)|0);
 var $6124=HEAP32[(($6123)>>2)];
 var $6125=(((-$6124))|0);
 var $6126=(($6121+$6125)|0);
 var $6127=($6118>>>0)<=($6126>>>0);
 if($6127){label=1149;break;}else{label=1153;break;}
 case 1149: 
 var $6129=$2;
 var $6130=HEAP8[($6129)];
 var $6131=($6130&255);
 var $6132=$6;
 var $6133=(($6132+52)|0);
 var $6134=(($6133)|0);
 var $6135=HEAP8[($6134)];
 var $6136=($6135&255);
 var $6137=($6131|0)==($6136|0);
 if($6137){label=1150;break;}else{label=1153;break;}
 case 1150: 
 var $6139=$6;
 var $6140=(($6139+28)|0);
 var $6141=HEAP32[(($6140)>>2)];
 var $6142=($6141|0)==1;
 if($6142){label=1152;break;}else{label=1151;break;}
 case 1151: 
 var $6144=$2;
 var $6145=(($6144+1)|0);
 var $6146=HEAP8[($6145)];
 var $6147=($6146&255);
 var $6148=$6;
 var $6149=(($6148+52)|0);
 var $6150=(($6149+1)|0);
 var $6151=HEAP8[($6150)];
 var $6152=($6151&255);
 var $6153=($6147|0)==($6152|0);
 if($6153){label=1152;break;}else{label=1153;break;}
 case 1152: 
 $1=0;
 label=1658;break;
 case 1153: 
 var $6156=$6;
 var $6157=(($6156+136)|0);
 var $6158=HEAP32[(($6157)>>2)];
 var $6159=($6158|0)!=0;
 if($6159){label=1154;break;}else{label=1161;break;}
 case 1154: 
 var $6161=$2;
 var $6162=(($6161+1)|0);
 var $6163=$6;
 var $6164=(($6163+120)|0);
 var $6165=HEAP32[(($6164)>>2)];
 var $6166=($6162>>>0)>=($6165>>>0);
 if($6166){label=1155;break;}else{label=1161;break;}
 case 1155: 
 var $6168=$6;
 var $6169=(($6168+24)|0);
 var $6170=HEAP32[(($6169)>>2)];
 var $6171=($6170|0)==0;
 if($6171){label=1156;break;}else{label=1161;break;}
 case 1156: 
 var $6173=$6;
 var $6174=(($6173+28)|0);
 var $6175=HEAP32[(($6174)>>2)];
 var $6176=($6175|0)==2;
 if($6176){label=1157;break;}else{label=1161;break;}
 case 1157: 
 var $6178=$2;
 var $6179=HEAP8[($6178)];
 var $6180=($6179&255);
 var $6181=$6;
 var $6182=(($6181+52)|0);
 var $6183=(($6182)|0);
 var $6184=HEAP8[($6183)];
 var $6185=($6184&255);
 var $6186=($6180|0)==($6185|0);
 if($6186){label=1158;break;}else{label=1161;break;}
 case 1158: 
 var $6188=$6;
 var $6189=(($6188+100)|0);
 HEAP32[(($6189)>>2)]=1;
 var $6190=$6;
 var $6191=(($6190+136)|0);
 var $6192=HEAP32[(($6191)>>2)];
 var $6193=($6192|0)>1;
 if($6193){label=1159;break;}else{label=1160;break;}
 case 1159: 
 $1=-12;
 label=1658;break;
 case 1160: 
 label=1161;break;
 case 1161: 
 var $6197=$2;
 var $6198=(($6197+1)|0);
 $2=$6198;
 label=1162;break;
 case 1162: 
 var $6200=$i;
 var $6201=((($6200)+(1))|0);
 $i=$6201;
 label=1137;break;
 case 1163: 
 label=1347;break;
 case 1164: 
 var $6204=$2;
 var $6205=$6;
 var $6206=(($6205+120)|0);
 var $6207=HEAP32[(($6206)>>2)];
 var $6208=$min;
 var $6209=(((-$6208))|0);
 var $6210=(($6207+$6209)|0);
 var $6211=($6204>>>0)>($6210>>>0);
 if($6211){label=1165;break;}else{label=1171;break;}
 case 1165: 
 var $6213=$6;
 var $6214=(($6213+136)|0);
 var $6215=HEAP32[(($6214)>>2)];
 var $6216=($6215|0)!=0;
 if($6216){label=1166;break;}else{label=1170;break;}
 case 1166: 
 var $6218=$2;
 var $6219=$6;
 var $6220=(($6219+132)|0);
 var $6221=HEAP32[(($6220)>>2)];
 var $6222=($6218>>>0)>($6221>>>0);
 if($6222){label=1167;break;}else{label=1170;break;}
 case 1167: 
 var $6224=$6;
 var $6225=(($6224+100)|0);
 HEAP32[(($6225)>>2)]=1;
 var $6226=$6;
 var $6227=(($6226+136)|0);
 var $6228=HEAP32[(($6227)>>2)];
 var $6229=($6228|0)>1;
 if($6229){label=1168;break;}else{label=1169;break;}
 case 1168: 
 $1=-12;
 label=1658;break;
 case 1169: 
 label=1170;break;
 case 1170: 
 $1=0;
 label=1658;break;
 case 1171: 
 var $6234=$min;
 var $6235=$2;
 var $6236=(($6235+$6234)|0);
 $2=$6236;
 label=1347;break;
 case 1172: 
 var $6238=$2;
 var $6239=$6;
 var $6240=(($6239+120)|0);
 var $6241=HEAP32[(($6240)>>2)];
 var $6242=$min;
 var $6243=(((-$6242))|0);
 var $6244=(($6241+$6243)|0);
 var $6245=($6238>>>0)>($6244>>>0);
 if($6245){label=1173;break;}else{label=1179;break;}
 case 1173: 
 var $6247=$6;
 var $6248=(($6247+136)|0);
 var $6249=HEAP32[(($6248)>>2)];
 var $6250=($6249|0)!=0;
 if($6250){label=1174;break;}else{label=1178;break;}
 case 1174: 
 var $6252=$2;
 var $6253=$6;
 var $6254=(($6253+132)|0);
 var $6255=HEAP32[(($6254)>>2)];
 var $6256=($6252>>>0)>($6255>>>0);
 if($6256){label=1175;break;}else{label=1178;break;}
 case 1175: 
 var $6258=$6;
 var $6259=(($6258+100)|0);
 HEAP32[(($6259)>>2)]=1;
 var $6260=$6;
 var $6261=(($6260+136)|0);
 var $6262=HEAP32[(($6261)>>2)];
 var $6263=($6262|0)>1;
 if($6263){label=1176;break;}else{label=1177;break;}
 case 1176: 
 $1=-12;
 label=1658;break;
 case 1177: 
 label=1178;break;
 case 1178: 
 $1=0;
 label=1658;break;
 case 1179: 
 var $6268=$min;
 var $6269=$2;
 var $6270=(($6269+$6268)|0);
 $2=$6270;
 label=1347;break;
 case 1180: 
 $i=1;
 label=1181;break;
 case 1181: 
 var $6273=$i;
 var $6274=$min;
 var $6275=($6273|0)<=($6274|0);
 if($6275){label=1182;break;}else{label=1201;break;}
 case 1182: 
 var $6277=$2;
 var $6278=$6;
 var $6279=(($6278+120)|0);
 var $6280=HEAP32[(($6279)>>2)];
 var $6281=($6277>>>0)>=($6280>>>0);
 if($6281){label=1183;break;}else{label=1189;break;}
 case 1183: 
 var $6283=$6;
 var $6284=(($6283+136)|0);
 var $6285=HEAP32[(($6284)>>2)];
 var $6286=($6285|0)!=0;
 if($6286){label=1184;break;}else{label=1188;break;}
 case 1184: 
 var $6288=$2;
 var $6289=$6;
 var $6290=(($6289+132)|0);
 var $6291=HEAP32[(($6290)>>2)];
 var $6292=($6288>>>0)>($6291>>>0);
 if($6292){label=1185;break;}else{label=1188;break;}
 case 1185: 
 var $6294=$6;
 var $6295=(($6294+100)|0);
 HEAP32[(($6295)>>2)]=1;
 var $6296=$6;
 var $6297=(($6296+136)|0);
 var $6298=HEAP32[(($6297)>>2)];
 var $6299=($6298|0)>1;
 if($6299){label=1186;break;}else{label=1187;break;}
 case 1186: 
 $1=-12;
 label=1658;break;
 case 1187: 
 label=1188;break;
 case 1188: 
 $1=0;
 label=1658;break;
 case 1189: 
 var $6304=$2;
 var $6305=(($6304+1)|0);
 $2=$6305;
 var $6306=HEAP8[($6304)];
 var $6307=($6306&255);
 switch(($6307|0)){case 13:{ label=1191;break;}case 10:{ label=1195;break;}case 11:case 12:case 133:{ label=1196;break;}default:{label=1190;break;}}break;
 case 1190: 
 $1=0;
 label=1658;break;
 case 1191: 
 var $6310=$2;
 var $6311=$6;
 var $6312=(($6311+120)|0);
 var $6313=HEAP32[(($6312)>>2)];
 var $6314=($6310>>>0)<($6313>>>0);
 if($6314){label=1192;break;}else{label=1194;break;}
 case 1192: 
 var $6316=$2;
 var $6317=HEAP8[($6316)];
 var $6318=($6317&255);
 var $6319=($6318|0)==10;
 if($6319){label=1193;break;}else{label=1194;break;}
 case 1193: 
 var $6321=$2;
 var $6322=(($6321+1)|0);
 $2=$6322;
 label=1194;break;
 case 1194: 
 label=1199;break;
 case 1195: 
 label=1199;break;
 case 1196: 
 var $6326=$6;
 var $6327=(($6326+104)|0);
 var $6328=HEAP32[(($6327)>>2)];
 var $6329=($6328|0)!=0;
 if($6329){label=1197;break;}else{label=1198;break;}
 case 1197: 
 $1=0;
 label=1658;break;
 case 1198: 
 label=1199;break;
 case 1199: 
 label=1200;break;
 case 1200: 
 var $6334=$i;
 var $6335=((($6334)+(1))|0);
 $i=$6335;
 label=1181;break;
 case 1201: 
 label=1347;break;
 case 1202: 
 $i=1;
 label=1203;break;
 case 1203: 
 var $6339=$i;
 var $6340=$min;
 var $6341=($6339|0)<=($6340|0);
 if($6341){label=1204;break;}else{label=1216;break;}
 case 1204: 
 var $6343=$2;
 var $6344=$6;
 var $6345=(($6344+120)|0);
 var $6346=HEAP32[(($6345)>>2)];
 var $6347=($6343>>>0)>=($6346>>>0);
 if($6347){label=1205;break;}else{label=1211;break;}
 case 1205: 
 var $6349=$6;
 var $6350=(($6349+136)|0);
 var $6351=HEAP32[(($6350)>>2)];
 var $6352=($6351|0)!=0;
 if($6352){label=1206;break;}else{label=1210;break;}
 case 1206: 
 var $6354=$2;
 var $6355=$6;
 var $6356=(($6355+132)|0);
 var $6357=HEAP32[(($6356)>>2)];
 var $6358=($6354>>>0)>($6357>>>0);
 if($6358){label=1207;break;}else{label=1210;break;}
 case 1207: 
 var $6360=$6;
 var $6361=(($6360+100)|0);
 HEAP32[(($6361)>>2)]=1;
 var $6362=$6;
 var $6363=(($6362+136)|0);
 var $6364=HEAP32[(($6363)>>2)];
 var $6365=($6364|0)>1;
 if($6365){label=1208;break;}else{label=1209;break;}
 case 1208: 
 $1=-12;
 label=1658;break;
 case 1209: 
 label=1210;break;
 case 1210: 
 $1=0;
 label=1658;break;
 case 1211: 
 var $6370=$2;
 var $6371=(($6370+1)|0);
 $2=$6371;
 var $6372=HEAP8[($6370)];
 var $6373=($6372&255);
 if(($6373|0)==9|($6373|0)==32|($6373|0)==160){ label=1213;break;}else{label=1212;break;}
 case 1212: 
 label=1214;break;
 case 1213: 
 $1=0;
 label=1658;break;
 case 1214: 
 label=1215;break;
 case 1215: 
 var $6378=$i;
 var $6379=((($6378)+(1))|0);
 $i=$6379;
 label=1203;break;
 case 1216: 
 label=1347;break;
 case 1217: 
 $i=1;
 label=1218;break;
 case 1218: 
 var $6383=$i;
 var $6384=$min;
 var $6385=($6383|0)<=($6384|0);
 if($6385){label=1219;break;}else{label=1231;break;}
 case 1219: 
 var $6387=$2;
 var $6388=$6;
 var $6389=(($6388+120)|0);
 var $6390=HEAP32[(($6389)>>2)];
 var $6391=($6387>>>0)>=($6390>>>0);
 if($6391){label=1220;break;}else{label=1226;break;}
 case 1220: 
 var $6393=$6;
 var $6394=(($6393+136)|0);
 var $6395=HEAP32[(($6394)>>2)];
 var $6396=($6395|0)!=0;
 if($6396){label=1221;break;}else{label=1225;break;}
 case 1221: 
 var $6398=$2;
 var $6399=$6;
 var $6400=(($6399+132)|0);
 var $6401=HEAP32[(($6400)>>2)];
 var $6402=($6398>>>0)>($6401>>>0);
 if($6402){label=1222;break;}else{label=1225;break;}
 case 1222: 
 var $6404=$6;
 var $6405=(($6404+100)|0);
 HEAP32[(($6405)>>2)]=1;
 var $6406=$6;
 var $6407=(($6406+136)|0);
 var $6408=HEAP32[(($6407)>>2)];
 var $6409=($6408|0)>1;
 if($6409){label=1223;break;}else{label=1224;break;}
 case 1223: 
 $1=-12;
 label=1658;break;
 case 1224: 
 label=1225;break;
 case 1225: 
 $1=0;
 label=1658;break;
 case 1226: 
 var $6414=$2;
 var $6415=(($6414+1)|0);
 $2=$6415;
 var $6416=HEAP8[($6414)];
 var $6417=($6416&255);
 if(($6417|0)==9|($6417|0)==32|($6417|0)==160){ label=1228;break;}else{label=1227;break;}
 case 1227: 
 $1=0;
 label=1658;break;
 case 1228: 
 label=1229;break;
 case 1229: 
 label=1230;break;
 case 1230: 
 var $6422=$i;
 var $6423=((($6422)+(1))|0);
 $i=$6423;
 label=1218;break;
 case 1231: 
 label=1347;break;
 case 1232: 
 $i=1;
 label=1233;break;
 case 1233: 
 var $6427=$i;
 var $6428=$min;
 var $6429=($6427|0)<=($6428|0);
 if($6429){label=1234;break;}else{label=1246;break;}
 case 1234: 
 var $6431=$2;
 var $6432=$6;
 var $6433=(($6432+120)|0);
 var $6434=HEAP32[(($6433)>>2)];
 var $6435=($6431>>>0)>=($6434>>>0);
 if($6435){label=1235;break;}else{label=1241;break;}
 case 1235: 
 var $6437=$6;
 var $6438=(($6437+136)|0);
 var $6439=HEAP32[(($6438)>>2)];
 var $6440=($6439|0)!=0;
 if($6440){label=1236;break;}else{label=1240;break;}
 case 1236: 
 var $6442=$2;
 var $6443=$6;
 var $6444=(($6443+132)|0);
 var $6445=HEAP32[(($6444)>>2)];
 var $6446=($6442>>>0)>($6445>>>0);
 if($6446){label=1237;break;}else{label=1240;break;}
 case 1237: 
 var $6448=$6;
 var $6449=(($6448+100)|0);
 HEAP32[(($6449)>>2)]=1;
 var $6450=$6;
 var $6451=(($6450+136)|0);
 var $6452=HEAP32[(($6451)>>2)];
 var $6453=($6452|0)>1;
 if($6453){label=1238;break;}else{label=1239;break;}
 case 1238: 
 $1=-12;
 label=1658;break;
 case 1239: 
 label=1240;break;
 case 1240: 
 $1=0;
 label=1658;break;
 case 1241: 
 var $6458=$2;
 var $6459=(($6458+1)|0);
 $2=$6459;
 var $6460=HEAP8[($6458)];
 var $6461=($6460&255);
 switch(($6461|0)){case 10:case 11:case 12:case 13:case 133:{ label=1242;break;}default:{label=1243;break;}}break;
 case 1242: 
 $1=0;
 label=1658;break;
 case 1243: 
 label=1244;break;
 case 1244: 
 label=1245;break;
 case 1245: 
 var $6466=$i;
 var $6467=((($6466)+(1))|0);
 $i=$6467;
 label=1233;break;
 case 1246: 
 label=1347;break;
 case 1247: 
 $i=1;
 label=1248;break;
 case 1248: 
 var $6471=$i;
 var $6472=$min;
 var $6473=($6471|0)<=($6472|0);
 if($6473){label=1249;break;}else{label=1261;break;}
 case 1249: 
 var $6475=$2;
 var $6476=$6;
 var $6477=(($6476+120)|0);
 var $6478=HEAP32[(($6477)>>2)];
 var $6479=($6475>>>0)>=($6478>>>0);
 if($6479){label=1250;break;}else{label=1256;break;}
 case 1250: 
 var $6481=$6;
 var $6482=(($6481+136)|0);
 var $6483=HEAP32[(($6482)>>2)];
 var $6484=($6483|0)!=0;
 if($6484){label=1251;break;}else{label=1255;break;}
 case 1251: 
 var $6486=$2;
 var $6487=$6;
 var $6488=(($6487+132)|0);
 var $6489=HEAP32[(($6488)>>2)];
 var $6490=($6486>>>0)>($6489>>>0);
 if($6490){label=1252;break;}else{label=1255;break;}
 case 1252: 
 var $6492=$6;
 var $6493=(($6492+100)|0);
 HEAP32[(($6493)>>2)]=1;
 var $6494=$6;
 var $6495=(($6494+136)|0);
 var $6496=HEAP32[(($6495)>>2)];
 var $6497=($6496|0)>1;
 if($6497){label=1253;break;}else{label=1254;break;}
 case 1253: 
 $1=-12;
 label=1658;break;
 case 1254: 
 label=1255;break;
 case 1255: 
 $1=0;
 label=1658;break;
 case 1256: 
 var $6502=$2;
 var $6503=(($6502+1)|0);
 $2=$6503;
 var $6504=HEAP8[($6502)];
 var $6505=($6504&255);
 switch(($6505|0)){case 10:case 11:case 12:case 13:case 133:{ label=1258;break;}default:{label=1257;break;}}break;
 case 1257: 
 $1=0;
 label=1658;break;
 case 1258: 
 label=1259;break;
 case 1259: 
 label=1260;break;
 case 1260: 
 var $6510=$i;
 var $6511=((($6510)+(1))|0);
 $i=$6511;
 label=1248;break;
 case 1261: 
 label=1347;break;
 case 1262: 
 $i=1;
 label=1263;break;
 case 1263: 
 var $6515=$i;
 var $6516=$min;
 var $6517=($6515|0)<=($6516|0);
 if($6517){label=1264;break;}else{label=1275;break;}
 case 1264: 
 var $6519=$2;
 var $6520=$6;
 var $6521=(($6520+120)|0);
 var $6522=HEAP32[(($6521)>>2)];
 var $6523=($6519>>>0)>=($6522>>>0);
 if($6523){label=1265;break;}else{label=1271;break;}
 case 1265: 
 var $6525=$6;
 var $6526=(($6525+136)|0);
 var $6527=HEAP32[(($6526)>>2)];
 var $6528=($6527|0)!=0;
 if($6528){label=1266;break;}else{label=1270;break;}
 case 1266: 
 var $6530=$2;
 var $6531=$6;
 var $6532=(($6531+132)|0);
 var $6533=HEAP32[(($6532)>>2)];
 var $6534=($6530>>>0)>($6533>>>0);
 if($6534){label=1267;break;}else{label=1270;break;}
 case 1267: 
 var $6536=$6;
 var $6537=(($6536+100)|0);
 HEAP32[(($6537)>>2)]=1;
 var $6538=$6;
 var $6539=(($6538+136)|0);
 var $6540=HEAP32[(($6539)>>2)];
 var $6541=($6540|0)>1;
 if($6541){label=1268;break;}else{label=1269;break;}
 case 1268: 
 $1=-12;
 label=1658;break;
 case 1269: 
 label=1270;break;
 case 1270: 
 $1=0;
 label=1658;break;
 case 1271: 
 var $6546=$2;
 var $6547=HEAP8[($6546)];
 var $6548=($6547&255);
 var $6549=$6;
 var $6550=(($6549+64)|0);
 var $6551=HEAP32[(($6550)>>2)];
 var $6552=(($6551+$6548)|0);
 var $6553=HEAP8[($6552)];
 var $6554=($6553&255);
 var $6555=$6554&4;
 var $6556=($6555|0)!=0;
 if($6556){label=1272;break;}else{label=1273;break;}
 case 1272: 
 $1=0;
 label=1658;break;
 case 1273: 
 var $6559=$2;
 var $6560=(($6559+1)|0);
 $2=$6560;
 label=1274;break;
 case 1274: 
 var $6562=$i;
 var $6563=((($6562)+(1))|0);
 $i=$6563;
 label=1263;break;
 case 1275: 
 label=1347;break;
 case 1276: 
 $i=1;
 label=1277;break;
 case 1277: 
 var $6567=$i;
 var $6568=$min;
 var $6569=($6567|0)<=($6568|0);
 if($6569){label=1278;break;}else{label=1289;break;}
 case 1278: 
 var $6571=$2;
 var $6572=$6;
 var $6573=(($6572+120)|0);
 var $6574=HEAP32[(($6573)>>2)];
 var $6575=($6571>>>0)>=($6574>>>0);
 if($6575){label=1279;break;}else{label=1285;break;}
 case 1279: 
 var $6577=$6;
 var $6578=(($6577+136)|0);
 var $6579=HEAP32[(($6578)>>2)];
 var $6580=($6579|0)!=0;
 if($6580){label=1280;break;}else{label=1284;break;}
 case 1280: 
 var $6582=$2;
 var $6583=$6;
 var $6584=(($6583+132)|0);
 var $6585=HEAP32[(($6584)>>2)];
 var $6586=($6582>>>0)>($6585>>>0);
 if($6586){label=1281;break;}else{label=1284;break;}
 case 1281: 
 var $6588=$6;
 var $6589=(($6588+100)|0);
 HEAP32[(($6589)>>2)]=1;
 var $6590=$6;
 var $6591=(($6590+136)|0);
 var $6592=HEAP32[(($6591)>>2)];
 var $6593=($6592|0)>1;
 if($6593){label=1282;break;}else{label=1283;break;}
 case 1282: 
 $1=-12;
 label=1658;break;
 case 1283: 
 label=1284;break;
 case 1284: 
 $1=0;
 label=1658;break;
 case 1285: 
 var $6598=$2;
 var $6599=HEAP8[($6598)];
 var $6600=($6599&255);
 var $6601=$6;
 var $6602=(($6601+64)|0);
 var $6603=HEAP32[(($6602)>>2)];
 var $6604=(($6603+$6600)|0);
 var $6605=HEAP8[($6604)];
 var $6606=($6605&255);
 var $6607=$6606&4;
 var $6608=($6607|0)==0;
 if($6608){label=1286;break;}else{label=1287;break;}
 case 1286: 
 $1=0;
 label=1658;break;
 case 1287: 
 var $6611=$2;
 var $6612=(($6611+1)|0);
 $2=$6612;
 label=1288;break;
 case 1288: 
 var $6614=$i;
 var $6615=((($6614)+(1))|0);
 $i=$6615;
 label=1277;break;
 case 1289: 
 label=1347;break;
 case 1290: 
 $i=1;
 label=1291;break;
 case 1291: 
 var $6619=$i;
 var $6620=$min;
 var $6621=($6619|0)<=($6620|0);
 if($6621){label=1292;break;}else{label=1303;break;}
 case 1292: 
 var $6623=$2;
 var $6624=$6;
 var $6625=(($6624+120)|0);
 var $6626=HEAP32[(($6625)>>2)];
 var $6627=($6623>>>0)>=($6626>>>0);
 if($6627){label=1293;break;}else{label=1299;break;}
 case 1293: 
 var $6629=$6;
 var $6630=(($6629+136)|0);
 var $6631=HEAP32[(($6630)>>2)];
 var $6632=($6631|0)!=0;
 if($6632){label=1294;break;}else{label=1298;break;}
 case 1294: 
 var $6634=$2;
 var $6635=$6;
 var $6636=(($6635+132)|0);
 var $6637=HEAP32[(($6636)>>2)];
 var $6638=($6634>>>0)>($6637>>>0);
 if($6638){label=1295;break;}else{label=1298;break;}
 case 1295: 
 var $6640=$6;
 var $6641=(($6640+100)|0);
 HEAP32[(($6641)>>2)]=1;
 var $6642=$6;
 var $6643=(($6642+136)|0);
 var $6644=HEAP32[(($6643)>>2)];
 var $6645=($6644|0)>1;
 if($6645){label=1296;break;}else{label=1297;break;}
 case 1296: 
 $1=-12;
 label=1658;break;
 case 1297: 
 label=1298;break;
 case 1298: 
 $1=0;
 label=1658;break;
 case 1299: 
 var $6650=$2;
 var $6651=HEAP8[($6650)];
 var $6652=($6651&255);
 var $6653=$6;
 var $6654=(($6653+64)|0);
 var $6655=HEAP32[(($6654)>>2)];
 var $6656=(($6655+$6652)|0);
 var $6657=HEAP8[($6656)];
 var $6658=($6657&255);
 var $6659=$6658&1;
 var $6660=($6659|0)!=0;
 if($6660){label=1300;break;}else{label=1301;break;}
 case 1300: 
 $1=0;
 label=1658;break;
 case 1301: 
 var $6663=$2;
 var $6664=(($6663+1)|0);
 $2=$6664;
 label=1302;break;
 case 1302: 
 var $6666=$i;
 var $6667=((($6666)+(1))|0);
 $i=$6667;
 label=1291;break;
 case 1303: 
 label=1347;break;
 case 1304: 
 $i=1;
 label=1305;break;
 case 1305: 
 var $6671=$i;
 var $6672=$min;
 var $6673=($6671|0)<=($6672|0);
 if($6673){label=1306;break;}else{label=1317;break;}
 case 1306: 
 var $6675=$2;
 var $6676=$6;
 var $6677=(($6676+120)|0);
 var $6678=HEAP32[(($6677)>>2)];
 var $6679=($6675>>>0)>=($6678>>>0);
 if($6679){label=1307;break;}else{label=1313;break;}
 case 1307: 
 var $6681=$6;
 var $6682=(($6681+136)|0);
 var $6683=HEAP32[(($6682)>>2)];
 var $6684=($6683|0)!=0;
 if($6684){label=1308;break;}else{label=1312;break;}
 case 1308: 
 var $6686=$2;
 var $6687=$6;
 var $6688=(($6687+132)|0);
 var $6689=HEAP32[(($6688)>>2)];
 var $6690=($6686>>>0)>($6689>>>0);
 if($6690){label=1309;break;}else{label=1312;break;}
 case 1309: 
 var $6692=$6;
 var $6693=(($6692+100)|0);
 HEAP32[(($6693)>>2)]=1;
 var $6694=$6;
 var $6695=(($6694+136)|0);
 var $6696=HEAP32[(($6695)>>2)];
 var $6697=($6696|0)>1;
 if($6697){label=1310;break;}else{label=1311;break;}
 case 1310: 
 $1=-12;
 label=1658;break;
 case 1311: 
 label=1312;break;
 case 1312: 
 $1=0;
 label=1658;break;
 case 1313: 
 var $6702=$2;
 var $6703=HEAP8[($6702)];
 var $6704=($6703&255);
 var $6705=$6;
 var $6706=(($6705+64)|0);
 var $6707=HEAP32[(($6706)>>2)];
 var $6708=(($6707+$6704)|0);
 var $6709=HEAP8[($6708)];
 var $6710=($6709&255);
 var $6711=$6710&1;
 var $6712=($6711|0)==0;
 if($6712){label=1314;break;}else{label=1315;break;}
 case 1314: 
 $1=0;
 label=1658;break;
 case 1315: 
 var $6715=$2;
 var $6716=(($6715+1)|0);
 $2=$6716;
 label=1316;break;
 case 1316: 
 var $6718=$i;
 var $6719=((($6718)+(1))|0);
 $i=$6719;
 label=1305;break;
 case 1317: 
 label=1347;break;
 case 1318: 
 $i=1;
 label=1319;break;
 case 1319: 
 var $6723=$i;
 var $6724=$min;
 var $6725=($6723|0)<=($6724|0);
 if($6725){label=1320;break;}else{label=1331;break;}
 case 1320: 
 var $6727=$2;
 var $6728=$6;
 var $6729=(($6728+120)|0);
 var $6730=HEAP32[(($6729)>>2)];
 var $6731=($6727>>>0)>=($6730>>>0);
 if($6731){label=1321;break;}else{label=1327;break;}
 case 1321: 
 var $6733=$6;
 var $6734=(($6733+136)|0);
 var $6735=HEAP32[(($6734)>>2)];
 var $6736=($6735|0)!=0;
 if($6736){label=1322;break;}else{label=1326;break;}
 case 1322: 
 var $6738=$2;
 var $6739=$6;
 var $6740=(($6739+132)|0);
 var $6741=HEAP32[(($6740)>>2)];
 var $6742=($6738>>>0)>($6741>>>0);
 if($6742){label=1323;break;}else{label=1326;break;}
 case 1323: 
 var $6744=$6;
 var $6745=(($6744+100)|0);
 HEAP32[(($6745)>>2)]=1;
 var $6746=$6;
 var $6747=(($6746+136)|0);
 var $6748=HEAP32[(($6747)>>2)];
 var $6749=($6748|0)>1;
 if($6749){label=1324;break;}else{label=1325;break;}
 case 1324: 
 $1=-12;
 label=1658;break;
 case 1325: 
 label=1326;break;
 case 1326: 
 $1=0;
 label=1658;break;
 case 1327: 
 var $6754=$2;
 var $6755=HEAP8[($6754)];
 var $6756=($6755&255);
 var $6757=$6;
 var $6758=(($6757+64)|0);
 var $6759=HEAP32[(($6758)>>2)];
 var $6760=(($6759+$6756)|0);
 var $6761=HEAP8[($6760)];
 var $6762=($6761&255);
 var $6763=$6762&16;
 var $6764=($6763|0)!=0;
 if($6764){label=1328;break;}else{label=1329;break;}
 case 1328: 
 $1=0;
 label=1658;break;
 case 1329: 
 var $6767=$2;
 var $6768=(($6767+1)|0);
 $2=$6768;
 label=1330;break;
 case 1330: 
 var $6770=$i;
 var $6771=((($6770)+(1))|0);
 $i=$6771;
 label=1319;break;
 case 1331: 
 label=1347;break;
 case 1332: 
 $i=1;
 label=1333;break;
 case 1333: 
 var $6775=$i;
 var $6776=$min;
 var $6777=($6775|0)<=($6776|0);
 if($6777){label=1334;break;}else{label=1345;break;}
 case 1334: 
 var $6779=$2;
 var $6780=$6;
 var $6781=(($6780+120)|0);
 var $6782=HEAP32[(($6781)>>2)];
 var $6783=($6779>>>0)>=($6782>>>0);
 if($6783){label=1335;break;}else{label=1341;break;}
 case 1335: 
 var $6785=$6;
 var $6786=(($6785+136)|0);
 var $6787=HEAP32[(($6786)>>2)];
 var $6788=($6787|0)!=0;
 if($6788){label=1336;break;}else{label=1340;break;}
 case 1336: 
 var $6790=$2;
 var $6791=$6;
 var $6792=(($6791+132)|0);
 var $6793=HEAP32[(($6792)>>2)];
 var $6794=($6790>>>0)>($6793>>>0);
 if($6794){label=1337;break;}else{label=1340;break;}
 case 1337: 
 var $6796=$6;
 var $6797=(($6796+100)|0);
 HEAP32[(($6797)>>2)]=1;
 var $6798=$6;
 var $6799=(($6798+136)|0);
 var $6800=HEAP32[(($6799)>>2)];
 var $6801=($6800|0)>1;
 if($6801){label=1338;break;}else{label=1339;break;}
 case 1338: 
 $1=-12;
 label=1658;break;
 case 1339: 
 label=1340;break;
 case 1340: 
 $1=0;
 label=1658;break;
 case 1341: 
 var $6806=$2;
 var $6807=HEAP8[($6806)];
 var $6808=($6807&255);
 var $6809=$6;
 var $6810=(($6809+64)|0);
 var $6811=HEAP32[(($6810)>>2)];
 var $6812=(($6811+$6808)|0);
 var $6813=HEAP8[($6812)];
 var $6814=($6813&255);
 var $6815=$6814&16;
 var $6816=($6815|0)==0;
 if($6816){label=1342;break;}else{label=1343;break;}
 case 1342: 
 $1=0;
 label=1658;break;
 case 1343: 
 var $6819=$2;
 var $6820=(($6819+1)|0);
 $2=$6820;
 label=1344;break;
 case 1344: 
 var $6822=$i;
 var $6823=((($6822)+(1))|0);
 $i=$6823;
 label=1333;break;
 case 1345: 
 label=1347;break;
 case 1346: 
 $1=-14;
 label=1658;break;
 case 1347: 
 label=1348;break;
 case 1348: 
 var $6828=$min;
 var $6829=$max;
 var $6830=($6828|0)==($6829|0);
 if($6830){label=1349;break;}else{label=1350;break;}
 case 1349: 
 label=16;break;
 case 1350: 
 var $6833=$minimize;
 var $6834=($6833|0)!=0;
 if($6834){label=1351;break;}else{label=1431;break;}
 case 1351: 
 var $6836=$min;
 $i=$6836;
 label=1352;break;
 case 1352: 
 var $6838=$2;
 var $6839=$3;
 var $6840=$4;
 var $6841=$5;
 var $6842=$6;
 var $6843=$7;
 var $6844=HEAP32[(($8)>>2)];
 var $6845=((($6844)+(1))|0);
 var $6846=_match($6838,$6839,$6840,$6841,$6842,$6843,$6845);
 $rrc=$6846;
 var $6847=$rrc;
 var $6848=($6847|0)!=0;
 if($6848){label=1353;break;}else{label=1354;break;}
 case 1353: 
 var $6850=$rrc;
 $1=$6850;
 label=1658;break;
 case 1354: 
 var $6852=$i;
 var $6853=$max;
 var $6854=($6852|0)>=($6853|0);
 if($6854){label=1355;break;}else{label=1356;break;}
 case 1355: 
 $1=0;
 label=1658;break;
 case 1356: 
 var $6857=$2;
 var $6858=$6;
 var $6859=(($6858+120)|0);
 var $6860=HEAP32[(($6859)>>2)];
 var $6861=($6857>>>0)>=($6860>>>0);
 if($6861){label=1357;break;}else{label=1363;break;}
 case 1357: 
 var $6863=$6;
 var $6864=(($6863+136)|0);
 var $6865=HEAP32[(($6864)>>2)];
 var $6866=($6865|0)!=0;
 if($6866){label=1358;break;}else{label=1362;break;}
 case 1358: 
 var $6868=$2;
 var $6869=$6;
 var $6870=(($6869+132)|0);
 var $6871=HEAP32[(($6870)>>2)];
 var $6872=($6868>>>0)>($6871>>>0);
 if($6872){label=1359;break;}else{label=1362;break;}
 case 1359: 
 var $6874=$6;
 var $6875=(($6874+100)|0);
 HEAP32[(($6875)>>2)]=1;
 var $6876=$6;
 var $6877=(($6876+136)|0);
 var $6878=HEAP32[(($6877)>>2)];
 var $6879=($6878|0)>1;
 if($6879){label=1360;break;}else{label=1361;break;}
 case 1360: 
 $1=-12;
 label=1658;break;
 case 1361: 
 label=1362;break;
 case 1362: 
 $1=0;
 label=1658;break;
 case 1363: 
 var $6884=$ctype;
 var $6885=($6884|0)==12;
 if($6885){label=1364;break;}else{label=1372;break;}
 case 1364: 
 var $6887=$6;
 var $6888=(($6887+24)|0);
 var $6889=HEAP32[(($6888)>>2)];
 var $6890=($6889|0)!=0;
 if($6890){label=1365;break;}else{label=1367;break;}
 case 1365: 
 var $6892=$2;
 var $6893=$6;
 var $6894=(($6893+120)|0);
 var $6895=HEAP32[(($6894)>>2)];
 var $6896=($6892>>>0)<($6895>>>0);
 if($6896){label=1366;break;}else{label=1372;break;}
 case 1366: 
 var $6898=$2;
 var $6899=$6;
 var $6900=(($6899+24)|0);
 var $6901=HEAP32[(($6900)>>2)];
 var $6902=$6;
 var $6903=(($6902+120)|0);
 var $6904=HEAP32[(($6903)>>2)];
 var $6905=$6;
 var $6906=(($6905+28)|0);
 var $6907=$utf;
 var $6908=__pcre_is_newline($6898,$6901,$6904,$6906,$6907);
 var $6909=($6908|0)!=0;
 if($6909){label=1371;break;}else{label=1372;break;}
 case 1367: 
 var $6911=$2;
 var $6912=$6;
 var $6913=(($6912+120)|0);
 var $6914=HEAP32[(($6913)>>2)];
 var $6915=$6;
 var $6916=(($6915+28)|0);
 var $6917=HEAP32[(($6916)>>2)];
 var $6918=(((-$6917))|0);
 var $6919=(($6914+$6918)|0);
 var $6920=($6911>>>0)<=($6919>>>0);
 if($6920){label=1368;break;}else{label=1372;break;}
 case 1368: 
 var $6922=$2;
 var $6923=HEAP8[($6922)];
 var $6924=($6923&255);
 var $6925=$6;
 var $6926=(($6925+52)|0);
 var $6927=(($6926)|0);
 var $6928=HEAP8[($6927)];
 var $6929=($6928&255);
 var $6930=($6924|0)==($6929|0);
 if($6930){label=1369;break;}else{label=1372;break;}
 case 1369: 
 var $6932=$6;
 var $6933=(($6932+28)|0);
 var $6934=HEAP32[(($6933)>>2)];
 var $6935=($6934|0)==1;
 if($6935){label=1371;break;}else{label=1370;break;}
 case 1370: 
 var $6937=$2;
 var $6938=(($6937+1)|0);
 var $6939=HEAP8[($6938)];
 var $6940=($6939&255);
 var $6941=$6;
 var $6942=(($6941+52)|0);
 var $6943=(($6942+1)|0);
 var $6944=HEAP8[($6943)];
 var $6945=($6944&255);
 var $6946=($6940|0)==($6945|0);
 if($6946){label=1371;break;}else{label=1372;break;}
 case 1371: 
 $1=0;
 label=1658;break;
 case 1372: 
 var $6949=$2;
 var $6950=(($6949+1)|0);
 $2=$6950;
 var $6951=HEAP8[($6949)];
 var $6952=($6951&255);
 $c=$6952;
 var $6953=$ctype;
 switch(($6953|0)){case 12:{ label=1373;break;}case 13:case 14:{ label=1382;break;}case 17:{ label=1383;break;}case 18:{ label=1394;break;}case 19:{ label=1398;break;}case 20:{ label=1402;break;}case 21:{ label=1406;break;}case 6:{ label=1410;break;}case 7:{ label=1413;break;}case 8:{ label=1416;break;}case 9:{ label=1419;break;}case 10:{ label=1422;break;}case 11:{ label=1425;break;}default:{label=1428;break;}}break;
 case 1373: 
 var $6955=$6;
 var $6956=(($6955+136)|0);
 var $6957=HEAP32[(($6956)>>2)];
 var $6958=($6957|0)!=0;
 if($6958){label=1374;break;}else{label=1381;break;}
 case 1374: 
 var $6960=$2;
 var $6961=$6;
 var $6962=(($6961+120)|0);
 var $6963=HEAP32[(($6962)>>2)];
 var $6964=($6960>>>0)>=($6963>>>0);
 if($6964){label=1375;break;}else{label=1381;break;}
 case 1375: 
 var $6966=$6;
 var $6967=(($6966+24)|0);
 var $6968=HEAP32[(($6967)>>2)];
 var $6969=($6968|0)==0;
 if($6969){label=1376;break;}else{label=1381;break;}
 case 1376: 
 var $6971=$6;
 var $6972=(($6971+28)|0);
 var $6973=HEAP32[(($6972)>>2)];
 var $6974=($6973|0)==2;
 if($6974){label=1377;break;}else{label=1381;break;}
 case 1377: 
 var $6976=$c;
 var $6977=$6;
 var $6978=(($6977+52)|0);
 var $6979=(($6978)|0);
 var $6980=HEAP8[($6979)];
 var $6981=($6980&255);
 var $6982=($6976|0)==($6981|0);
 if($6982){label=1378;break;}else{label=1381;break;}
 case 1378: 
 var $6984=$6;
 var $6985=(($6984+100)|0);
 HEAP32[(($6985)>>2)]=1;
 var $6986=$6;
 var $6987=(($6986+136)|0);
 var $6988=HEAP32[(($6987)>>2)];
 var $6989=($6988|0)>1;
 if($6989){label=1379;break;}else{label=1380;break;}
 case 1379: 
 $1=-12;
 label=1658;break;
 case 1380: 
 label=1381;break;
 case 1381: 
 label=1429;break;
 case 1382: 
 label=1429;break;
 case 1383: 
 var $6995=$c;
 switch(($6995|0)){case 13:{ label=1385;break;}case 10:{ label=1389;break;}case 11:case 12:case 133:{ label=1390;break;}default:{label=1384;break;}}break;
 case 1384: 
 $1=0;
 label=1658;break;
 case 1385: 
 var $6998=$2;
 var $6999=$6;
 var $7000=(($6999+120)|0);
 var $7001=HEAP32[(($7000)>>2)];
 var $7002=($6998>>>0)<($7001>>>0);
 if($7002){label=1386;break;}else{label=1388;break;}
 case 1386: 
 var $7004=$2;
 var $7005=HEAP8[($7004)];
 var $7006=($7005&255);
 var $7007=($7006|0)==10;
 if($7007){label=1387;break;}else{label=1388;break;}
 case 1387: 
 var $7009=$2;
 var $7010=(($7009+1)|0);
 $2=$7010;
 label=1388;break;
 case 1388: 
 label=1393;break;
 case 1389: 
 label=1393;break;
 case 1390: 
 var $7014=$6;
 var $7015=(($7014+104)|0);
 var $7016=HEAP32[(($7015)>>2)];
 var $7017=($7016|0)!=0;
 if($7017){label=1391;break;}else{label=1392;break;}
 case 1391: 
 $1=0;
 label=1658;break;
 case 1392: 
 label=1393;break;
 case 1393: 
 label=1429;break;
 case 1394: 
 var $7022=$c;
 if(($7022|0)==9|($7022|0)==32|($7022|0)==160){ label=1396;break;}else{label=1395;break;}
 case 1395: 
 label=1397;break;
 case 1396: 
 $1=0;
 label=1658;break;
 case 1397: 
 label=1429;break;
 case 1398: 
 var $7027=$c;
 if(($7027|0)==9|($7027|0)==32|($7027|0)==160){ label=1400;break;}else{label=1399;break;}
 case 1399: 
 $1=0;
 label=1658;break;
 case 1400: 
 label=1401;break;
 case 1401: 
 label=1429;break;
 case 1402: 
 var $7032=$c;
 switch(($7032|0)){case 10:case 11:case 12:case 13:case 133:{ label=1404;break;}default:{label=1403;break;}}break;
 case 1403: 
 label=1405;break;
 case 1404: 
 $1=0;
 label=1658;break;
 case 1405: 
 label=1429;break;
 case 1406: 
 var $7037=$c;
 switch(($7037|0)){case 10:case 11:case 12:case 13:case 133:{ label=1408;break;}default:{label=1407;break;}}break;
 case 1407: 
 $1=0;
 label=1658;break;
 case 1408: 
 label=1409;break;
 case 1409: 
 label=1429;break;
 case 1410: 
 var $7042=$c;
 var $7043=$6;
 var $7044=(($7043+64)|0);
 var $7045=HEAP32[(($7044)>>2)];
 var $7046=(($7045+$7042)|0);
 var $7047=HEAP8[($7046)];
 var $7048=($7047&255);
 var $7049=$7048&4;
 var $7050=($7049|0)!=0;
 if($7050){label=1411;break;}else{label=1412;break;}
 case 1411: 
 $1=0;
 label=1658;break;
 case 1412: 
 label=1429;break;
 case 1413: 
 var $7054=$c;
 var $7055=$6;
 var $7056=(($7055+64)|0);
 var $7057=HEAP32[(($7056)>>2)];
 var $7058=(($7057+$7054)|0);
 var $7059=HEAP8[($7058)];
 var $7060=($7059&255);
 var $7061=$7060&4;
 var $7062=($7061|0)==0;
 if($7062){label=1414;break;}else{label=1415;break;}
 case 1414: 
 $1=0;
 label=1658;break;
 case 1415: 
 label=1429;break;
 case 1416: 
 var $7066=$c;
 var $7067=$6;
 var $7068=(($7067+64)|0);
 var $7069=HEAP32[(($7068)>>2)];
 var $7070=(($7069+$7066)|0);
 var $7071=HEAP8[($7070)];
 var $7072=($7071&255);
 var $7073=$7072&1;
 var $7074=($7073|0)!=0;
 if($7074){label=1417;break;}else{label=1418;break;}
 case 1417: 
 $1=0;
 label=1658;break;
 case 1418: 
 label=1429;break;
 case 1419: 
 var $7078=$c;
 var $7079=$6;
 var $7080=(($7079+64)|0);
 var $7081=HEAP32[(($7080)>>2)];
 var $7082=(($7081+$7078)|0);
 var $7083=HEAP8[($7082)];
 var $7084=($7083&255);
 var $7085=$7084&1;
 var $7086=($7085|0)==0;
 if($7086){label=1420;break;}else{label=1421;break;}
 case 1420: 
 $1=0;
 label=1658;break;
 case 1421: 
 label=1429;break;
 case 1422: 
 var $7090=$c;
 var $7091=$6;
 var $7092=(($7091+64)|0);
 var $7093=HEAP32[(($7092)>>2)];
 var $7094=(($7093+$7090)|0);
 var $7095=HEAP8[($7094)];
 var $7096=($7095&255);
 var $7097=$7096&16;
 var $7098=($7097|0)!=0;
 if($7098){label=1423;break;}else{label=1424;break;}
 case 1423: 
 $1=0;
 label=1658;break;
 case 1424: 
 label=1429;break;
 case 1425: 
 var $7102=$c;
 var $7103=$6;
 var $7104=(($7103+64)|0);
 var $7105=HEAP32[(($7104)>>2)];
 var $7106=(($7105+$7102)|0);
 var $7107=HEAP8[($7106)];
 var $7108=($7107&255);
 var $7109=$7108&16;
 var $7110=($7109|0)==0;
 if($7110){label=1426;break;}else{label=1427;break;}
 case 1426: 
 $1=0;
 label=1658;break;
 case 1427: 
 label=1429;break;
 case 1428: 
 $1=-14;
 label=1658;break;
 case 1429: 
 label=1430;break;
 case 1430: 
 var $7116=$i;
 var $7117=((($7116)+(1))|0);
 $i=$7117;
 label=1352;break;
 case 1431: 
 var $7119=$2;
 $pp=$7119;
 var $7120=$ctype;
 switch(($7120|0)){case 12:{ label=1432;break;}case 13:case 14:{ label=1460;break;}case 17:{ label=1469;break;}case 18:{ label=1494;break;}case 19:{ label=1510;break;}case 20:{ label=1526;break;}case 21:{ label=1542;break;}case 6:{ label=1558;break;}case 7:{ label=1572;break;}case 8:{ label=1586;break;}case 9:{ label=1600;break;}case 10:{ label=1614;break;}case 11:{ label=1628;break;}default:{label=1642;break;}}break;
 case 1432: 
 var $7122=$min;
 $i=$7122;
 label=1433;break;
 case 1433: 
 var $7124=$i;
 var $7125=$max;
 var $7126=($7124|0)<($7125|0);
 if($7126){label=1434;break;}else{label=1459;break;}
 case 1434: 
 var $7128=$2;
 var $7129=$6;
 var $7130=(($7129+120)|0);
 var $7131=HEAP32[(($7130)>>2)];
 var $7132=($7128>>>0)>=($7131>>>0);
 if($7132){label=1435;break;}else{label=1441;break;}
 case 1435: 
 var $7134=$6;
 var $7135=(($7134+136)|0);
 var $7136=HEAP32[(($7135)>>2)];
 var $7137=($7136|0)!=0;
 if($7137){label=1436;break;}else{label=1440;break;}
 case 1436: 
 var $7139=$2;
 var $7140=$6;
 var $7141=(($7140+132)|0);
 var $7142=HEAP32[(($7141)>>2)];
 var $7143=($7139>>>0)>($7142>>>0);
 if($7143){label=1437;break;}else{label=1440;break;}
 case 1437: 
 var $7145=$6;
 var $7146=(($7145+100)|0);
 HEAP32[(($7146)>>2)]=1;
 var $7147=$6;
 var $7148=(($7147+136)|0);
 var $7149=HEAP32[(($7148)>>2)];
 var $7150=($7149|0)>1;
 if($7150){label=1438;break;}else{label=1439;break;}
 case 1438: 
 $1=-12;
 label=1658;break;
 case 1439: 
 label=1440;break;
 case 1440: 
 label=1459;break;
 case 1441: 
 var $7155=$6;
 var $7156=(($7155+24)|0);
 var $7157=HEAP32[(($7156)>>2)];
 var $7158=($7157|0)!=0;
 if($7158){label=1442;break;}else{label=1444;break;}
 case 1442: 
 var $7160=$2;
 var $7161=$6;
 var $7162=(($7161+120)|0);
 var $7163=HEAP32[(($7162)>>2)];
 var $7164=($7160>>>0)<($7163>>>0);
 if($7164){label=1443;break;}else{label=1449;break;}
 case 1443: 
 var $7166=$2;
 var $7167=$6;
 var $7168=(($7167+24)|0);
 var $7169=HEAP32[(($7168)>>2)];
 var $7170=$6;
 var $7171=(($7170+120)|0);
 var $7172=HEAP32[(($7171)>>2)];
 var $7173=$6;
 var $7174=(($7173+28)|0);
 var $7175=$utf;
 var $7176=__pcre_is_newline($7166,$7169,$7172,$7174,$7175);
 var $7177=($7176|0)!=0;
 if($7177){label=1448;break;}else{label=1449;break;}
 case 1444: 
 var $7179=$2;
 var $7180=$6;
 var $7181=(($7180+120)|0);
 var $7182=HEAP32[(($7181)>>2)];
 var $7183=$6;
 var $7184=(($7183+28)|0);
 var $7185=HEAP32[(($7184)>>2)];
 var $7186=(((-$7185))|0);
 var $7187=(($7182+$7186)|0);
 var $7188=($7179>>>0)<=($7187>>>0);
 if($7188){label=1445;break;}else{label=1449;break;}
 case 1445: 
 var $7190=$2;
 var $7191=HEAP8[($7190)];
 var $7192=($7191&255);
 var $7193=$6;
 var $7194=(($7193+52)|0);
 var $7195=(($7194)|0);
 var $7196=HEAP8[($7195)];
 var $7197=($7196&255);
 var $7198=($7192|0)==($7197|0);
 if($7198){label=1446;break;}else{label=1449;break;}
 case 1446: 
 var $7200=$6;
 var $7201=(($7200+28)|0);
 var $7202=HEAP32[(($7201)>>2)];
 var $7203=($7202|0)==1;
 if($7203){label=1448;break;}else{label=1447;break;}
 case 1447: 
 var $7205=$2;
 var $7206=(($7205+1)|0);
 var $7207=HEAP8[($7206)];
 var $7208=($7207&255);
 var $7209=$6;
 var $7210=(($7209+52)|0);
 var $7211=(($7210+1)|0);
 var $7212=HEAP8[($7211)];
 var $7213=($7212&255);
 var $7214=($7208|0)==($7213|0);
 if($7214){label=1448;break;}else{label=1449;break;}
 case 1448: 
 label=1459;break;
 case 1449: 
 var $7217=$6;
 var $7218=(($7217+136)|0);
 var $7219=HEAP32[(($7218)>>2)];
 var $7220=($7219|0)!=0;
 if($7220){label=1450;break;}else{label=1457;break;}
 case 1450: 
 var $7222=$2;
 var $7223=(($7222+1)|0);
 var $7224=$6;
 var $7225=(($7224+120)|0);
 var $7226=HEAP32[(($7225)>>2)];
 var $7227=($7223>>>0)>=($7226>>>0);
 if($7227){label=1451;break;}else{label=1457;break;}
 case 1451: 
 var $7229=$6;
 var $7230=(($7229+24)|0);
 var $7231=HEAP32[(($7230)>>2)];
 var $7232=($7231|0)==0;
 if($7232){label=1452;break;}else{label=1457;break;}
 case 1452: 
 var $7234=$6;
 var $7235=(($7234+28)|0);
 var $7236=HEAP32[(($7235)>>2)];
 var $7237=($7236|0)==2;
 if($7237){label=1453;break;}else{label=1457;break;}
 case 1453: 
 var $7239=$2;
 var $7240=HEAP8[($7239)];
 var $7241=($7240&255);
 var $7242=$6;
 var $7243=(($7242+52)|0);
 var $7244=(($7243)|0);
 var $7245=HEAP8[($7244)];
 var $7246=($7245&255);
 var $7247=($7241|0)==($7246|0);
 if($7247){label=1454;break;}else{label=1457;break;}
 case 1454: 
 var $7249=$6;
 var $7250=(($7249+100)|0);
 HEAP32[(($7250)>>2)]=1;
 var $7251=$6;
 var $7252=(($7251+136)|0);
 var $7253=HEAP32[(($7252)>>2)];
 var $7254=($7253|0)>1;
 if($7254){label=1455;break;}else{label=1456;break;}
 case 1455: 
 $1=-12;
 label=1658;break;
 case 1456: 
 label=1457;break;
 case 1457: 
 var $7258=$2;
 var $7259=(($7258+1)|0);
 $2=$7259;
 label=1458;break;
 case 1458: 
 var $7261=$i;
 var $7262=((($7261)+(1))|0);
 $i=$7262;
 label=1433;break;
 case 1459: 
 label=1643;break;
 case 1460: 
 var $7265=$max;
 var $7266=$min;
 var $7267=((($7265)-($7266))|0);
 $c=$7267;
 var $7268=$c;
 var $7269=$6;
 var $7270=(($7269+120)|0);
 var $7271=HEAP32[(($7270)>>2)];
 var $7272=$2;
 var $7273=$7271;
 var $7274=$7272;
 var $7275=((($7273)-($7274))|0);
 var $7276=($7268>>>0)>($7275>>>0);
 if($7276){label=1461;break;}else{label=1467;break;}
 case 1461: 
 var $7278=$6;
 var $7279=(($7278+120)|0);
 var $7280=HEAP32[(($7279)>>2)];
 $2=$7280;
 var $7281=$6;
 var $7282=(($7281+136)|0);
 var $7283=HEAP32[(($7282)>>2)];
 var $7284=($7283|0)!=0;
 if($7284){label=1462;break;}else{label=1466;break;}
 case 1462: 
 var $7286=$2;
 var $7287=$6;
 var $7288=(($7287+132)|0);
 var $7289=HEAP32[(($7288)>>2)];
 var $7290=($7286>>>0)>($7289>>>0);
 if($7290){label=1463;break;}else{label=1466;break;}
 case 1463: 
 var $7292=$6;
 var $7293=(($7292+100)|0);
 HEAP32[(($7293)>>2)]=1;
 var $7294=$6;
 var $7295=(($7294+136)|0);
 var $7296=HEAP32[(($7295)>>2)];
 var $7297=($7296|0)>1;
 if($7297){label=1464;break;}else{label=1465;break;}
 case 1464: 
 $1=-12;
 label=1658;break;
 case 1465: 
 label=1466;break;
 case 1466: 
 label=1468;break;
 case 1467: 
 var $7302=$c;
 var $7303=$2;
 var $7304=(($7303+$7302)|0);
 $2=$7304;
 label=1468;break;
 case 1468: 
 label=1643;break;
 case 1469: 
 var $7307=$min;
 $i=$7307;
 label=1470;break;
 case 1470: 
 var $7309=$i;
 var $7310=$max;
 var $7311=($7309|0)<($7310|0);
 if($7311){label=1471;break;}else{label=1493;break;}
 case 1471: 
 var $7313=$2;
 var $7314=$6;
 var $7315=(($7314+120)|0);
 var $7316=HEAP32[(($7315)>>2)];
 var $7317=($7313>>>0)>=($7316>>>0);
 if($7317){label=1472;break;}else{label=1478;break;}
 case 1472: 
 var $7319=$6;
 var $7320=(($7319+136)|0);
 var $7321=HEAP32[(($7320)>>2)];
 var $7322=($7321|0)!=0;
 if($7322){label=1473;break;}else{label=1477;break;}
 case 1473: 
 var $7324=$2;
 var $7325=$6;
 var $7326=(($7325+132)|0);
 var $7327=HEAP32[(($7326)>>2)];
 var $7328=($7324>>>0)>($7327>>>0);
 if($7328){label=1474;break;}else{label=1477;break;}
 case 1474: 
 var $7330=$6;
 var $7331=(($7330+100)|0);
 HEAP32[(($7331)>>2)]=1;
 var $7332=$6;
 var $7333=(($7332+136)|0);
 var $7334=HEAP32[(($7333)>>2)];
 var $7335=($7334|0)>1;
 if($7335){label=1475;break;}else{label=1476;break;}
 case 1475: 
 $1=-12;
 label=1658;break;
 case 1476: 
 label=1477;break;
 case 1477: 
 label=1493;break;
 case 1478: 
 var $7340=$2;
 var $7341=HEAP8[($7340)];
 var $7342=($7341&255);
 $c=$7342;
 var $7343=$c;
 var $7344=($7343|0)==13;
 if($7344){label=1479;break;}else{label=1484;break;}
 case 1479: 
 var $7346=$2;
 var $7347=(($7346+1)|0);
 $2=$7347;
 var $7348=$6;
 var $7349=(($7348+120)|0);
 var $7350=HEAP32[(($7349)>>2)];
 var $7351=($7347>>>0)>=($7350>>>0);
 if($7351){label=1480;break;}else{label=1481;break;}
 case 1480: 
 label=1493;break;
 case 1481: 
 var $7354=$2;
 var $7355=HEAP8[($7354)];
 var $7356=($7355&255);
 var $7357=($7356|0)==10;
 if($7357){label=1482;break;}else{label=1483;break;}
 case 1482: 
 var $7359=$2;
 var $7360=(($7359+1)|0);
 $2=$7360;
 label=1483;break;
 case 1483: 
 label=1491;break;
 case 1484: 
 var $7363=$c;
 var $7364=($7363|0)!=10;
 if($7364){label=1485;break;}else{label=1490;break;}
 case 1485: 
 var $7366=$6;
 var $7367=(($7366+104)|0);
 var $7368=HEAP32[(($7367)>>2)];
 var $7369=($7368|0)!=0;
 if($7369){label=1489;break;}else{label=1486;break;}
 case 1486: 
 var $7371=$c;
 var $7372=($7371|0)!=11;
 if($7372){label=1487;break;}else{label=1490;break;}
 case 1487: 
 var $7374=$c;
 var $7375=($7374|0)!=12;
 if($7375){label=1488;break;}else{label=1490;break;}
 case 1488: 
 var $7377=$c;
 var $7378=($7377|0)!=133;
 if($7378){label=1489;break;}else{label=1490;break;}
 case 1489: 
 label=1493;break;
 case 1490: 
 var $7381=$2;
 var $7382=(($7381+1)|0);
 $2=$7382;
 label=1491;break;
 case 1491: 
 label=1492;break;
 case 1492: 
 var $7385=$i;
 var $7386=((($7385)+(1))|0);
 $i=$7386;
 label=1470;break;
 case 1493: 
 label=1643;break;
 case 1494: 
 var $7389=$min;
 $i=$7389;
 label=1495;break;
 case 1495: 
 var $7391=$i;
 var $7392=$max;
 var $7393=($7391|0)<($7392|0);
 if($7393){label=1496;break;}else{label=1508;break;}
 case 1496: 
 var $7395=$2;
 var $7396=$6;
 var $7397=(($7396+120)|0);
 var $7398=HEAP32[(($7397)>>2)];
 var $7399=($7395>>>0)>=($7398>>>0);
 if($7399){label=1497;break;}else{label=1503;break;}
 case 1497: 
 var $7401=$6;
 var $7402=(($7401+136)|0);
 var $7403=HEAP32[(($7402)>>2)];
 var $7404=($7403|0)!=0;
 if($7404){label=1498;break;}else{label=1502;break;}
 case 1498: 
 var $7406=$2;
 var $7407=$6;
 var $7408=(($7407+132)|0);
 var $7409=HEAP32[(($7408)>>2)];
 var $7410=($7406>>>0)>($7409>>>0);
 if($7410){label=1499;break;}else{label=1502;break;}
 case 1499: 
 var $7412=$6;
 var $7413=(($7412+100)|0);
 HEAP32[(($7413)>>2)]=1;
 var $7414=$6;
 var $7415=(($7414+136)|0);
 var $7416=HEAP32[(($7415)>>2)];
 var $7417=($7416|0)>1;
 if($7417){label=1500;break;}else{label=1501;break;}
 case 1500: 
 $1=-12;
 label=1658;break;
 case 1501: 
 label=1502;break;
 case 1502: 
 label=1508;break;
 case 1503: 
 var $7422=$2;
 var $7423=HEAP8[($7422)];
 var $7424=($7423&255);
 if(($7424|0)==9|($7424|0)==32|($7424|0)==160){ label=1505;break;}else{label=1504;break;}
 case 1504: 
 var $7426=$2;
 var $7427=(($7426+1)|0);
 $2=$7427;
 label=1506;break;
 case 1505: 
 label=1509;break;
 case 1506: 
 label=1507;break;
 case 1507: 
 var $7431=$i;
 var $7432=((($7431)+(1))|0);
 $i=$7432;
 label=1495;break;
 case 1508: 
 label=1509;break;
 case 1509: 
 label=1643;break;
 case 1510: 
 var $7436=$min;
 $i=$7436;
 label=1511;break;
 case 1511: 
 var $7438=$i;
 var $7439=$max;
 var $7440=($7438|0)<($7439|0);
 if($7440){label=1512;break;}else{label=1524;break;}
 case 1512: 
 var $7442=$2;
 var $7443=$6;
 var $7444=(($7443+120)|0);
 var $7445=HEAP32[(($7444)>>2)];
 var $7446=($7442>>>0)>=($7445>>>0);
 if($7446){label=1513;break;}else{label=1519;break;}
 case 1513: 
 var $7448=$6;
 var $7449=(($7448+136)|0);
 var $7450=HEAP32[(($7449)>>2)];
 var $7451=($7450|0)!=0;
 if($7451){label=1514;break;}else{label=1518;break;}
 case 1514: 
 var $7453=$2;
 var $7454=$6;
 var $7455=(($7454+132)|0);
 var $7456=HEAP32[(($7455)>>2)];
 var $7457=($7453>>>0)>($7456>>>0);
 if($7457){label=1515;break;}else{label=1518;break;}
 case 1515: 
 var $7459=$6;
 var $7460=(($7459+100)|0);
 HEAP32[(($7460)>>2)]=1;
 var $7461=$6;
 var $7462=(($7461+136)|0);
 var $7463=HEAP32[(($7462)>>2)];
 var $7464=($7463|0)>1;
 if($7464){label=1516;break;}else{label=1517;break;}
 case 1516: 
 $1=-12;
 label=1658;break;
 case 1517: 
 label=1518;break;
 case 1518: 
 label=1524;break;
 case 1519: 
 var $7469=$2;
 var $7470=HEAP8[($7469)];
 var $7471=($7470&255);
 if(($7471|0)==9|($7471|0)==32|($7471|0)==160){ label=1521;break;}else{label=1520;break;}
 case 1520: 
 label=1525;break;
 case 1521: 
 var $7474=$2;
 var $7475=(($7474+1)|0);
 $2=$7475;
 label=1522;break;
 case 1522: 
 label=1523;break;
 case 1523: 
 var $7478=$i;
 var $7479=((($7478)+(1))|0);
 $i=$7479;
 label=1511;break;
 case 1524: 
 label=1525;break;
 case 1525: 
 label=1643;break;
 case 1526: 
 var $7483=$min;
 $i=$7483;
 label=1527;break;
 case 1527: 
 var $7485=$i;
 var $7486=$max;
 var $7487=($7485|0)<($7486|0);
 if($7487){label=1528;break;}else{label=1540;break;}
 case 1528: 
 var $7489=$2;
 var $7490=$6;
 var $7491=(($7490+120)|0);
 var $7492=HEAP32[(($7491)>>2)];
 var $7493=($7489>>>0)>=($7492>>>0);
 if($7493){label=1529;break;}else{label=1535;break;}
 case 1529: 
 var $7495=$6;
 var $7496=(($7495+136)|0);
 var $7497=HEAP32[(($7496)>>2)];
 var $7498=($7497|0)!=0;
 if($7498){label=1530;break;}else{label=1534;break;}
 case 1530: 
 var $7500=$2;
 var $7501=$6;
 var $7502=(($7501+132)|0);
 var $7503=HEAP32[(($7502)>>2)];
 var $7504=($7500>>>0)>($7503>>>0);
 if($7504){label=1531;break;}else{label=1534;break;}
 case 1531: 
 var $7506=$6;
 var $7507=(($7506+100)|0);
 HEAP32[(($7507)>>2)]=1;
 var $7508=$6;
 var $7509=(($7508+136)|0);
 var $7510=HEAP32[(($7509)>>2)];
 var $7511=($7510|0)>1;
 if($7511){label=1532;break;}else{label=1533;break;}
 case 1532: 
 $1=-12;
 label=1658;break;
 case 1533: 
 label=1534;break;
 case 1534: 
 label=1540;break;
 case 1535: 
 var $7516=$2;
 var $7517=HEAP8[($7516)];
 var $7518=($7517&255);
 switch(($7518|0)){case 10:case 11:case 12:case 13:case 133:{ label=1537;break;}default:{label=1536;break;}}break;
 case 1536: 
 var $7520=$2;
 var $7521=(($7520+1)|0);
 $2=$7521;
 label=1538;break;
 case 1537: 
 label=1541;break;
 case 1538: 
 label=1539;break;
 case 1539: 
 var $7525=$i;
 var $7526=((($7525)+(1))|0);
 $i=$7526;
 label=1527;break;
 case 1540: 
 label=1541;break;
 case 1541: 
 label=1643;break;
 case 1542: 
 var $7530=$min;
 $i=$7530;
 label=1543;break;
 case 1543: 
 var $7532=$i;
 var $7533=$max;
 var $7534=($7532|0)<($7533|0);
 if($7534){label=1544;break;}else{label=1556;break;}
 case 1544: 
 var $7536=$2;
 var $7537=$6;
 var $7538=(($7537+120)|0);
 var $7539=HEAP32[(($7538)>>2)];
 var $7540=($7536>>>0)>=($7539>>>0);
 if($7540){label=1545;break;}else{label=1551;break;}
 case 1545: 
 var $7542=$6;
 var $7543=(($7542+136)|0);
 var $7544=HEAP32[(($7543)>>2)];
 var $7545=($7544|0)!=0;
 if($7545){label=1546;break;}else{label=1550;break;}
 case 1546: 
 var $7547=$2;
 var $7548=$6;
 var $7549=(($7548+132)|0);
 var $7550=HEAP32[(($7549)>>2)];
 var $7551=($7547>>>0)>($7550>>>0);
 if($7551){label=1547;break;}else{label=1550;break;}
 case 1547: 
 var $7553=$6;
 var $7554=(($7553+100)|0);
 HEAP32[(($7554)>>2)]=1;
 var $7555=$6;
 var $7556=(($7555+136)|0);
 var $7557=HEAP32[(($7556)>>2)];
 var $7558=($7557|0)>1;
 if($7558){label=1548;break;}else{label=1549;break;}
 case 1548: 
 $1=-12;
 label=1658;break;
 case 1549: 
 label=1550;break;
 case 1550: 
 label=1556;break;
 case 1551: 
 var $7563=$2;
 var $7564=HEAP8[($7563)];
 var $7565=($7564&255);
 switch(($7565|0)){case 10:case 11:case 12:case 13:case 133:{ label=1553;break;}default:{label=1552;break;}}break;
 case 1552: 
 label=1557;break;
 case 1553: 
 var $7568=$2;
 var $7569=(($7568+1)|0);
 $2=$7569;
 label=1554;break;
 case 1554: 
 label=1555;break;
 case 1555: 
 var $7572=$i;
 var $7573=((($7572)+(1))|0);
 $i=$7573;
 label=1543;break;
 case 1556: 
 label=1557;break;
 case 1557: 
 label=1643;break;
 case 1558: 
 var $7577=$min;
 $i=$7577;
 label=1559;break;
 case 1559: 
 var $7579=$i;
 var $7580=$max;
 var $7581=($7579|0)<($7580|0);
 if($7581){label=1560;break;}else{label=1571;break;}
 case 1560: 
 var $7583=$2;
 var $7584=$6;
 var $7585=(($7584+120)|0);
 var $7586=HEAP32[(($7585)>>2)];
 var $7587=($7583>>>0)>=($7586>>>0);
 if($7587){label=1561;break;}else{label=1567;break;}
 case 1561: 
 var $7589=$6;
 var $7590=(($7589+136)|0);
 var $7591=HEAP32[(($7590)>>2)];
 var $7592=($7591|0)!=0;
 if($7592){label=1562;break;}else{label=1566;break;}
 case 1562: 
 var $7594=$2;
 var $7595=$6;
 var $7596=(($7595+132)|0);
 var $7597=HEAP32[(($7596)>>2)];
 var $7598=($7594>>>0)>($7597>>>0);
 if($7598){label=1563;break;}else{label=1566;break;}
 case 1563: 
 var $7600=$6;
 var $7601=(($7600+100)|0);
 HEAP32[(($7601)>>2)]=1;
 var $7602=$6;
 var $7603=(($7602+136)|0);
 var $7604=HEAP32[(($7603)>>2)];
 var $7605=($7604|0)>1;
 if($7605){label=1564;break;}else{label=1565;break;}
 case 1564: 
 $1=-12;
 label=1658;break;
 case 1565: 
 label=1566;break;
 case 1566: 
 label=1571;break;
 case 1567: 
 var $7610=$2;
 var $7611=HEAP8[($7610)];
 var $7612=($7611&255);
 var $7613=$6;
 var $7614=(($7613+64)|0);
 var $7615=HEAP32[(($7614)>>2)];
 var $7616=(($7615+$7612)|0);
 var $7617=HEAP8[($7616)];
 var $7618=($7617&255);
 var $7619=$7618&4;
 var $7620=($7619|0)!=0;
 if($7620){label=1568;break;}else{label=1569;break;}
 case 1568: 
 label=1571;break;
 case 1569: 
 var $7623=$2;
 var $7624=(($7623+1)|0);
 $2=$7624;
 label=1570;break;
 case 1570: 
 var $7626=$i;
 var $7627=((($7626)+(1))|0);
 $i=$7627;
 label=1559;break;
 case 1571: 
 label=1643;break;
 case 1572: 
 var $7630=$min;
 $i=$7630;
 label=1573;break;
 case 1573: 
 var $7632=$i;
 var $7633=$max;
 var $7634=($7632|0)<($7633|0);
 if($7634){label=1574;break;}else{label=1585;break;}
 case 1574: 
 var $7636=$2;
 var $7637=$6;
 var $7638=(($7637+120)|0);
 var $7639=HEAP32[(($7638)>>2)];
 var $7640=($7636>>>0)>=($7639>>>0);
 if($7640){label=1575;break;}else{label=1581;break;}
 case 1575: 
 var $7642=$6;
 var $7643=(($7642+136)|0);
 var $7644=HEAP32[(($7643)>>2)];
 var $7645=($7644|0)!=0;
 if($7645){label=1576;break;}else{label=1580;break;}
 case 1576: 
 var $7647=$2;
 var $7648=$6;
 var $7649=(($7648+132)|0);
 var $7650=HEAP32[(($7649)>>2)];
 var $7651=($7647>>>0)>($7650>>>0);
 if($7651){label=1577;break;}else{label=1580;break;}
 case 1577: 
 var $7653=$6;
 var $7654=(($7653+100)|0);
 HEAP32[(($7654)>>2)]=1;
 var $7655=$6;
 var $7656=(($7655+136)|0);
 var $7657=HEAP32[(($7656)>>2)];
 var $7658=($7657|0)>1;
 if($7658){label=1578;break;}else{label=1579;break;}
 case 1578: 
 $1=-12;
 label=1658;break;
 case 1579: 
 label=1580;break;
 case 1580: 
 label=1585;break;
 case 1581: 
 var $7663=$2;
 var $7664=HEAP8[($7663)];
 var $7665=($7664&255);
 var $7666=$6;
 var $7667=(($7666+64)|0);
 var $7668=HEAP32[(($7667)>>2)];
 var $7669=(($7668+$7665)|0);
 var $7670=HEAP8[($7669)];
 var $7671=($7670&255);
 var $7672=$7671&4;
 var $7673=($7672|0)==0;
 if($7673){label=1582;break;}else{label=1583;break;}
 case 1582: 
 label=1585;break;
 case 1583: 
 var $7676=$2;
 var $7677=(($7676+1)|0);
 $2=$7677;
 label=1584;break;
 case 1584: 
 var $7679=$i;
 var $7680=((($7679)+(1))|0);
 $i=$7680;
 label=1573;break;
 case 1585: 
 label=1643;break;
 case 1586: 
 var $7683=$min;
 $i=$7683;
 label=1587;break;
 case 1587: 
 var $7685=$i;
 var $7686=$max;
 var $7687=($7685|0)<($7686|0);
 if($7687){label=1588;break;}else{label=1599;break;}
 case 1588: 
 var $7689=$2;
 var $7690=$6;
 var $7691=(($7690+120)|0);
 var $7692=HEAP32[(($7691)>>2)];
 var $7693=($7689>>>0)>=($7692>>>0);
 if($7693){label=1589;break;}else{label=1595;break;}
 case 1589: 
 var $7695=$6;
 var $7696=(($7695+136)|0);
 var $7697=HEAP32[(($7696)>>2)];
 var $7698=($7697|0)!=0;
 if($7698){label=1590;break;}else{label=1594;break;}
 case 1590: 
 var $7700=$2;
 var $7701=$6;
 var $7702=(($7701+132)|0);
 var $7703=HEAP32[(($7702)>>2)];
 var $7704=($7700>>>0)>($7703>>>0);
 if($7704){label=1591;break;}else{label=1594;break;}
 case 1591: 
 var $7706=$6;
 var $7707=(($7706+100)|0);
 HEAP32[(($7707)>>2)]=1;
 var $7708=$6;
 var $7709=(($7708+136)|0);
 var $7710=HEAP32[(($7709)>>2)];
 var $7711=($7710|0)>1;
 if($7711){label=1592;break;}else{label=1593;break;}
 case 1592: 
 $1=-12;
 label=1658;break;
 case 1593: 
 label=1594;break;
 case 1594: 
 label=1599;break;
 case 1595: 
 var $7716=$2;
 var $7717=HEAP8[($7716)];
 var $7718=($7717&255);
 var $7719=$6;
 var $7720=(($7719+64)|0);
 var $7721=HEAP32[(($7720)>>2)];
 var $7722=(($7721+$7718)|0);
 var $7723=HEAP8[($7722)];
 var $7724=($7723&255);
 var $7725=$7724&1;
 var $7726=($7725|0)!=0;
 if($7726){label=1596;break;}else{label=1597;break;}
 case 1596: 
 label=1599;break;
 case 1597: 
 var $7729=$2;
 var $7730=(($7729+1)|0);
 $2=$7730;
 label=1598;break;
 case 1598: 
 var $7732=$i;
 var $7733=((($7732)+(1))|0);
 $i=$7733;
 label=1587;break;
 case 1599: 
 label=1643;break;
 case 1600: 
 var $7736=$min;
 $i=$7736;
 label=1601;break;
 case 1601: 
 var $7738=$i;
 var $7739=$max;
 var $7740=($7738|0)<($7739|0);
 if($7740){label=1602;break;}else{label=1613;break;}
 case 1602: 
 var $7742=$2;
 var $7743=$6;
 var $7744=(($7743+120)|0);
 var $7745=HEAP32[(($7744)>>2)];
 var $7746=($7742>>>0)>=($7745>>>0);
 if($7746){label=1603;break;}else{label=1609;break;}
 case 1603: 
 var $7748=$6;
 var $7749=(($7748+136)|0);
 var $7750=HEAP32[(($7749)>>2)];
 var $7751=($7750|0)!=0;
 if($7751){label=1604;break;}else{label=1608;break;}
 case 1604: 
 var $7753=$2;
 var $7754=$6;
 var $7755=(($7754+132)|0);
 var $7756=HEAP32[(($7755)>>2)];
 var $7757=($7753>>>0)>($7756>>>0);
 if($7757){label=1605;break;}else{label=1608;break;}
 case 1605: 
 var $7759=$6;
 var $7760=(($7759+100)|0);
 HEAP32[(($7760)>>2)]=1;
 var $7761=$6;
 var $7762=(($7761+136)|0);
 var $7763=HEAP32[(($7762)>>2)];
 var $7764=($7763|0)>1;
 if($7764){label=1606;break;}else{label=1607;break;}
 case 1606: 
 $1=-12;
 label=1658;break;
 case 1607: 
 label=1608;break;
 case 1608: 
 label=1613;break;
 case 1609: 
 var $7769=$2;
 var $7770=HEAP8[($7769)];
 var $7771=($7770&255);
 var $7772=$6;
 var $7773=(($7772+64)|0);
 var $7774=HEAP32[(($7773)>>2)];
 var $7775=(($7774+$7771)|0);
 var $7776=HEAP8[($7775)];
 var $7777=($7776&255);
 var $7778=$7777&1;
 var $7779=($7778|0)==0;
 if($7779){label=1610;break;}else{label=1611;break;}
 case 1610: 
 label=1613;break;
 case 1611: 
 var $7782=$2;
 var $7783=(($7782+1)|0);
 $2=$7783;
 label=1612;break;
 case 1612: 
 var $7785=$i;
 var $7786=((($7785)+(1))|0);
 $i=$7786;
 label=1601;break;
 case 1613: 
 label=1643;break;
 case 1614: 
 var $7789=$min;
 $i=$7789;
 label=1615;break;
 case 1615: 
 var $7791=$i;
 var $7792=$max;
 var $7793=($7791|0)<($7792|0);
 if($7793){label=1616;break;}else{label=1627;break;}
 case 1616: 
 var $7795=$2;
 var $7796=$6;
 var $7797=(($7796+120)|0);
 var $7798=HEAP32[(($7797)>>2)];
 var $7799=($7795>>>0)>=($7798>>>0);
 if($7799){label=1617;break;}else{label=1623;break;}
 case 1617: 
 var $7801=$6;
 var $7802=(($7801+136)|0);
 var $7803=HEAP32[(($7802)>>2)];
 var $7804=($7803|0)!=0;
 if($7804){label=1618;break;}else{label=1622;break;}
 case 1618: 
 var $7806=$2;
 var $7807=$6;
 var $7808=(($7807+132)|0);
 var $7809=HEAP32[(($7808)>>2)];
 var $7810=($7806>>>0)>($7809>>>0);
 if($7810){label=1619;break;}else{label=1622;break;}
 case 1619: 
 var $7812=$6;
 var $7813=(($7812+100)|0);
 HEAP32[(($7813)>>2)]=1;
 var $7814=$6;
 var $7815=(($7814+136)|0);
 var $7816=HEAP32[(($7815)>>2)];
 var $7817=($7816|0)>1;
 if($7817){label=1620;break;}else{label=1621;break;}
 case 1620: 
 $1=-12;
 label=1658;break;
 case 1621: 
 label=1622;break;
 case 1622: 
 label=1627;break;
 case 1623: 
 var $7822=$2;
 var $7823=HEAP8[($7822)];
 var $7824=($7823&255);
 var $7825=$6;
 var $7826=(($7825+64)|0);
 var $7827=HEAP32[(($7826)>>2)];
 var $7828=(($7827+$7824)|0);
 var $7829=HEAP8[($7828)];
 var $7830=($7829&255);
 var $7831=$7830&16;
 var $7832=($7831|0)!=0;
 if($7832){label=1624;break;}else{label=1625;break;}
 case 1624: 
 label=1627;break;
 case 1625: 
 var $7835=$2;
 var $7836=(($7835+1)|0);
 $2=$7836;
 label=1626;break;
 case 1626: 
 var $7838=$i;
 var $7839=((($7838)+(1))|0);
 $i=$7839;
 label=1615;break;
 case 1627: 
 label=1643;break;
 case 1628: 
 var $7842=$min;
 $i=$7842;
 label=1629;break;
 case 1629: 
 var $7844=$i;
 var $7845=$max;
 var $7846=($7844|0)<($7845|0);
 if($7846){label=1630;break;}else{label=1641;break;}
 case 1630: 
 var $7848=$2;
 var $7849=$6;
 var $7850=(($7849+120)|0);
 var $7851=HEAP32[(($7850)>>2)];
 var $7852=($7848>>>0)>=($7851>>>0);
 if($7852){label=1631;break;}else{label=1637;break;}
 case 1631: 
 var $7854=$6;
 var $7855=(($7854+136)|0);
 var $7856=HEAP32[(($7855)>>2)];
 var $7857=($7856|0)!=0;
 if($7857){label=1632;break;}else{label=1636;break;}
 case 1632: 
 var $7859=$2;
 var $7860=$6;
 var $7861=(($7860+132)|0);
 var $7862=HEAP32[(($7861)>>2)];
 var $7863=($7859>>>0)>($7862>>>0);
 if($7863){label=1633;break;}else{label=1636;break;}
 case 1633: 
 var $7865=$6;
 var $7866=(($7865+100)|0);
 HEAP32[(($7866)>>2)]=1;
 var $7867=$6;
 var $7868=(($7867+136)|0);
 var $7869=HEAP32[(($7868)>>2)];
 var $7870=($7869|0)>1;
 if($7870){label=1634;break;}else{label=1635;break;}
 case 1634: 
 $1=-12;
 label=1658;break;
 case 1635: 
 label=1636;break;
 case 1636: 
 label=1641;break;
 case 1637: 
 var $7875=$2;
 var $7876=HEAP8[($7875)];
 var $7877=($7876&255);
 var $7878=$6;
 var $7879=(($7878+64)|0);
 var $7880=HEAP32[(($7879)>>2)];
 var $7881=(($7880+$7877)|0);
 var $7882=HEAP8[($7881)];
 var $7883=($7882&255);
 var $7884=$7883&16;
 var $7885=($7884|0)==0;
 if($7885){label=1638;break;}else{label=1639;break;}
 case 1638: 
 label=1641;break;
 case 1639: 
 var $7888=$2;
 var $7889=(($7888+1)|0);
 $2=$7889;
 label=1640;break;
 case 1640: 
 var $7891=$i;
 var $7892=((($7891)+(1))|0);
 $i=$7892;
 label=1629;break;
 case 1641: 
 label=1643;break;
 case 1642: 
 $1=-14;
 label=1658;break;
 case 1643: 
 var $7896=$possessive;
 var $7897=($7896|0)!=0;
 if($7897){label=1644;break;}else{label=1645;break;}
 case 1644: 
 label=16;break;
 case 1645: 
 label=1646;break;
 case 1646: 
 var $7901=$2;
 var $7902=$pp;
 var $7903=($7901|0)==($7902|0);
 if($7903){label=1647;break;}else{label=1648;break;}
 case 1647: 
 label=9;break;
 case 1648: 
 var $7906=$2;
 var $7907=$3;
 var $7908=$4;
 var $7909=$5;
 var $7910=$6;
 var $7911=$7;
 var $7912=HEAP32[(($8)>>2)];
 var $7913=((($7912)+(1))|0);
 var $7914=_match($7906,$7907,$7908,$7909,$7910,$7911,$7913);
 $rrc=$7914;
 var $7915=$rrc;
 var $7916=($7915|0)!=0;
 if($7916){label=1649;break;}else{label=1650;break;}
 case 1649: 
 var $7918=$rrc;
 $1=$7918;
 label=1658;break;
 case 1650: 
 var $7920=$2;
 var $7921=((($7920)-(1))|0);
 $2=$7921;
 var $7922=$ctype;
 var $7923=($7922|0)==17;
 if($7923){label=1651;break;}else{label=1655;break;}
 case 1651: 
 var $7925=$2;
 var $7926=$pp;
 var $7927=($7925>>>0)>($7926>>>0);
 if($7927){label=1652;break;}else{label=1655;break;}
 case 1652: 
 var $7929=$2;
 var $7930=HEAP8[($7929)];
 var $7931=($7930&255);
 var $7932=($7931|0)==10;
 if($7932){label=1653;break;}else{label=1655;break;}
 case 1653: 
 var $7934=$2;
 var $7935=((($7934)-(1))|0);
 var $7936=HEAP8[($7935)];
 var $7937=($7936&255);
 var $7938=($7937|0)==13;
 if($7938){label=1654;break;}else{label=1655;break;}
 case 1654: 
 var $7940=$2;
 var $7941=((($7940)-(1))|0);
 $2=$7941;
 label=1655;break;
 case 1655: 
 label=1646;break;
 case 1656: 
 $1=-5;
 label=1658;break;
 case 1657: 
 label=16;break;
 case 1658: 
 var $7946=$1;
 STACKTOP=sp;return $7946;
  default: assert(0, "bad label: " + label);
 }
}
function _match_ref($offset,$eptr,$length,$md,$caseless){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $eptr_start;
 var $p;
 var $cc;
 var $cp;
 $2=$offset;
 $3=$eptr;
 $4=$length;
 $5=$md;
 $6=$caseless;
 var $7=$3;
 $eptr_start=$7;
 var $8=$5;
 var $9=(($8+116)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$2;
 var $12=$5;
 var $13=(($12+12)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+($11<<2))|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($10+$16)|0);
 $p=$17;
 var $18=$4;
 var $19=($18|0)<0;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 $1=-1;
 label=21;break;
 case 3: 
 var $22=$6;
 var $23=($22|0)!=0;
 if($23){label=4;break;}else{label=12;break;}
 case 4: 
 label=5;break;
 case 5: 
 var $26=$4;
 var $27=((($26)-(1))|0);
 $4=$27;
 var $28=($26|0)>0;
 if($28){label=6;break;}else{label=11;break;}
 case 6: 
 var $30=$3;
 var $31=$5;
 var $32=(($31+120)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($30>>>0)>=($33>>>0);
 if($34){label=7;break;}else{label=8;break;}
 case 7: 
 $1=-2;
 label=21;break;
 case 8: 
 var $37=$3;
 var $38=HEAP8[($37)];
 var $39=($38&255);
 $cc=$39;
 var $40=$p;
 var $41=HEAP8[($40)];
 var $42=($41&255);
 $cp=$42;
 var $43=$cp;
 var $44=$5;
 var $45=(($44+56)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+$43)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=$cc;
 var $51=$5;
 var $52=(($51+56)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+$50)|0);
 var $55=HEAP8[($54)];
 var $56=($55&255);
 var $57=($49|0)!=($56|0);
 if($57){label=9;break;}else{label=10;break;}
 case 9: 
 $1=-1;
 label=21;break;
 case 10: 
 var $60=$p;
 var $61=(($60+1)|0);
 $p=$61;
 var $62=$3;
 var $63=(($62+1)|0);
 $3=$63;
 label=5;break;
 case 11: 
 label=20;break;
 case 12: 
 label=13;break;
 case 13: 
 var $67=$4;
 var $68=((($67)-(1))|0);
 $4=$68;
 var $69=($67|0)>0;
 if($69){label=14;break;}else{label=19;break;}
 case 14: 
 var $71=$3;
 var $72=$5;
 var $73=(($72+120)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($71>>>0)>=($74>>>0);
 if($75){label=15;break;}else{label=16;break;}
 case 15: 
 $1=-2;
 label=21;break;
 case 16: 
 var $78=$p;
 var $79=(($78+1)|0);
 $p=$79;
 var $80=HEAP8[($78)];
 var $81=($80&255);
 var $82=$3;
 var $83=(($82+1)|0);
 $3=$83;
 var $84=HEAP8[($82)];
 var $85=($84&255);
 var $86=($81|0)!=($85|0);
 if($86){label=17;break;}else{label=18;break;}
 case 17: 
 $1=-1;
 label=21;break;
 case 18: 
 label=13;break;
 case 19: 
 label=20;break;
 case 20: 
 var $91=$3;
 var $92=$eptr_start;
 var $93=$91;
 var $94=$92;
 var $95=((($93)-($94))|0);
 $1=$95;
 label=21;break;
 case 21: 
 var $97=$1;
 STACKTOP=sp;return $97;
  default: assert(0, "bad label: " + label);
 }
}
function _pcre_get_substring($subject,$ovector,$stringcount,$stringnumber,$stringptr){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $yield;
 var $substring;
 $2=$subject;
 $3=$ovector;
 $4=$stringcount;
 $5=$stringnumber;
 $6=$stringptr;
 var $7=$5;
 var $8=($7|0)<0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=$5;
 var $11=$4;
 var $12=($10|0)>=($11|0);
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-7;
 label=7;break;
 case 4: 
 var $15=$5;
 var $16=($15<<1);
 $5=$16;
 var $17=$5;
 var $18=((($17)+(1))|0);
 var $19=$3;
 var $20=(($19+($18<<2))|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=$5;
 var $23=$3;
 var $24=(($23+($22<<2))|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=((($21)-($25))|0);
 $yield=$26;
 var $27=HEAP32[((504)>>2)];
 var $28=$yield;
 var $29=((($28)+(1))|0);
 var $30=FUNCTION_TABLE[$27]($29);
 $substring=$30;
 var $31=$substring;
 var $32=($31|0)==0;
 if($32){label=5;break;}else{label=6;break;}
 case 5: 
 $1=-6;
 label=7;break;
 case 6: 
 var $35=$substring;
 var $36=$2;
 var $37=$5;
 var $38=$3;
 var $39=(($38+($37<<2))|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($36+$40)|0);
 var $42=$yield;
 assert($42 % 1 === 0);(_memcpy($35, $41, $42)|0);
 var $43=$yield;
 var $44=$substring;
 var $45=(($44+$43)|0);
 HEAP8[($45)]=0;
 var $46=$substring;
 var $47=$6;
 HEAP32[(($47)>>2)]=$46;
 var $48=$yield;
 $1=$48;
 label=7;break;
 case 7: 
 var $50=$1;
 STACKTOP=sp;return $50;
  default: assert(0, "bad label: " + label);
 }
}
function __pcre_is_newline($ptr,$type,$endptr,$lenptr,$utf){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $c;
 $2=$ptr;
 $3=$type;
 $4=$endptr;
 $5=$lenptr;
 $6=$utf;
 var $7=$6;
 var $8=$2;
 var $9=HEAP8[($8)];
 var $10=($9&255);
 $c=$10;
 var $11=$3;
 var $12=($11|0)==2;
 if($12){label=2;break;}else{label=8;break;}
 case 2: 
 var $14=$c;
 if(($14|0)==10){ label=3;break;}else if(($14|0)==13){ label=4;break;}else{label=7;break;}
 case 3: 
 var $16=$5;
 HEAP32[(($16)>>2)]=1;
 $1=1;
 label=16;break;
 case 4: 
 var $18=$2;
 var $19=$4;
 var $20=((($19)-(1))|0);
 var $21=($18>>>0)<($20>>>0);
 if($21){label=5;break;}else{var $29=0;label=6;break;}
 case 5: 
 var $23=$2;
 var $24=(($23+1)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255);
 var $27=($26|0)==10;
 var $29=$27;label=6;break;
 case 6: 
 var $29;
 var $30=($29?2:1);
 var $31=$5;
 HEAP32[(($31)>>2)]=$30;
 $1=1;
 label=16;break;
 case 7: 
 $1=0;
 label=16;break;
 case 8: 
 var $34=$c;
 if(($34|0)==13){ label=10;break;}else if(($34|0)==133){ label=13;break;}else if(($34|0)==8232|($34|0)==8233){ label=14;break;}else if(($34|0)==10|($34|0)==11|($34|0)==12){ label=9;break;}else{label=15;break;}
 case 9: 
 var $36=$5;
 HEAP32[(($36)>>2)]=1;
 $1=1;
 label=16;break;
 case 10: 
 var $38=$2;
 var $39=$4;
 var $40=((($39)-(1))|0);
 var $41=($38>>>0)<($40>>>0);
 if($41){label=11;break;}else{var $49=0;label=12;break;}
 case 11: 
 var $43=$2;
 var $44=(($43+1)|0);
 var $45=HEAP8[($44)];
 var $46=($45&255);
 var $47=($46|0)==10;
 var $49=$47;label=12;break;
 case 12: 
 var $49;
 var $50=($49?2:1);
 var $51=$5;
 HEAP32[(($51)>>2)]=$50;
 $1=1;
 label=16;break;
 case 13: 
 var $53=$6;
 var $54=($53|0)!=0;
 var $55=($54?2:1);
 var $56=$5;
 HEAP32[(($56)>>2)]=$55;
 $1=1;
 label=16;break;
 case 14: 
 var $58=$5;
 HEAP32[(($58)>>2)]=3;
 $1=1;
 label=16;break;
 case 15: 
 $1=0;
 label=16;break;
 case 16: 
 var $61=$1;
 STACKTOP=sp;return $61;
  default: assert(0, "bad label: " + label);
 }
}
function __pcre_was_newline($ptr,$type,$startptr,$lenptr,$utf){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $c;
 $2=$ptr;
 $3=$type;
 $4=$startptr;
 $5=$lenptr;
 $6=$utf;
 var $7=$6;
 var $8=$2;
 var $9=((($8)-(1))|0);
 $2=$9;
 var $10=$2;
 var $11=HEAP8[($10)];
 var $12=($11&255);
 $c=$12;
 var $13=$3;
 var $14=($13|0)==2;
 if($14){label=2;break;}else{label=8;break;}
 case 2: 
 var $16=$c;
 if(($16|0)==10){ label=3;break;}else if(($16|0)==13){ label=6;break;}else{label=7;break;}
 case 3: 
 var $18=$2;
 var $19=$4;
 var $20=($18>>>0)>($19>>>0);
 if($20){label=4;break;}else{var $28=0;label=5;break;}
 case 4: 
 var $22=$2;
 var $23=((($22)-(1))|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=($25|0)==13;
 var $28=$26;label=5;break;
 case 5: 
 var $28;
 var $29=($28?2:1);
 var $30=$5;
 HEAP32[(($30)>>2)]=$29;
 $1=1;
 label=16;break;
 case 6: 
 var $32=$5;
 HEAP32[(($32)>>2)]=1;
 $1=1;
 label=16;break;
 case 7: 
 $1=0;
 label=16;break;
 case 8: 
 var $35=$c;
 if(($35|0)==11|($35|0)==12|($35|0)==13){ label=12;break;}else if(($35|0)==133){ label=13;break;}else if(($35|0)==8232|($35|0)==8233){ label=14;break;}else if(($35|0)==10){ label=9;break;}else{label=15;break;}
 case 9: 
 var $37=$2;
 var $38=$4;
 var $39=($37>>>0)>($38>>>0);
 if($39){label=10;break;}else{var $47=0;label=11;break;}
 case 10: 
 var $41=$2;
 var $42=((($41)-(1))|0);
 var $43=HEAP8[($42)];
 var $44=($43&255);
 var $45=($44|0)==13;
 var $47=$45;label=11;break;
 case 11: 
 var $47;
 var $48=($47?2:1);
 var $49=$5;
 HEAP32[(($49)>>2)]=$48;
 $1=1;
 label=16;break;
 case 12: 
 var $51=$5;
 HEAP32[(($51)>>2)]=1;
 $1=1;
 label=16;break;
 case 13: 
 var $53=$6;
 var $54=($53|0)!=0;
 var $55=($54?2:1);
 var $56=$5;
 HEAP32[(($56)>>2)]=$55;
 $1=1;
 label=16;break;
 case 14: 
 var $58=$5;
 HEAP32[(($58)>>2)]=3;
 $1=1;
 label=16;break;
 case 15: 
 $1=0;
 label=16;break;
 case 16: 
 var $61=$1;
 STACKTOP=sp;return $61;
  default: assert(0, "bad label: " + label);
 }
}
function _pcre_study($external_re,$options,$errorptr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+176)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $min;
 var $bits_set;
 var $start_bits=sp;
 var $extra;
 var $study;
 var $tables=(sp)+(32);
 var $code;
 var $compile_block=(sp)+(40);
 var $re;
 var $rc;
 $2=$external_re;
 $3=$options;
 $4=$errorptr;
 $bits_set=0;
 $extra=0;
 var $5=$2;
 var $6=$5;
 $re=$6;
 var $7=$4;
 HEAP32[(($7)>>2)]=0;
 var $8=$re;
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=$re;
 var $12=(($11)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)!=1346589253;
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=$4;
 HEAP32[(($16)>>2)]=5048;
 $1=0;
 label=32;break;
 case 4: 
 var $18=$re;
 var $19=(($18+12)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20&1;
 var $22=($21|0)==0;
 if($22){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=$4;
 HEAP32[(($24)>>2)]=5328;
 $1=0;
 label=32;break;
 case 6: 
 var $26=$3;
 var $27=$26&-16;
 var $28=($27|0)!=0;
 if($28){label=7;break;}else{label=8;break;}
 case 7: 
 var $30=$4;
 HEAP32[(($30)>>2)]=5200;
 $1=0;
 label=32;break;
 case 8: 
 var $32=$re;
 var $33=$32;
 var $34=$re;
 var $35=(($34+34)|0);
 var $36=HEAP16[(($35)>>1)];
 var $37=($36&65535);
 var $38=(($33+$37)|0);
 var $39=$re;
 var $40=(($39+38)|0);
 var $41=HEAP16[(($40)>>1)];
 var $42=($41&65535);
 var $43=$re;
 var $44=(($43+36)|0);
 var $45=HEAP16[(($44)>>1)];
 var $46=($45&65535);
 var $47=(Math_imul($42,$46)|0);
 var $48=(($38+$47)|0);
 $code=$48;
 var $49=$re;
 var $50=(($49+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51&16;
 var $53=($52|0)==0;
 if($53){label=9;break;}else{label=15;break;}
 case 9: 
 var $55=$re;
 var $56=(($55+12)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57&272;
 var $59=($58|0)==0;
 if($59){label=10;break;}else{label=15;break;}
 case 10: 
 var $61=$re;
 var $62=(($61+48)|0);
 var $63=HEAP32[(($62)>>2)];
 HEAP32[(($tables)>>2)]=$63;
 var $64=HEAP32[(($tables)>>2)];
 var $65=($64|0)==0;
 if($65){label=11;break;}else{label=12;break;}
 case 11: 
 var $67=$2;
 var $68=$tables;
 var $69=_pcre_fullinfo($67,0,11,$68);
 label=12;break;
 case 12: 
 var $71=HEAP32[(($tables)>>2)];
 var $72=(($71)|0);
 var $73=(($compile_block)|0);
 HEAP32[(($73)>>2)]=$72;
 var $74=HEAP32[(($tables)>>2)];
 var $75=(($74+256)|0);
 var $76=(($compile_block+4)|0);
 HEAP32[(($76)>>2)]=$75;
 var $77=HEAP32[(($tables)>>2)];
 var $78=(($77+512)|0);
 var $79=(($compile_block+8)|0);
 HEAP32[(($79)>>2)]=$78;
 var $80=HEAP32[(($tables)>>2)];
 var $81=(($80+832)|0);
 var $82=(($compile_block+12)|0);
 HEAP32[(($82)>>2)]=$81;
 var $83=$start_bits;
 _memset($83, 0, 32)|0;
 var $84=$code;
 var $85=(($start_bits)|0);
 var $86=$re;
 var $87=(($86+8)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=$88&2048;
 var $90=($89|0)!=0;
 var $91=($90&1);
 var $92=_set_start_bits($84,$85,$91,$compile_block);
 $rc=$92;
 var $93=$rc;
 var $94=($93|0)==1;
 var $95=($94&1);
 $bits_set=$95;
 var $96=$rc;
 var $97=($96|0)==3;
 if($97){label=13;break;}else{label=14;break;}
 case 13: 
 var $99=$4;
 HEAP32[(($99)>>2)]=5096;
 $1=0;
 label=32;break;
 case 14: 
 label=15;break;
 case 15: 
 var $102=$re;
 var $103=$code;
 var $104=$code;
 var $105=$re;
 var $106=(($105+8)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=_find_minlength($102,$103,$104,$107,0);
 $min=$108;
 if(($108|0)==-2){ label=16;break;}else if(($108|0)==-3){ label=17;break;}else{label=18;break;}
 case 16: 
 var $110=$4;
 HEAP32[(($110)>>2)]=4960;
 $1=0;
 label=32;break;
 case 17: 
 var $112=$4;
 HEAP32[(($112)>>2)]=5096;
 $1=0;
 label=32;break;
 case 18: 
 label=19;break;
 case 19: 
 var $115=$bits_set;
 var $116=($115|0)!=0;
 if($116){label=22;break;}else{label=20;break;}
 case 20: 
 var $118=$min;
 var $119=($118|0)>0;
 if($119){label=22;break;}else{label=21;break;}
 case 21: 
 var $121=$3;
 var $122=$121&8;
 var $123=($122|0)!=0;
 if($123){label=22;break;}else{label=31;break;}
 case 22: 
 var $125=HEAP32[((504)>>2)];
 var $126=FUNCTION_TABLE[$125](76);
 var $127=$126;
 $extra=$127;
 var $128=$extra;
 var $129=($128|0)==0;
 if($129){label=23;break;}else{label=24;break;}
 case 23: 
 var $131=$4;
 HEAP32[(($131)>>2)]=4888;
 $1=0;
 label=32;break;
 case 24: 
 var $133=$extra;
 var $134=$133;
 var $135=(($134+32)|0);
 var $136=$135;
 $study=$136;
 var $137=$extra;
 var $138=(($137)|0);
 HEAP32[(($138)>>2)]=1;
 var $139=$study;
 var $140=$139;
 var $141=$extra;
 var $142=(($141+4)|0);
 HEAP32[(($142)>>2)]=$140;
 var $143=$study;
 var $144=(($143)|0);
 HEAP32[(($144)>>2)]=44;
 var $145=$study;
 var $146=(($145+4)|0);
 HEAP32[(($146)>>2)]=0;
 var $147=$bits_set;
 var $148=($147|0)!=0;
 if($148){label=25;break;}else{label=26;break;}
 case 25: 
 var $150=$study;
 var $151=(($150+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$152|1;
 HEAP32[(($151)>>2)]=$153;
 var $154=$study;
 var $155=(($154+8)|0);
 var $156=$155;
 var $157=$start_bits;
 assert(32 % 1 === 0);(_memcpy($156, $157, 32)|0);
 label=27;break;
 case 26: 
 var $159=$study;
 var $160=(($159+8)|0);
 var $161=$160;
 _memset($161, 0, 32)|0;
 label=27;break;
 case 27: 
 var $163=$min;
 var $164=($163|0)>0;
 if($164){label=28;break;}else{label=29;break;}
 case 28: 
 var $166=$study;
 var $167=(($166+4)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=$168|2;
 HEAP32[(($167)>>2)]=$169;
 var $170=$min;
 var $171=$study;
 var $172=(($171+40)|0);
 HEAP32[(($172)>>2)]=$170;
 label=30;break;
 case 29: 
 var $174=$study;
 var $175=(($174+40)|0);
 HEAP32[(($175)>>2)]=0;
 label=30;break;
 case 30: 
 label=31;break;
 case 31: 
 var $178=$extra;
 $1=$178;
 label=32;break;
 case 32: 
 var $180=$1;
 STACKTOP=sp;return $180;
  default: assert(0, "bad label: " + label);
 }
}
function _set_start_bits($code,$start_bits,$utf,$cd){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $c;
 var $yield;
 var $table_limit;
 var $try_next;
 var $tcode;
 var $rc;
 var $map;
 $2=$code;
 $3=$start_bits;
 $4=$utf;
 $5=$cd;
 $yield=1;
 $table_limit=32;
 label=2;break;
 case 2: 
 $try_next=1;
 var $7=$2;
 var $8=(($7+1)|0);
 var $9=(($8+2)|0);
 $tcode=$9;
 var $10=$2;
 var $11=HEAP8[($10)];
 var $12=($11&255);
 var $13=($12|0)==133;
 if($13){label=6;break;}else{label=3;break;}
 case 3: 
 var $15=$2;
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=($17|0)==138;
 if($18){label=6;break;}else{label=4;break;}
 case 4: 
 var $20=$2;
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=($22|0)==134;
 if($23){label=6;break;}else{label=5;break;}
 case 5: 
 var $25=$2;
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=($27|0)==139;
 if($28){label=6;break;}else{label=7;break;}
 case 6: 
 var $30=$tcode;
 var $31=(($30+2)|0);
 $tcode=$31;
 label=7;break;
 case 7: 
 label=8;break;
 case 8: 
 var $34=$try_next;
 var $35=($34|0)!=0;
 if($35){label=9;break;}else{label=85;break;}
 case 9: 
 var $37=$tcode;
 var $38=HEAP8[($37)];
 var $39=($38&255);
 switch(($39|0)){case 158:case 159:case 13:case 12:case 14:case 27:case 28:case 160:case 156:case 135:case 141:case 145:case 142:case 115:case 116:case 144:case 25:case 26:case 0:case 24:case 23:case 22:case 157:case 149:case 31:case 67:case 80:case 32:case 62:case 75:case 64:case 77:case 60:case 73:case 66:case 79:case 61:case 74:case 69:case 82:case 70:case 83:case 68:case 81:case 71:case 84:case 15:case 63:case 76:case 59:case 72:case 65:case 78:case 18:case 20:case 16:case 150:case 151:case 117:case 113:case 114:case 124:case 143:case 140:case 3:case 152:case 153:case 1:case 2:case 154:case 155:{ label=11;break;}case 5:case 4:{ label=12;break;}case 131:case 136:case 133:case 138:case 132:case 137:case 134:case 139:case 129:case 130:case 125:{ label=13;break;}case 119:{ label=23;break;}case 120:case 121:case 122:case 123:{ label=24;break;}case 118:{ label=25;break;}case 126:case 127:case 128:{ label=26;break;}case 146:case 147:case 148:{ label=30;break;}case 161:{ label=37;break;}case 33:case 34:case 42:case 37:case 38:case 44:{ label=41;break;}case 46:case 47:case 55:case 50:case 51:case 57:{ label=42;break;}case 39:case 40:case 45:{ label=43;break;}case 52:case 53:case 58:{ label=44;break;}case 41:{ label=45;break;}case 29:case 35:case 36:case 43:{ label=46;break;}case 54:{ label=47;break;}case 30:case 48:case 49:case 56:{ label=48;break;}case 19:{ label=49;break;}case 17:case 21:{ label=50;break;}case 6:{ label=51;break;}case 7:{ label=52;break;}case 8:{ label=53;break;}case 9:{ label=54;break;}case 10:{ label=55;break;}case 11:{ label=56;break;}case 87:case 88:case 95:{ label=57;break;}case 93:{ label=58;break;}case 91:case 92:case 97:{ label=59;break;}case 85:case 86:case 94:case 89:case 90:case 96:{ label=60;break;}case 111:case 110:{ label=72;break;}default:{label=10;break;}}break;
 case 10: 
 $1=3;
 label=88;break;
 case 11: 
 $1=0;
 label=88;break;
 case 12: 
 var $43=$tcode;
 var $44=(($43+1)|0);
 $tcode=$44;
 label=84;break;
 case 13: 
 var $46=$tcode;
 var $47=$3;
 var $48=$4;
 var $49=$5;
 var $50=_set_start_bits($46,$47,$48,$49);
 $rc=$50;
 var $51=$rc;
 var $52=($51|0)==0;
 if($52){label=15;break;}else{label=14;break;}
 case 14: 
 var $54=$rc;
 var $55=($54|0)==3;
 if($55){label=15;break;}else{label=16;break;}
 case 15: 
 var $57=$rc;
 $1=$57;
 label=88;break;
 case 16: 
 var $59=$rc;
 var $60=($59|0)==1;
 if($60){label=17;break;}else{label=18;break;}
 case 17: 
 $try_next=0;
 label=22;break;
 case 18: 
 label=19;break;
 case 19: 
 var $64=$tcode;
 var $65=(($64+1)|0);
 var $66=HEAP8[($65)];
 var $67=($66&255);
 var $68=$67<<8;
 var $69=$tcode;
 var $70=(($69+2)|0);
 var $71=HEAP8[($70)];
 var $72=($71&255);
 var $73=$68|$72;
 var $74=$tcode;
 var $75=(($74+$73)|0);
 $tcode=$75;
 label=20;break;
 case 20: 
 var $77=$tcode;
 var $78=HEAP8[($77)];
 var $79=($78&255);
 var $80=($79|0)==119;
 if($80){label=19;break;}else{label=21;break;}
 case 21: 
 var $82=$tcode;
 var $83=(($82+3)|0);
 $tcode=$83;
 label=22;break;
 case 22: 
 label=84;break;
 case 23: 
 $yield=2;
 $try_next=0;
 label=84;break;
 case 24: 
 $1=2;
 label=88;break;
 case 25: 
 var $88=$tcode;
 var $89=(($88+6)|0);
 $tcode=$89;
 label=84;break;
 case 26: 
 label=27;break;
 case 27: 
 var $92=$tcode;
 var $93=(($92+1)|0);
 var $94=HEAP8[($93)];
 var $95=($94&255);
 var $96=$95<<8;
 var $97=$tcode;
 var $98=(($97+2)|0);
 var $99=HEAP8[($98)];
 var $100=($99&255);
 var $101=$96|$100;
 var $102=$tcode;
 var $103=(($102+$101)|0);
 $tcode=$103;
 label=28;break;
 case 28: 
 var $105=$tcode;
 var $106=HEAP8[($105)];
 var $107=($106&255);
 var $108=($107|0)==119;
 if($108){label=27;break;}else{label=29;break;}
 case 29: 
 var $110=$tcode;
 var $111=(($110+3)|0);
 $tcode=$111;
 label=84;break;
 case 30: 
 var $113=$tcode;
 var $114=(($113+1)|0);
 $tcode=$114;
 var $115=$3;
 var $116=$4;
 var $117=$5;
 var $118=_set_start_bits($114,$115,$116,$117);
 $rc=$118;
 var $119=$rc;
 var $120=($119|0)==0;
 if($120){label=32;break;}else{label=31;break;}
 case 31: 
 var $122=$rc;
 var $123=($122|0)==3;
 if($123){label=32;break;}else{label=33;break;}
 case 32: 
 var $125=$rc;
 $1=$125;
 label=88;break;
 case 33: 
 label=34;break;
 case 34: 
 var $128=$tcode;
 var $129=(($128+1)|0);
 var $130=HEAP8[($129)];
 var $131=($130&255);
 var $132=$131<<8;
 var $133=$tcode;
 var $134=(($133+2)|0);
 var $135=HEAP8[($134)];
 var $136=($135&255);
 var $137=$132|$136;
 var $138=$tcode;
 var $139=(($138+$137)|0);
 $tcode=$139;
 label=35;break;
 case 35: 
 var $141=$tcode;
 var $142=HEAP8[($141)];
 var $143=($142&255);
 var $144=($143|0)==119;
 if($144){label=34;break;}else{label=36;break;}
 case 36: 
 var $146=$tcode;
 var $147=(($146+3)|0);
 $tcode=$147;
 label=84;break;
 case 37: 
 var $149=$tcode;
 var $150=(($149+1)|0);
 $tcode=$150;
 label=38;break;
 case 38: 
 var $152=$tcode;
 var $153=(($152+1)|0);
 var $154=HEAP8[($153)];
 var $155=($154&255);
 var $156=$155<<8;
 var $157=$tcode;
 var $158=(($157+2)|0);
 var $159=HEAP8[($158)];
 var $160=($159&255);
 var $161=$156|$160;
 var $162=$tcode;
 var $163=(($162+$161)|0);
 $tcode=$163;
 label=39;break;
 case 39: 
 var $165=$tcode;
 var $166=HEAP8[($165)];
 var $167=($166&255);
 var $168=($167|0)==119;
 if($168){label=38;break;}else{label=40;break;}
 case 40: 
 var $170=$tcode;
 var $171=(($170+3)|0);
 $tcode=$171;
 label=84;break;
 case 41: 
 var $173=$3;
 var $174=$tcode;
 var $175=(($174+1)|0);
 var $176=$5;
 var $177=$4;
 var $178=_set_table_bit($173,$175,0,$176,$177);
 $tcode=$178;
 label=84;break;
 case 42: 
 var $180=$3;
 var $181=$tcode;
 var $182=(($181+1)|0);
 var $183=$5;
 var $184=$4;
 var $185=_set_table_bit($180,$182,1,$183,$184);
 $tcode=$185;
 label=84;break;
 case 43: 
 var $187=$3;
 var $188=$tcode;
 var $189=(($188+1)|0);
 var $190=(($189+2)|0);
 var $191=$5;
 var $192=$4;
 var $193=_set_table_bit($187,$190,0,$191,$192);
 $tcode=$193;
 label=84;break;
 case 44: 
 var $195=$3;
 var $196=$tcode;
 var $197=(($196+1)|0);
 var $198=(($197+2)|0);
 var $199=$5;
 var $200=$4;
 var $201=_set_table_bit($195,$198,1,$199,$200);
 $tcode=$201;
 label=84;break;
 case 45: 
 var $203=$tcode;
 var $204=(($203+2)|0);
 $tcode=$204;
 label=46;break;
 case 46: 
 var $206=$3;
 var $207=$tcode;
 var $208=(($207+1)|0);
 var $209=$5;
 var $210=$4;
 var $211=_set_table_bit($206,$208,0,$209,$210);
 $try_next=0;
 label=84;break;
 case 47: 
 var $213=$tcode;
 var $214=(($213+2)|0);
 $tcode=$214;
 label=48;break;
 case 48: 
 var $216=$3;
 var $217=$tcode;
 var $218=(($217+1)|0);
 var $219=$5;
 var $220=$4;
 var $221=_set_table_bit($216,$218,1,$219,$220);
 $try_next=0;
 label=84;break;
 case 49: 
 var $223=$3;
 var $224=(($223+1)|0);
 var $225=HEAP8[($224)];
 var $226=($225&255);
 var $227=$226|2;
 var $228=(($227)&255);
 HEAP8[($224)]=$228;
 var $229=$3;
 var $230=(($229+4)|0);
 var $231=HEAP8[($230)];
 var $232=($231&255);
 var $233=$232|1;
 var $234=(($233)&255);
 HEAP8[($230)]=$234;
 var $235=$3;
 var $236=(($235+20)|0);
 var $237=HEAP8[($236)];
 var $238=($237&255);
 var $239=$238|1;
 var $240=(($239)&255);
 HEAP8[($236)]=$240;
 $try_next=0;
 label=84;break;
 case 50: 
 var $242=$3;
 var $243=(($242+1)|0);
 var $244=HEAP8[($243)];
 var $245=($244&255);
 var $246=$245|4;
 var $247=(($246)&255);
 HEAP8[($243)]=$247;
 var $248=$3;
 var $249=(($248+1)|0);
 var $250=HEAP8[($249)];
 var $251=($250&255);
 var $252=$251|8;
 var $253=(($252)&255);
 HEAP8[($249)]=$253;
 var $254=$3;
 var $255=(($254+1)|0);
 var $256=HEAP8[($255)];
 var $257=($256&255);
 var $258=$257|16;
 var $259=(($258)&255);
 HEAP8[($255)]=$259;
 var $260=$3;
 var $261=(($260+1)|0);
 var $262=HEAP8[($261)];
 var $263=($262&255);
 var $264=$263|32;
 var $265=(($264)&255);
 HEAP8[($261)]=$265;
 var $266=$3;
 var $267=(($266+16)|0);
 var $268=HEAP8[($267)];
 var $269=($268&255);
 var $270=$269|32;
 var $271=(($270)&255);
 HEAP8[($267)]=$271;
 $try_next=0;
 label=84;break;
 case 51: 
 var $273=$3;
 var $274=$table_limit;
 var $275=$5;
 _set_nottype_bits($273,64,$274,$275);
 $try_next=0;
 label=84;break;
 case 52: 
 var $277=$3;
 var $278=$table_limit;
 var $279=$5;
 _set_type_bits($277,64,$278,$279);
 $try_next=0;
 label=84;break;
 case 53: 
 var $281=$3;
 var $282=$table_limit;
 var $283=$5;
 _set_nottype_bits($281,0,$282,$283);
 var $284=$3;
 var $285=(($284+1)|0);
 var $286=HEAP8[($285)];
 var $287=($286&255);
 var $288=$287|8;
 var $289=(($288)&255);
 HEAP8[($285)]=$289;
 $try_next=0;
 label=84;break;
 case 54: 
 var $291=$3;
 var $292=(($291+1)|0);
 var $293=HEAP8[($292)];
 var $294=($293&255);
 $c=$294;
 var $295=$3;
 var $296=$table_limit;
 var $297=$5;
 _set_type_bits($295,0,$296,$297);
 var $298=$3;
 var $299=(($298+1)|0);
 var $300=HEAP8[($299)];
 var $301=($300&255);
 var $302=$301&-9;
 var $303=$c;
 var $304=$302|$303;
 var $305=(($304)&255);
 var $306=$3;
 var $307=(($306+1)|0);
 HEAP8[($307)]=$305;
 $try_next=0;
 label=84;break;
 case 55: 
 var $309=$3;
 var $310=$table_limit;
 var $311=$5;
 _set_nottype_bits($309,160,$310,$311);
 $try_next=0;
 label=84;break;
 case 56: 
 var $313=$3;
 var $314=$table_limit;
 var $315=$5;
 _set_type_bits($313,160,$314,$315);
 $try_next=0;
 label=84;break;
 case 57: 
 var $317=$tcode;
 var $318=(($317+1)|0);
 $tcode=$318;
 label=84;break;
 case 58: 
 var $320=$tcode;
 var $321=(($320+3)|0);
 $tcode=$321;
 label=84;break;
 case 59: 
 var $323=$tcode;
 var $324=(($323+2)|0);
 $tcode=$324;
 label=60;break;
 case 60: 
 var $326=$tcode;
 var $327=(($326+1)|0);
 var $328=HEAP8[($327)];
 var $329=($328&255);
 switch(($329|0)){case 12:case 13:{ label=62;break;}case 19:{ label=63;break;}case 17:case 21:{ label=64;break;}case 6:{ label=65;break;}case 7:{ label=66;break;}case 8:{ label=67;break;}case 9:{ label=68;break;}case 10:{ label=69;break;}case 11:{ label=70;break;}default:{label=61;break;}}break;
 case 61: 
 label=62;break;
 case 62: 
 $1=0;
 label=88;break;
 case 63: 
 var $333=$3;
 var $334=(($333+1)|0);
 var $335=HEAP8[($334)];
 var $336=($335&255);
 var $337=$336|2;
 var $338=(($337)&255);
 HEAP8[($334)]=$338;
 var $339=$3;
 var $340=(($339+4)|0);
 var $341=HEAP8[($340)];
 var $342=($341&255);
 var $343=$342|1;
 var $344=(($343)&255);
 HEAP8[($340)]=$344;
 var $345=$3;
 var $346=(($345+20)|0);
 var $347=HEAP8[($346)];
 var $348=($347&255);
 var $349=$348|1;
 var $350=(($349)&255);
 HEAP8[($346)]=$350;
 label=71;break;
 case 64: 
 var $352=$3;
 var $353=(($352+1)|0);
 var $354=HEAP8[($353)];
 var $355=($354&255);
 var $356=$355|4;
 var $357=(($356)&255);
 HEAP8[($353)]=$357;
 var $358=$3;
 var $359=(($358+1)|0);
 var $360=HEAP8[($359)];
 var $361=($360&255);
 var $362=$361|8;
 var $363=(($362)&255);
 HEAP8[($359)]=$363;
 var $364=$3;
 var $365=(($364+1)|0);
 var $366=HEAP8[($365)];
 var $367=($366&255);
 var $368=$367|16;
 var $369=(($368)&255);
 HEAP8[($365)]=$369;
 var $370=$3;
 var $371=(($370+1)|0);
 var $372=HEAP8[($371)];
 var $373=($372&255);
 var $374=$373|32;
 var $375=(($374)&255);
 HEAP8[($371)]=$375;
 var $376=$3;
 var $377=(($376+16)|0);
 var $378=HEAP8[($377)];
 var $379=($378&255);
 var $380=$379|32;
 var $381=(($380)&255);
 HEAP8[($377)]=$381;
 label=71;break;
 case 65: 
 var $383=$3;
 var $384=$table_limit;
 var $385=$5;
 _set_nottype_bits($383,64,$384,$385);
 label=71;break;
 case 66: 
 var $387=$3;
 var $388=$table_limit;
 var $389=$5;
 _set_type_bits($387,64,$388,$389);
 label=71;break;
 case 67: 
 var $391=$3;
 var $392=$table_limit;
 var $393=$5;
 _set_nottype_bits($391,0,$392,$393);
 label=71;break;
 case 68: 
 var $395=$3;
 var $396=$table_limit;
 var $397=$5;
 _set_type_bits($395,0,$396,$397);
 label=71;break;
 case 69: 
 var $399=$3;
 var $400=$table_limit;
 var $401=$5;
 _set_nottype_bits($399,160,$400,$401);
 label=71;break;
 case 70: 
 var $403=$3;
 var $404=$table_limit;
 var $405=$5;
 _set_type_bits($403,160,$404,$405);
 label=71;break;
 case 71: 
 var $407=$tcode;
 var $408=(($407+2)|0);
 $tcode=$408;
 label=84;break;
 case 72: 
 var $410=$tcode;
 var $411=(($410+1)|0);
 $tcode=$411;
 var $412=$tcode;
 $map=$412;
 var $413=$tcode;
 var $414=(($413+32)|0);
 $tcode=$414;
 $c=0;
 label=73;break;
 case 73: 
 var $416=$c;
 var $417=($416>>>0)<32;
 if($417){label=74;break;}else{label=76;break;}
 case 74: 
 var $419=$c;
 var $420=$map;
 var $421=(($420+$419)|0);
 var $422=HEAP8[($421)];
 var $423=($422&255);
 var $424=$c;
 var $425=$3;
 var $426=(($425+$424)|0);
 var $427=HEAP8[($426)];
 var $428=($427&255);
 var $429=$428|$423;
 var $430=(($429)&255);
 HEAP8[($426)]=$430;
 label=75;break;
 case 75: 
 var $432=$c;
 var $433=((($432)+(1))|0);
 $c=$433;
 label=73;break;
 case 76: 
 var $435=$tcode;
 var $436=HEAP8[($435)];
 var $437=($436&255);
 switch(($437|0)){case 98:case 99:case 102:case 103:case 106:case 108:{ label=77;break;}case 104:case 105:case 109:{ label=78;break;}default:{label=82;break;}}break;
 case 77: 
 var $439=$tcode;
 var $440=(($439+1)|0);
 $tcode=$440;
 label=83;break;
 case 78: 
 var $442=$tcode;
 var $443=(($442+1)|0);
 var $444=HEAP8[($443)];
 var $445=($444&255);
 var $446=$445<<8;
 var $447=$tcode;
 var $448=(($447+2)|0);
 var $449=HEAP8[($448)];
 var $450=($449&255);
 var $451=$446|$450;
 var $452=($451|0)==0;
 if($452){label=79;break;}else{label=80;break;}
 case 79: 
 var $454=$tcode;
 var $455=(($454+5)|0);
 $tcode=$455;
 label=81;break;
 case 80: 
 $try_next=0;
 label=81;break;
 case 81: 
 label=83;break;
 case 82: 
 $try_next=0;
 label=83;break;
 case 83: 
 label=84;break;
 case 84: 
 label=8;break;
 case 85: 
 var $462=$2;
 var $463=(($462+1)|0);
 var $464=HEAP8[($463)];
 var $465=($464&255);
 var $466=$465<<8;
 var $467=$2;
 var $468=(($467+2)|0);
 var $469=HEAP8[($468)];
 var $470=($469&255);
 var $471=$466|$470;
 var $472=$2;
 var $473=(($472+$471)|0);
 $2=$473;
 label=86;break;
 case 86: 
 var $475=$2;
 var $476=HEAP8[($475)];
 var $477=($476&255);
 var $478=($477|0)==119;
 if($478){label=2;break;}else{label=87;break;}
 case 87: 
 var $480=$yield;
 $1=$480;
 label=88;break;
 case 88: 
 var $482=$1;
 STACKTOP=sp;return $482;
  default: assert(0, "bad label: " + label);
 }
}
function _find_minlength($re,$code,$startcode,$options,$recurse_depth){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $6;
 var $length;
 var $utf;
 var $had_recurse;
 var $branchlength;
 var $cc;
 var $d;
 var $min;
 var $cs;
 var $ce;
 var $op;
 var $count;
 var $slot;
 var $dd;
 $2=$re;
 $3=$code;
 $4=$startcode;
 $5=$options;
 $6=$recurse_depth;
 $length=-1;
 var $7=$5;
 var $8=$7&2048;
 var $9=($8|0)!=0;
 var $10=($9&1);
 $utf=$10;
 $had_recurse=0;
 $branchlength=0;
 var $11=$3;
 var $12=(($11+1)|0);
 var $13=(($12+2)|0);
 $cc=$13;
 var $14=$3;
 var $15=HEAP8[($14)];
 var $16=($15&255);
 var $17=($16|0)==133;
 if($17){label=5;break;}else{label=2;break;}
 case 2: 
 var $19=$3;
 var $20=HEAP8[($19)];
 var $21=($20&255);
 var $22=($21|0)==138;
 if($22){label=5;break;}else{label=3;break;}
 case 3: 
 var $24=$3;
 var $25=HEAP8[($24)];
 var $26=($25&255);
 var $27=($26|0)==134;
 if($27){label=5;break;}else{label=4;break;}
 case 4: 
 var $29=$3;
 var $30=HEAP8[($29)];
 var $31=($30&255);
 var $32=($31|0)==139;
 if($32){label=5;break;}else{label=6;break;}
 case 5: 
 var $34=$cc;
 var $35=(($34+2)|0);
 $cc=$35;
 label=6;break;
 case 6: 
 label=7;break;
 case 7: 
 var $38=$cc;
 var $39=HEAP8[($38)];
 $op=$39;
 var $40=$op;
 var $41=($40&255);
 switch(($41|0)){case 39:case 52:case 65:case 78:case 40:case 53:case 66:case 79:case 45:case 58:case 71:case 84:case 33:case 46:case 59:case 72:case 34:case 47:case 60:case 73:case 42:case 55:case 68:case 81:case 37:case 50:case 63:case 76:case 38:case 51:case 64:case 77:case 44:case 57:case 70:case 83:{ label=106;break;}case 149:case 151:case 153:case 155:{ label=107;break;}case 160:case 156:case 157:case 150:case 3:case 152:case 154:{ label=108;break;}case 133:case 138:case 131:case 136:case 134:case 139:case 132:case 137:case 129:case 130:{ label=11;break;}case 158:case 159:{ label=17;break;}case 119:case 120:case 121:case 122:case 123:case 0:{ label=18;break;}case 125:case 126:case 127:case 128:{ label=25;break;}case 124:case 141:case 142:case 143:case 144:case 145:case 118:case 1:case 2:case 24:case 23:case 27:case 28:case 25:case 26:case 4:case 5:{ label=29;break;}case 146:case 147:case 148:case 161:{ label=30;break;}case 29:case 30:case 31:case 32:case 35:case 48:case 36:case 49:case 43:case 56:case 61:case 74:case 62:case 75:case 69:case 82:{ label=34;break;}case 87:case 88:case 95:{ label=35;break;}case 41:case 54:case 67:case 80:{ label=38;break;}case 93:{ label=39;break;}case 16:case 15:{ label=42;break;}case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 22:case 19:case 18:case 21:case 20:{ label=43;break;}case 17:{ label=44;break;}case 14:{ label=45;break;}case 85:case 86:case 89:case 90:case 94:case 96:{ label=46;break;}case 91:case 92:case 97:{ label=50;break;}case 110:case 111:{ label=54;break;}case 115:case 116:{ label=60;break;}case 113:case 114:{ label=78;break;}case 135:case 140:{ label=8;break;}case 117:{ label=97;break;}default:{label=109;break;}}break;
 case 8: 
 var $43=$cc;
 var $44=$cc;
 var $45=(($44+1)|0);
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=$47<<8;
 var $49=$cc;
 var $50=(($49+2)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255);
 var $53=$48|$52;
 var $54=(($43+$53)|0);
 $cs=$54;
 var $55=$cs;
 var $56=HEAP8[($55)];
 var $57=($56&255);
 var $58=($57|0)!=119;
 if($58){label=9;break;}else{label=10;break;}
 case 9: 
 var $60=$cs;
 var $61=(($60+1)|0);
 var $62=(($61+2)|0);
 $cc=$62;
 label=110;break;
 case 10: 
 label=11;break;
 case 11: 
 var $65=$2;
 var $66=$cc;
 var $67=$4;
 var $68=$5;
 var $69=$6;
 var $70=_find_minlength($65,$66,$67,$68,$69);
 $d=$70;
 var $71=$d;
 var $72=($71|0)<0;
 if($72){label=12;break;}else{label=13;break;}
 case 12: 
 var $74=$d;
 $1=$74;
 label=111;break;
 case 13: 
 var $76=$d;
 var $77=$branchlength;
 var $78=((($77)+($76))|0);
 $branchlength=$78;
 label=14;break;
 case 14: 
 var $80=$cc;
 var $81=(($80+1)|0);
 var $82=HEAP8[($81)];
 var $83=($82&255);
 var $84=$83<<8;
 var $85=$cc;
 var $86=(($85+2)|0);
 var $87=HEAP8[($86)];
 var $88=($87&255);
 var $89=$84|$88;
 var $90=$cc;
 var $91=(($90+$89)|0);
 $cc=$91;
 label=15;break;
 case 15: 
 var $93=$cc;
 var $94=HEAP8[($93)];
 var $95=($94&255);
 var $96=($95|0)==119;
 if($96){label=14;break;}else{label=16;break;}
 case 16: 
 var $98=$cc;
 var $99=(($98+3)|0);
 $cc=$99;
 label=110;break;
 case 17: 
 $1=-1;
 label=111;break;
 case 18: 
 var $102=$length;
 var $103=($102|0)<0;
 if($103){label=21;break;}else{label=19;break;}
 case 19: 
 var $105=$had_recurse;
 var $106=($105|0)!=0;
 if($106){label=22;break;}else{label=20;break;}
 case 20: 
 var $108=$branchlength;
 var $109=$length;
 var $110=($108|0)<($109|0);
 if($110){label=21;break;}else{label=22;break;}
 case 21: 
 var $112=$branchlength;
 $length=$112;
 label=22;break;
 case 22: 
 var $114=$op;
 var $115=($114&255);
 var $116=($115|0)!=119;
 if($116){label=23;break;}else{label=24;break;}
 case 23: 
 var $118=$length;
 $1=$118;
 label=111;break;
 case 24: 
 var $120=$cc;
 var $121=(($120+3)|0);
 $cc=$121;
 $branchlength=0;
 $had_recurse=0;
 label=110;break;
 case 25: 
 label=26;break;
 case 26: 
 var $124=$cc;
 var $125=(($124+1)|0);
 var $126=HEAP8[($125)];
 var $127=($126&255);
 var $128=$127<<8;
 var $129=$cc;
 var $130=(($129+2)|0);
 var $131=HEAP8[($130)];
 var $132=($131&255);
 var $133=$128|$132;
 var $134=$cc;
 var $135=(($134+$133)|0);
 $cc=$135;
 label=27;break;
 case 27: 
 var $137=$cc;
 var $138=HEAP8[($137)];
 var $139=($138&255);
 var $140=($139|0)==119;
 if($140){label=26;break;}else{label=28;break;}
 case 28: 
 label=29;break;
 case 29: 
 var $143=$cc;
 var $144=HEAP8[($143)];
 var $145=($144&255);
 var $146=((6760+$145)|0);
 var $147=HEAP8[($146)];
 var $148=($147&255);
 var $149=$cc;
 var $150=(($149+$148)|0);
 $cc=$150;
 label=110;break;
 case 30: 
 var $152=$cc;
 var $153=HEAP8[($152)];
 var $154=($153&255);
 var $155=((6760+$154)|0);
 var $156=HEAP8[($155)];
 var $157=($156&255);
 var $158=$cc;
 var $159=(($158+$157)|0);
 $cc=$159;
 label=31;break;
 case 31: 
 var $161=$cc;
 var $162=(($161+1)|0);
 var $163=HEAP8[($162)];
 var $164=($163&255);
 var $165=$164<<8;
 var $166=$cc;
 var $167=(($166+2)|0);
 var $168=HEAP8[($167)];
 var $169=($168&255);
 var $170=$165|$169;
 var $171=$cc;
 var $172=(($171+$170)|0);
 $cc=$172;
 label=32;break;
 case 32: 
 var $174=$cc;
 var $175=HEAP8[($174)];
 var $176=($175&255);
 var $177=($176|0)==119;
 if($177){label=31;break;}else{label=33;break;}
 case 33: 
 var $179=$cc;
 var $180=(($179+3)|0);
 $cc=$180;
 label=110;break;
 case 34: 
 var $182=$branchlength;
 var $183=((($182)+(1))|0);
 $branchlength=$183;
 var $184=$cc;
 var $185=(($184+2)|0);
 $cc=$185;
 label=110;break;
 case 35: 
 var $187=$branchlength;
 var $188=((($187)+(1))|0);
 $branchlength=$188;
 var $189=$cc;
 var $190=(($189+1)|0);
 var $191=HEAP8[($190)];
 var $192=($191&255);
 var $193=($192|0)==16;
 if($193){var $201=1;label=37;break;}else{label=36;break;}
 case 36: 
 var $195=$cc;
 var $196=(($195+1)|0);
 var $197=HEAP8[($196)];
 var $198=($197&255);
 var $199=($198|0)==15;
 var $201=$199;label=37;break;
 case 37: 
 var $201;
 var $202=($201?4:2);
 var $203=$cc;
 var $204=(($203+$202)|0);
 $cc=$204;
 label=110;break;
 case 38: 
 var $206=$cc;
 var $207=(($206+1)|0);
 var $208=HEAP8[($207)];
 var $209=($208&255);
 var $210=$209<<8;
 var $211=$cc;
 var $212=(($211+2)|0);
 var $213=HEAP8[($212)];
 var $214=($213&255);
 var $215=$210|$214;
 var $216=$branchlength;
 var $217=((($216)+($215))|0);
 $branchlength=$217;
 var $218=$cc;
 var $219=(($218+4)|0);
 $cc=$219;
 label=110;break;
 case 39: 
 var $221=$cc;
 var $222=(($221+1)|0);
 var $223=HEAP8[($222)];
 var $224=($223&255);
 var $225=$224<<8;
 var $226=$cc;
 var $227=(($226+2)|0);
 var $228=HEAP8[($227)];
 var $229=($228&255);
 var $230=$225|$229;
 var $231=$branchlength;
 var $232=((($231)+($230))|0);
 $branchlength=$232;
 var $233=$cc;
 var $234=(($233+3)|0);
 var $235=HEAP8[($234)];
 var $236=($235&255);
 var $237=($236|0)==16;
 if($237){var $245=1;label=41;break;}else{label=40;break;}
 case 40: 
 var $239=$cc;
 var $240=(($239+3)|0);
 var $241=HEAP8[($240)];
 var $242=($241&255);
 var $243=($242|0)==15;
 var $245=$243;label=41;break;
 case 41: 
 var $245;
 var $246=($245?2:0);
 var $247=((($246)+(4))|0);
 var $248=$cc;
 var $249=(($248+$247)|0);
 $cc=$249;
 label=110;break;
 case 42: 
 var $251=$cc;
 var $252=(($251+2)|0);
 $cc=$252;
 label=43;break;
 case 43: 
 var $254=$branchlength;
 var $255=((($254)+(1))|0);
 $branchlength=$255;
 var $256=$cc;
 var $257=(($256+1)|0);
 $cc=$257;
 label=110;break;
 case 44: 
 var $259=$branchlength;
 var $260=((($259)+(1))|0);
 $branchlength=$260;
 var $261=$cc;
 var $262=(($261+1)|0);
 $cc=$262;
 label=110;break;
 case 45: 
 var $264=$branchlength;
 var $265=((($264)+(1))|0);
 $branchlength=$265;
 var $266=$cc;
 var $267=(($266+1)|0);
 $cc=$267;
 label=110;break;
 case 46: 
 var $269=$cc;
 var $270=(($269+1)|0);
 var $271=HEAP8[($270)];
 var $272=($271&255);
 var $273=($272|0)==16;
 if($273){label=48;break;}else{label=47;break;}
 case 47: 
 var $275=$cc;
 var $276=(($275+1)|0);
 var $277=HEAP8[($276)];
 var $278=($277&255);
 var $279=($278|0)==15;
 if($279){label=48;break;}else{label=49;break;}
 case 48: 
 var $281=$cc;
 var $282=(($281+2)|0);
 $cc=$282;
 label=49;break;
 case 49: 
 var $284=$op;
 var $285=($284&255);
 var $286=((6760+$285)|0);
 var $287=HEAP8[($286)];
 var $288=($287&255);
 var $289=$cc;
 var $290=(($289+$288)|0);
 $cc=$290;
 label=110;break;
 case 50: 
 var $292=$cc;
 var $293=(($292+3)|0);
 var $294=HEAP8[($293)];
 var $295=($294&255);
 var $296=($295|0)==16;
 if($296){label=52;break;}else{label=51;break;}
 case 51: 
 var $298=$cc;
 var $299=(($298+3)|0);
 var $300=HEAP8[($299)];
 var $301=($300&255);
 var $302=($301|0)==15;
 if($302){label=52;break;}else{label=53;break;}
 case 52: 
 var $304=$cc;
 var $305=(($304+2)|0);
 $cc=$305;
 label=53;break;
 case 53: 
 var $307=$op;
 var $308=($307&255);
 var $309=((6760+$308)|0);
 var $310=HEAP8[($309)];
 var $311=($310&255);
 var $312=$cc;
 var $313=(($312+$311)|0);
 $cc=$313;
 label=110;break;
 case 54: 
 var $315=HEAP8[(6870)];
 var $316=($315&255);
 var $317=$cc;
 var $318=(($317+$316)|0);
 $cc=$318;
 var $319=$cc;
 var $320=HEAP8[($319)];
 var $321=($320&255);
 switch(($321|0)){case 100:case 101:case 107:{ label=55;break;}case 98:case 99:case 102:case 103:case 106:case 108:{ label=56;break;}case 104:case 105:case 109:{ label=57;break;}default:{label=58;break;}}break;
 case 55: 
 var $323=$branchlength;
 var $324=((($323)+(1))|0);
 $branchlength=$324;
 label=56;break;
 case 56: 
 var $326=$cc;
 var $327=(($326+1)|0);
 $cc=$327;
 label=59;break;
 case 57: 
 var $329=$cc;
 var $330=(($329+1)|0);
 var $331=HEAP8[($330)];
 var $332=($331&255);
 var $333=$332<<8;
 var $334=$cc;
 var $335=(($334+2)|0);
 var $336=HEAP8[($335)];
 var $337=($336&255);
 var $338=$333|$337;
 var $339=$branchlength;
 var $340=((($339)+($338))|0);
 $branchlength=$340;
 var $341=$cc;
 var $342=(($341+5)|0);
 $cc=$342;
 label=59;break;
 case 58: 
 var $344=$branchlength;
 var $345=((($344)+(1))|0);
 $branchlength=$345;
 label=59;break;
 case 59: 
 label=110;break;
 case 60: 
 var $348=$5;
 var $349=$348&33554432;
 var $350=($349|0)==0;
 if($350){label=61;break;}else{label=76;break;}
 case 61: 
 var $352=$cc;
 var $353=(($352+3)|0);
 var $354=HEAP8[($353)];
 var $355=($354&255);
 var $356=$355<<8;
 var $357=$cc;
 var $358=(($357+4)|0);
 var $359=HEAP8[($358)];
 var $360=($359&255);
 var $361=$356|$360;
 $count=$361;
 var $362=$2;
 var $363=$362;
 var $364=$2;
 var $365=(($364+34)|0);
 var $366=HEAP16[(($365)>>1)];
 var $367=($366&65535);
 var $368=(($363+$367)|0);
 var $369=$cc;
 var $370=(($369+1)|0);
 var $371=HEAP8[($370)];
 var $372=($371&255);
 var $373=$372<<8;
 var $374=$cc;
 var $375=(($374+2)|0);
 var $376=HEAP8[($375)];
 var $377=($376&255);
 var $378=$373|$377;
 var $379=$2;
 var $380=(($379+36)|0);
 var $381=HEAP16[(($380)>>1)];
 var $382=($381&65535);
 var $383=(Math_imul($378,$382)|0);
 var $384=(($368+$383)|0);
 $slot=$384;
 $d=2147483647;
 label=62;break;
 case 62: 
 var $386=$count;
 var $387=((($386)-(1))|0);
 $count=$387;
 var $388=($386|0)>0;
 if($388){label=63;break;}else{label=75;break;}
 case 63: 
 var $390=$4;
 var $391=$utf;
 var $392=$slot;
 var $393=(($392)|0);
 var $394=HEAP8[($393)];
 var $395=($394&255);
 var $396=$395<<8;
 var $397=$slot;
 var $398=(($397+1)|0);
 var $399=HEAP8[($398)];
 var $400=($399&255);
 var $401=$396|$400;
 var $402=__pcre_find_bracket($390,$391,$401);
 $cs=$402;
 $ce=$402;
 var $403=$cs;
 var $404=($403|0)==0;
 if($404){label=64;break;}else{label=65;break;}
 case 64: 
 $1=-2;
 label=111;break;
 case 65: 
 label=66;break;
 case 66: 
 var $408=$ce;
 var $409=(($408+1)|0);
 var $410=HEAP8[($409)];
 var $411=($410&255);
 var $412=$411<<8;
 var $413=$ce;
 var $414=(($413+2)|0);
 var $415=HEAP8[($414)];
 var $416=($415&255);
 var $417=$412|$416;
 var $418=$ce;
 var $419=(($418+$417)|0);
 $ce=$419;
 label=67;break;
 case 67: 
 var $421=$ce;
 var $422=HEAP8[($421)];
 var $423=($422&255);
 var $424=($423|0)==119;
 if($424){label=66;break;}else{label=68;break;}
 case 68: 
 var $426=$cc;
 var $427=$cs;
 var $428=($426>>>0)>($427>>>0);
 if($428){label=69;break;}else{label=71;break;}
 case 69: 
 var $430=$cc;
 var $431=$ce;
 var $432=($430>>>0)<($431>>>0);
 if($432){label=70;break;}else{label=71;break;}
 case 70: 
 $d=0;
 $had_recurse=1;
 label=75;break;
 case 71: 
 var $435=$2;
 var $436=$cs;
 var $437=$4;
 var $438=$5;
 var $439=$6;
 var $440=_find_minlength($435,$436,$437,$438,$439);
 $dd=$440;
 var $441=$dd;
 var $442=$d;
 var $443=($441|0)<($442|0);
 if($443){label=72;break;}else{label=73;break;}
 case 72: 
 var $445=$dd;
 $d=$445;
 label=73;break;
 case 73: 
 label=74;break;
 case 74: 
 var $448=$2;
 var $449=(($448+36)|0);
 var $450=HEAP16[(($449)>>1)];
 var $451=($450&65535);
 var $452=$slot;
 var $453=(($452+$451)|0);
 $slot=$453;
 label=62;break;
 case 75: 
 label=77;break;
 case 76: 
 $d=0;
 label=77;break;
 case 77: 
 var $457=$cc;
 var $458=(($457+5)|0);
 $cc=$458;
 label=91;break;
 case 78: 
 var $460=$5;
 var $461=$460&33554432;
 var $462=($461|0)==0;
 if($462){label=79;break;}else{label=89;break;}
 case 79: 
 var $464=$4;
 var $465=$utf;
 var $466=$cc;
 var $467=(($466+1)|0);
 var $468=HEAP8[($467)];
 var $469=($468&255);
 var $470=$469<<8;
 var $471=$cc;
 var $472=(($471+2)|0);
 var $473=HEAP8[($472)];
 var $474=($473&255);
 var $475=$470|$474;
 var $476=__pcre_find_bracket($464,$465,$475);
 $cs=$476;
 $ce=$476;
 var $477=$cs;
 var $478=($477|0)==0;
 if($478){label=80;break;}else{label=81;break;}
 case 80: 
 $1=-2;
 label=111;break;
 case 81: 
 label=82;break;
 case 82: 
 var $482=$ce;
 var $483=(($482+1)|0);
 var $484=HEAP8[($483)];
 var $485=($484&255);
 var $486=$485<<8;
 var $487=$ce;
 var $488=(($487+2)|0);
 var $489=HEAP8[($488)];
 var $490=($489&255);
 var $491=$486|$490;
 var $492=$ce;
 var $493=(($492+$491)|0);
 $ce=$493;
 label=83;break;
 case 83: 
 var $495=$ce;
 var $496=HEAP8[($495)];
 var $497=($496&255);
 var $498=($497|0)==119;
 if($498){label=82;break;}else{label=84;break;}
 case 84: 
 var $500=$cc;
 var $501=$cs;
 var $502=($500>>>0)>($501>>>0);
 if($502){label=85;break;}else{label=87;break;}
 case 85: 
 var $504=$cc;
 var $505=$ce;
 var $506=($504>>>0)<($505>>>0);
 if($506){label=86;break;}else{label=87;break;}
 case 86: 
 $d=0;
 $had_recurse=1;
 label=88;break;
 case 87: 
 var $509=$2;
 var $510=$cs;
 var $511=$4;
 var $512=$5;
 var $513=$6;
 var $514=_find_minlength($509,$510,$511,$512,$513);
 $d=$514;
 label=88;break;
 case 88: 
 label=90;break;
 case 89: 
 $d=0;
 label=90;break;
 case 90: 
 var $518=$cc;
 var $519=(($518+3)|0);
 $cc=$519;
 label=91;break;
 case 91: 
 var $521=$cc;
 var $522=HEAP8[($521)];
 var $523=($522&255);
 switch(($523|0)){case 98:case 99:case 102:case 103:case 106:case 108:{ label=92;break;}case 100:case 101:case 107:{ label=93;break;}case 104:case 105:case 109:{ label=94;break;}default:{label=95;break;}}break;
 case 92: 
 $min=0;
 var $525=$cc;
 var $526=(($525+1)|0);
 $cc=$526;
 label=96;break;
 case 93: 
 $min=1;
 var $528=$cc;
 var $529=(($528+1)|0);
 $cc=$529;
 label=96;break;
 case 94: 
 var $531=$cc;
 var $532=(($531+1)|0);
 var $533=HEAP8[($532)];
 var $534=($533&255);
 var $535=$534<<8;
 var $536=$cc;
 var $537=(($536+2)|0);
 var $538=HEAP8[($537)];
 var $539=($538&255);
 var $540=$535|$539;
 $min=$540;
 var $541=$cc;
 var $542=(($541+5)|0);
 $cc=$542;
 label=96;break;
 case 95: 
 $min=1;
 label=96;break;
 case 96: 
 var $545=$min;
 var $546=$d;
 var $547=(Math_imul($545,$546)|0);
 var $548=$branchlength;
 var $549=((($548)+($547))|0);
 $branchlength=$549;
 label=110;break;
 case 97: 
 var $551=$4;
 var $552=$cc;
 var $553=(($552+1)|0);
 var $554=HEAP8[($553)];
 var $555=($554&255);
 var $556=$555<<8;
 var $557=$cc;
 var $558=(($557+2)|0);
 var $559=HEAP8[($558)];
 var $560=($559&255);
 var $561=$556|$560;
 var $562=(($551+$561)|0);
 $ce=$562;
 $cs=$562;
 label=98;break;
 case 98: 
 var $564=$ce;
 var $565=(($564+1)|0);
 var $566=HEAP8[($565)];
 var $567=($566&255);
 var $568=$567<<8;
 var $569=$ce;
 var $570=(($569+2)|0);
 var $571=HEAP8[($570)];
 var $572=($571&255);
 var $573=$568|$572;
 var $574=$ce;
 var $575=(($574+$573)|0);
 $ce=$575;
 label=99;break;
 case 99: 
 var $577=$ce;
 var $578=HEAP8[($577)];
 var $579=($578&255);
 var $580=($579|0)==119;
 if($580){label=98;break;}else{label=100;break;}
 case 100: 
 var $582=$cc;
 var $583=$cs;
 var $584=($582>>>0)>($583>>>0);
 if($584){label=101;break;}else{label=102;break;}
 case 101: 
 var $586=$cc;
 var $587=$ce;
 var $588=($586>>>0)<($587>>>0);
 if($588){label=103;break;}else{label=102;break;}
 case 102: 
 var $590=$6;
 var $591=($590|0)>10;
 if($591){label=103;break;}else{label=104;break;}
 case 103: 
 $had_recurse=1;
 label=105;break;
 case 104: 
 var $594=$2;
 var $595=$cs;
 var $596=$4;
 var $597=$5;
 var $598=$6;
 var $599=((($598)+(1))|0);
 var $600=_find_minlength($594,$595,$596,$597,$599);
 var $601=$branchlength;
 var $602=((($601)+($600))|0);
 $branchlength=$602;
 label=105;break;
 case 105: 
 var $604=$cc;
 var $605=(($604+3)|0);
 $cc=$605;
 label=110;break;
 case 106: 
 var $607=$op;
 var $608=($607&255);
 var $609=((6760+$608)|0);
 var $610=HEAP8[($609)];
 var $611=($610&255);
 var $612=$cc;
 var $613=(($612+$611)|0);
 $cc=$613;
 label=110;break;
 case 107: 
 var $615=$op;
 var $616=($615&255);
 var $617=((6760+$616)|0);
 var $618=HEAP8[($617)];
 var $619=($618&255);
 var $620=$cc;
 var $621=(($620+1)|0);
 var $622=HEAP8[($621)];
 var $623=($622&255);
 var $624=((($619)+($623))|0);
 var $625=$cc;
 var $626=(($625+$624)|0);
 $cc=$626;
 label=110;break;
 case 108: 
 var $628=$op;
 var $629=($628&255);
 var $630=((6760+$629)|0);
 var $631=HEAP8[($630)];
 var $632=($631&255);
 var $633=$cc;
 var $634=(($633+$632)|0);
 $cc=$634;
 label=110;break;
 case 109: 
 $1=-3;
 label=111;break;
 case 110: 
 label=7;break;
 case 111: 
 var $638=$1;
 STACKTOP=sp;return $638;
  default: assert(0, "bad label: " + label);
 }
}
function _set_table_bit($start_bits,$p,$caseless,$cd,$utf){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $c;
 $1=$start_bits;
 $2=$p;
 $3=$caseless;
 $4=$cd;
 $5=$utf;
 var $6=$2;
 var $7=HEAP8[($6)];
 var $8=($7&255);
 $c=$8;
 var $9=$c;
 var $10=$9&7;
 var $11=1<<$10;
 var $12=$c;
 var $13=(((($12>>>0))/(8))&-1);
 var $14=$1;
 var $15=(($14+$13)|0);
 var $16=HEAP8[($15)];
 var $17=($16&255);
 var $18=$17|$11;
 var $19=(($18)&255);
 HEAP8[($15)]=$19;
 var $20=$5;
 var $21=$3;
 var $22=($21|0)!=0;
 if($22){label=2;break;}else{label=4;break;}
 case 2: 
 var $24=$c;
 var $25=$4;
 var $26=(($25+12)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+$24)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=$30&2;
 var $32=($31|0)!=0;
 if($32){label=3;break;}else{label=4;break;}
 case 3: 
 var $34=$c;
 var $35=$4;
 var $36=(($35+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+$34)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=$40&7;
 var $42=1<<$41;
 var $43=$c;
 var $44=$4;
 var $45=(($44+4)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+$43)|0);
 var $48=HEAP8[($47)];
 var $49=($48&255);
 var $50=(((($49|0))/(8))&-1);
 var $51=$1;
 var $52=(($51+$50)|0);
 var $53=HEAP8[($52)];
 var $54=($53&255);
 var $55=$54|$42;
 var $56=(($55)&255);
 HEAP8[($52)]=$56;
 label=4;break;
 case 4: 
 var $58=$2;
 var $59=(($58+1)|0);
 STACKTOP=sp;return $59;
  default: assert(0, "bad label: " + label);
 }
}
function _set_nottype_bits($start_bits,$cbit_type,$table_limit,$cd){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $c;
 $1=$start_bits;
 $2=$cbit_type;
 $3=$table_limit;
 $4=$cd;
 $c=0;
 label=2;break;
 case 2: 
 var $6=$c;
 var $7=$3;
 var $8=($6>>>0)<($7>>>0);
 if($8){label=3;break;}else{label=5;break;}
 case 3: 
 var $10=$c;
 var $11=$2;
 var $12=((($10)+($11))|0);
 var $13=$4;
 var $14=(($13+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+$12)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 var $19=$18^-1;
 var $20=$c;
 var $21=$1;
 var $22=(($21+$20)|0);
 var $23=HEAP8[($22)];
 var $24=($23&255);
 var $25=$24|$19;
 var $26=(($25)&255);
 HEAP8[($22)]=$26;
 label=4;break;
 case 4: 
 var $28=$c;
 var $29=((($28)+(1))|0);
 $c=$29;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _set_type_bits($start_bits,$cbit_type,$table_limit,$cd){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $c;
 $1=$start_bits;
 $2=$cbit_type;
 $3=$table_limit;
 $4=$cd;
 $c=0;
 label=2;break;
 case 2: 
 var $6=$c;
 var $7=$3;
 var $8=($6>>>0)<($7>>>0);
 if($8){label=3;break;}else{label=5;break;}
 case 3: 
 var $10=$c;
 var $11=$2;
 var $12=((($10)+($11))|0);
 var $13=$4;
 var $14=(($13+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15+$12)|0);
 var $17=HEAP8[($16)];
 var $18=($17&255);
 var $19=$c;
 var $20=$1;
 var $21=(($20+$19)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$23|$18;
 var $25=(($24)&255);
 HEAP8[($21)]=$25;
 label=4;break;
 case 4: 
 var $27=$c;
 var $28=((($27)+(1))|0);
 $c=$28;
 label=2;break;
 case 5: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }
}
function _pcre_fullinfo($argument_re,$extra_data,$what,$where){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2;
 var $3;
 var $4;
 var $5;
 var $re;
 var $study;
 $2=$argument_re;
 $3=$extra_data;
 $4=$what;
 $5=$where;
 var $6=$2;
 var $7=$6;
 $re=$7;
 $study=0;
 var $8=$re;
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=$5;
 var $12=($11|0)==0;
 if($12){label=3;break;}else{label=4;break;}
 case 3: 
 $1=-2;
 label=73;break;
 case 4: 
 var $15=$3;
 var $16=($15|0)!=0;
 if($16){label=5;break;}else{label=7;break;}
 case 5: 
 var $18=$3;
 var $19=(($18)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=$20&1;
 var $22=($21|0)!=0;
 if($22){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=$3;
 var $25=(($24+4)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$26;
 $study=$27;
 label=7;break;
 case 7: 
 var $29=$re;
 var $30=(($29)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($31|0)!=1346589253;
 if($32){label=8;break;}else{label=9;break;}
 case 8: 
 var $34=$re;
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==1163019088;
 var $38=($37?-29:-4);
 $1=$38;
 label=73;break;
 case 9: 
 var $40=$re;
 var $41=(($40+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42&1;
 var $44=($43|0)==0;
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 $1=-28;
 label=73;break;
 case 11: 
 var $47=$4;
 switch(($47|0)){case 0:{ label=12;break;}case 1:{ label=13;break;}case 10:{ label=14;break;}case 17:{ label=18;break;}case 2:{ label=19;break;}case 3:{ label=20;break;}case 4:{ label=21;break;}case 19:{ label=25;break;}case 20:{ label=29;break;}case 5:{ label=33;break;}case 15:{ label=38;break;}case 16:{ label=43;break;}case 6:{ label=47;break;}case 21:{ label=51;break;}case 22:{ label=55;break;}case 7:{ label=56;break;}case 8:{ label=57;break;}case 9:{ label=58;break;}case 11:{ label=59;break;}case 12:{ label=60;break;}case 13:{ label=61;break;}case 14:{ label=62;break;}case 18:{ label=63;break;}case 23:{ label=64;break;}case 24:{ label=67;break;}case 25:{ label=70;break;}default:{label=71;break;}}break;
 case 12: 
 var $49=$re;
 var $50=(($49+8)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51&671054463;
 var $53=$5;
 var $54=$53;
 HEAP32[(($54)>>2)]=$52;
 label=72;break;
 case 13: 
 var $56=$re;
 var $57=(($56+4)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$5;
 var $60=$59;
 HEAP32[(($60)>>2)]=$58;
 label=72;break;
 case 14: 
 var $62=$study;
 var $63=($62|0)==0;
 if($63){label=15;break;}else{label=16;break;}
 case 15: 
 var $70=0;label=17;break;
 case 16: 
 var $66=$study;
 var $67=(($66)|0);
 var $68=HEAP32[(($67)>>2)];
 var $70=$68;label=17;break;
 case 17: 
 var $70;
 var $71=$5;
 var $72=$71;
 HEAP32[(($72)>>2)]=$70;
 label=72;break;
 case 18: 
 var $74=$5;
 var $75=$74;
 HEAP32[(($75)>>2)]=0;
 label=72;break;
 case 19: 
 var $77=$re;
 var $78=(($77+30)|0);
 var $79=HEAP16[(($78)>>1)];
 var $80=($79&65535);
 var $81=$5;
 var $82=$81;
 HEAP32[(($82)>>2)]=$80;
 label=72;break;
 case 20: 
 var $84=$re;
 var $85=(($84+32)|0);
 var $86=HEAP16[(($85)>>1)];
 var $87=($86&65535);
 var $88=$5;
 var $89=$88;
 HEAP32[(($89)>>2)]=$87;
 label=72;break;
 case 21: 
 var $91=$re;
 var $92=(($91+12)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=$93&16;
 var $95=($94|0)!=0;
 if($95){label=22;break;}else{label=23;break;}
 case 22: 
 var $97=$re;
 var $98=(($97+24)|0);
 var $99=HEAP16[(($98)>>1)];
 var $100=($99&65535);
 var $109=$100;label=24;break;
 case 23: 
 var $102=$re;
 var $103=(($102+12)|0);
 var $104=HEAP32[(($103)>>2)];
 var $105=$104&256;
 var $106=($105|0)!=0;
 var $107=($106?-1:-2);
 var $109=$107;label=24;break;
 case 24: 
 var $109;
 var $110=$5;
 var $111=$110;
 HEAP32[(($111)>>2)]=$109;
 label=72;break;
 case 25: 
 var $113=$re;
 var $114=(($113+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=$115&16;
 var $117=($116|0)!=0;
 if($117){label=26;break;}else{label=27;break;}
 case 26: 
 var $119=$re;
 var $120=(($119+24)|0);
 var $121=HEAP16[(($120)>>1)];
 var $122=($121&65535);
 var $125=$122;label=28;break;
 case 27: 
 var $125=0;label=28;break;
 case 28: 
 var $125;
 var $126=$5;
 var $127=$126;
 HEAP32[(($127)>>2)]=$125;
 label=72;break;
 case 29: 
 var $129=$re;
 var $130=(($129+12)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=$131&16;
 var $133=($132|0)!=0;
 if($133){label=30;break;}else{label=31;break;}
 case 30: 
 var $143=1;label=32;break;
 case 31: 
 var $136=$re;
 var $137=(($136+12)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=$138&256;
 var $140=($139|0)!=0;
 var $141=($140?2:0);
 var $143=$141;label=32;break;
 case 32: 
 var $143;
 var $144=$5;
 var $145=$144;
 HEAP32[(($145)>>2)]=$143;
 label=72;break;
 case 33: 
 var $147=$study;
 var $148=($147|0)!=0;
 if($148){label=34;break;}else{label=36;break;}
 case 34: 
 var $150=$study;
 var $151=(($150+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$152&1;
 var $154=($153|0)!=0;
 if($154){label=35;break;}else{label=36;break;}
 case 35: 
 var $156=$3;
 var $157=(($156+4)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=$158;
 var $160=(($159+8)|0);
 var $161=(($160)|0);
 var $164=$161;label=37;break;
 case 36: 
 var $164=0;label=37;break;
 case 37: 
 var $164;
 var $165=$5;
 var $166=$165;
 HEAP32[(($166)>>2)]=$164;
 label=72;break;
 case 38: 
 var $168=$study;
 var $169=($168|0)!=0;
 if($169){label=39;break;}else{label=41;break;}
 case 39: 
 var $171=$study;
 var $172=(($171+4)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=$173&2;
 var $175=($174|0)!=0;
 if($175){label=40;break;}else{label=41;break;}
 case 40: 
 var $177=$study;
 var $178=(($177+40)|0);
 var $179=HEAP32[(($178)>>2)];
 var $182=$179;label=42;break;
 case 41: 
 var $182=-1;label=42;break;
 case 42: 
 var $182;
 var $183=$5;
 var $184=$183;
 HEAP32[(($184)>>2)]=$182;
 label=72;break;
 case 43: 
 var $186=$3;
 var $187=($186|0)!=0;
 if($187){label=44;break;}else{var $200=0;label=46;break;}
 case 44: 
 var $189=$3;
 var $190=(($189)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=$191&64;
 var $193=($192|0)!=0;
 if($193){label=45;break;}else{var $200=0;label=46;break;}
 case 45: 
 var $195=$3;
 var $196=(($195+28)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=($197|0)!=0;
 var $200=$198;label=46;break;
 case 46: 
 var $200;
 var $201=($200&1);
 var $202=$5;
 var $203=$202;
 HEAP32[(($203)>>2)]=$201;
 label=72;break;
 case 47: 
 var $205=$re;
 var $206=(($205+12)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207&64;
 var $209=($208|0)!=0;
 if($209){label=48;break;}else{label=49;break;}
 case 48: 
 var $211=$re;
 var $212=(($211+26)|0);
 var $213=HEAP16[(($212)>>1)];
 var $214=($213&65535);
 var $217=$214;label=50;break;
 case 49: 
 var $217=-1;label=50;break;
 case 50: 
 var $217;
 var $218=$5;
 var $219=$218;
 HEAP32[(($219)>>2)]=$217;
 label=72;break;
 case 51: 
 var $221=$re;
 var $222=(($221+12)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=$223&64;
 var $225=($224|0)!=0;
 if($225){label=52;break;}else{label=53;break;}
 case 52: 
 var $227=$re;
 var $228=(($227+26)|0);
 var $229=HEAP16[(($228)>>1)];
 var $230=($229&65535);
 var $233=$230;label=54;break;
 case 53: 
 var $233=0;label=54;break;
 case 54: 
 var $233;
 var $234=$5;
 var $235=$234;
 HEAP32[(($235)>>2)]=$233;
 label=72;break;
 case 55: 
 var $237=$re;
 var $238=(($237+12)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=$239&64;
 var $241=($240|0)!=0;
 var $242=($241&1);
 var $243=$5;
 var $244=$243;
 HEAP32[(($244)>>2)]=$242;
 label=72;break;
 case 56: 
 var $246=$re;
 var $247=(($246+36)|0);
 var $248=HEAP16[(($247)>>1)];
 var $249=($248&65535);
 var $250=$5;
 var $251=$250;
 HEAP32[(($251)>>2)]=$249;
 label=72;break;
 case 57: 
 var $253=$re;
 var $254=(($253+38)|0);
 var $255=HEAP16[(($254)>>1)];
 var $256=($255&65535);
 var $257=$5;
 var $258=$257;
 HEAP32[(($258)>>2)]=$256;
 label=72;break;
 case 58: 
 var $260=$re;
 var $261=$260;
 var $262=$re;
 var $263=(($262+34)|0);
 var $264=HEAP16[(($263)>>1)];
 var $265=($264&65535);
 var $266=(($261+$265)|0);
 var $267=$5;
 var $268=$267;
 HEAP32[(($268)>>2)]=$266;
 label=72;break;
 case 59: 
 var $270=$5;
 var $271=$270;
 HEAP32[(($271)>>2)]=5672;
 label=72;break;
 case 60: 
 var $273=$re;
 var $274=(($273+12)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=$275&512;
 var $277=($276|0)==0;
 var $278=($277&1);
 var $279=$5;
 var $280=$279;
 HEAP32[(($280)>>2)]=$278;
 label=72;break;
 case 61: 
 var $282=$re;
 var $283=(($282+12)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=$284&1024;
 var $286=($285|0)!=0;
 var $287=($286&1);
 var $288=$5;
 var $289=$288;
 HEAP32[(($289)>>2)]=$287;
 label=72;break;
 case 62: 
 var $291=$re;
 var $292=(($291+12)|0);
 var $293=HEAP32[(($292)>>2)];
 var $294=$293&2048;
 var $295=($294|0)!=0;
 var $296=($295&1);
 var $297=$5;
 var $298=$297;
 HEAP32[(($298)>>2)]=$296;
 label=72;break;
 case 63: 
 var $300=$re;
 var $301=(($300+28)|0);
 var $302=HEAP16[(($301)>>1)];
 var $303=($302&65535);
 var $304=$5;
 var $305=$304;
 HEAP32[(($305)>>2)]=$303;
 label=72;break;
 case 64: 
 var $307=$re;
 var $308=(($307+12)|0);
 var $309=HEAP32[(($308)>>2)];
 var $310=$309&8192;
 var $311=($310|0)==0;
 if($311){label=65;break;}else{label=66;break;}
 case 65: 
 $1=-33;
 label=73;break;
 case 66: 
 var $314=$re;
 var $315=(($314+16)|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=$5;
 var $318=$317;
 HEAP32[(($318)>>2)]=$316;
 label=72;break;
 case 67: 
 var $320=$re;
 var $321=(($320+12)|0);
 var $322=HEAP32[(($321)>>2)];
 var $323=$322&16384;
 var $324=($323|0)==0;
 if($324){label=68;break;}else{label=69;break;}
 case 68: 
 $1=-33;
 label=73;break;
 case 69: 
 var $327=$re;
 var $328=(($327+20)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=$5;
 var $331=$330;
 HEAP32[(($331)>>2)]=$329;
 label=72;break;
 case 70: 
 var $333=$re;
 var $334=(($333+12)|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=$335&32768;
 var $337=($336|0)!=0;
 var $338=($337&1);
 var $339=$5;
 var $340=$339;
 HEAP32[(($340)>>2)]=$338;
 label=72;break;
 case 71: 
 $1=-3;
 label=73;break;
 case 72: 
 $1=0;
 label=73;break;
 case 73: 
 var $344=$1;
 STACKTOP=sp;return $344;
  default: assert(0, "bad label: " + label);
 }
}
function _malloc($bytes){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((6968)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((7008+($18<<2))|0);
 var $20=$19;
 var $_sum111=((($18)+(2))|0);
 var $21=((7008+($_sum111<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((6968)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((6984)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum113114=$40|4;
 var $44=(($43+$_sum113114)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=341;break;
 case 12: 
 var $50=HEAP32[((6976)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=160;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((7008+($83<<2))|0);
 var $85=$84;
 var $_sum104=((($83)+(2))|0);
 var $86=((7008+($_sum104<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((6968)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((6984)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum106107=$8|4;
 var $113=(($109+$_sum106107)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((6976)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((6988)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((7008+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((6968)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((6968)>>2)]=$130;
 var $_sum109_pre=((($122)+(2))|0);
 var $_pre=((7008+($_sum109_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum110=((($122)+(2))|0);
 var $132=((7008+($_sum110<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((6984)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((6976)>>2)]=$106;
 HEAP32[((6988)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=341;break;
 case 27: 
 var $145=HEAP32[((6972)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=160;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((7272+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((6984)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((7272+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=HEAP32[(($242)>>2)];
 var $249=1<<$248;
 var $250=$249^-1;
 var $251=HEAP32[((6972)>>2)];
 var $252=$251&$250;
 HEAP32[((6972)>>2)]=$252;
 label=67;break;
 case 51: 
 var $254=$201;
 var $255=HEAP32[((6984)>>2)];
 var $256=($254>>>0)<($255>>>0);
 if($256){label=55;break;}else{label=52;break;}
 case 52: 
 var $258=(($201+16)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($259|0)==($v_0_i|0);
 if($260){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($258)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $263=(($201+20)|0);
 HEAP32[(($263)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $266=($R_1_i|0)==0;
 if($266){label=67;break;}else{label=57;break;}
 case 57: 
 var $268=$R_1_i;
 var $269=HEAP32[((6984)>>2)];
 var $270=($268>>>0)<($269>>>0);
 if($270){label=66;break;}else{label=58;break;}
 case 58: 
 var $272=(($R_1_i+24)|0);
 HEAP32[(($272)>>2)]=$201;
 var $273=(($v_0_i+16)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==0;
 if($275){label=62;break;}else{label=59;break;}
 case 59: 
 var $277=$274;
 var $278=HEAP32[((6984)>>2)];
 var $279=($277>>>0)<($278>>>0);
 if($279){label=61;break;}else{label=60;break;}
 case 60: 
 var $281=(($R_1_i+16)|0);
 HEAP32[(($281)>>2)]=$274;
 var $282=(($274+24)|0);
 HEAP32[(($282)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $285=(($v_0_i+20)|0);
 var $286=HEAP32[(($285)>>2)];
 var $287=($286|0)==0;
 if($287){label=67;break;}else{label=63;break;}
 case 63: 
 var $289=$286;
 var $290=HEAP32[((6984)>>2)];
 var $291=($289>>>0)<($290>>>0);
 if($291){label=65;break;}else{label=64;break;}
 case 64: 
 var $293=(($R_1_i+20)|0);
 HEAP32[(($293)>>2)]=$286;
 var $294=(($286+24)|0);
 HEAP32[(($294)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $298=($rsize_0_i>>>0)<16;
 if($298){label=68;break;}else{label=69;break;}
 case 68: 
 var $300=((($rsize_0_i)+($8))|0);
 var $301=$300|3;
 var $302=(($v_0_i+4)|0);
 HEAP32[(($302)>>2)]=$301;
 var $_sum4_i=((($300)+(4))|0);
 var $303=(($192+$_sum4_i)|0);
 var $304=$303;
 var $305=HEAP32[(($304)>>2)];
 var $306=$305|1;
 HEAP32[(($304)>>2)]=$306;
 label=77;break;
 case 69: 
 var $308=$8|3;
 var $309=(($v_0_i+4)|0);
 HEAP32[(($309)>>2)]=$308;
 var $310=$rsize_0_i|1;
 var $_sum_i137=$8|4;
 var $311=(($192+$_sum_i137)|0);
 var $312=$311;
 HEAP32[(($312)>>2)]=$310;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $313=(($192+$_sum1_i)|0);
 var $314=$313;
 HEAP32[(($314)>>2)]=$rsize_0_i;
 var $315=HEAP32[((6976)>>2)];
 var $316=($315|0)==0;
 if($316){label=75;break;}else{label=70;break;}
 case 70: 
 var $318=HEAP32[((6988)>>2)];
 var $319=$315>>>3;
 var $320=$319<<1;
 var $321=((7008+($320<<2))|0);
 var $322=$321;
 var $323=HEAP32[((6968)>>2)];
 var $324=1<<$319;
 var $325=$323&$324;
 var $326=($325|0)==0;
 if($326){label=71;break;}else{label=72;break;}
 case 71: 
 var $328=$323|$324;
 HEAP32[((6968)>>2)]=$328;
 var $_sum2_pre_i=((($320)+(2))|0);
 var $_pre_i=((7008+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$322;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($320)+(2))|0);
 var $330=((7008+($_sum3_i<<2))|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=$331;
 var $333=HEAP32[((6984)>>2)];
 var $334=($332>>>0)<($333>>>0);
 if($334){label=73;break;}else{var $F1_0_i=$331;var $_pre_phi_i=$330;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$318;
 var $337=(($F1_0_i+12)|0);
 HEAP32[(($337)>>2)]=$318;
 var $338=(($318+8)|0);
 HEAP32[(($338)>>2)]=$F1_0_i;
 var $339=(($318+12)|0);
 HEAP32[(($339)>>2)]=$322;
 label=75;break;
 case 75: 
 HEAP32[((6976)>>2)]=$rsize_0_i;
 HEAP32[((6988)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $342=(($v_0_i+8)|0);
 var $343=$342;
 var $344=($342|0)==0;
 if($344){var $nb_0=$8;label=160;break;}else{var $mem_0=$343;label=341;break;}
 case 78: 
 var $346=($bytes>>>0)>4294967231;
 if($346){var $nb_0=-1;label=160;break;}else{label=79;break;}
 case 79: 
 var $348=((($bytes)+(11))|0);
 var $349=$348&-8;
 var $350=HEAP32[((6972)>>2)];
 var $351=($350|0)==0;
 if($351){var $nb_0=$349;label=160;break;}else{label=80;break;}
 case 80: 
 var $353=(((-$349))|0);
 var $354=$348>>>8;
 var $355=($354|0)==0;
 if($355){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $357=($349>>>0)>16777215;
 if($357){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $359=((($354)+(1048320))|0);
 var $360=$359>>>16;
 var $361=$360&8;
 var $362=$354<<$361;
 var $363=((($362)+(520192))|0);
 var $364=$363>>>16;
 var $365=$364&4;
 var $366=$365|$361;
 var $367=$362<<$365;
 var $368=((($367)+(245760))|0);
 var $369=$368>>>16;
 var $370=$369&2;
 var $371=$366|$370;
 var $372=(((14)-($371))|0);
 var $373=$367<<$370;
 var $374=$373>>>15;
 var $375=((($372)+($374))|0);
 var $376=$375<<1;
 var $377=((($375)+(7))|0);
 var $378=$349>>>($377>>>0);
 var $379=$378&1;
 var $380=$379|$376;
 var $idx_0_i=$380;label=83;break;
 case 83: 
 var $idx_0_i;
 var $382=((7272+($idx_0_i<<2))|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=($383|0)==0;
 if($384){var $v_2_i=0;var $rsize_2_i=$353;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $386=($idx_0_i|0)==31;
 if($386){var $391=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $388=$idx_0_i>>>1;
 var $389=(((25)-($388))|0);
 var $391=$389;label=86;break;
 case 86: 
 var $391;
 var $392=$349<<$391;
 var $v_0_i118=0;var $rsize_0_i117=$353;var $t_0_i116=$383;var $sizebits_0_i=$392;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i116;
 var $rsize_0_i117;
 var $v_0_i118;
 var $394=(($t_0_i116+4)|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=$395&-8;
 var $397=((($396)-($349))|0);
 var $398=($397>>>0)<($rsize_0_i117>>>0);
 if($398){label=88;break;}else{var $v_1_i=$v_0_i118;var $rsize_1_i=$rsize_0_i117;label=89;break;}
 case 88: 
 var $400=($396|0)==($349|0);
 if($400){var $v_2_i=$t_0_i116;var $rsize_2_i=$397;var $t_1_i=$t_0_i116;label=90;break;}else{var $v_1_i=$t_0_i116;var $rsize_1_i=$397;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $402=(($t_0_i116+20)|0);
 var $403=HEAP32[(($402)>>2)];
 var $404=$sizebits_0_i>>>31;
 var $405=(($t_0_i116+16+($404<<2))|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=($403|0)==0;
 var $408=($403|0)==($406|0);
 var $or_cond_i=$407|$408;
 var $rst_1_i=($or_cond_i?$rst_0_i:$403);
 var $409=($406|0)==0;
 var $410=$sizebits_0_i<<1;
 if($409){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i118=$v_1_i;var $rsize_0_i117=$rsize_1_i;var $t_0_i116=$406;var $sizebits_0_i=$410;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $411=($t_1_i|0)==0;
 var $412=($v_2_i|0)==0;
 var $or_cond21_i=$411&$412;
 if($or_cond21_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $414=2<<$idx_0_i;
 var $415=(((-$414))|0);
 var $416=$414|$415;
 var $417=$350&$416;
 var $418=($417|0)==0;
 if($418){var $nb_0=$349;label=160;break;}else{label=92;break;}
 case 92: 
 var $420=(((-$417))|0);
 var $421=$417&$420;
 var $422=((($421)-(1))|0);
 var $423=$422>>>12;
 var $424=$423&16;
 var $425=$422>>>($424>>>0);
 var $426=$425>>>5;
 var $427=$426&8;
 var $428=$427|$424;
 var $429=$425>>>($427>>>0);
 var $430=$429>>>2;
 var $431=$430&4;
 var $432=$428|$431;
 var $433=$429>>>($431>>>0);
 var $434=$433>>>1;
 var $435=$434&2;
 var $436=$432|$435;
 var $437=$433>>>($435>>>0);
 var $438=$437>>>1;
 var $439=$438&1;
 var $440=$436|$439;
 var $441=$437>>>($439>>>0);
 var $442=((($440)+($441))|0);
 var $443=((7272+($442<<2))|0);
 var $444=HEAP32[(($443)>>2)];
 var $t_2_ph_i=$444;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $445=($t_2_ph_i|0)==0;
 if($445){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_228_i=$t_2_ph_i;var $rsize_329_i=$rsize_2_i;var $v_330_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_330_i;
 var $rsize_329_i;
 var $t_228_i;
 var $446=(($t_228_i+4)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=$447&-8;
 var $449=((($448)-($349))|0);
 var $450=($449>>>0)<($rsize_329_i>>>0);
 var $_rsize_3_i=($450?$449:$rsize_329_i);
 var $t_2_v_3_i=($450?$t_228_i:$v_330_i);
 var $451=(($t_228_i+16)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=($452|0)==0;
 if($453){label=95;break;}else{var $t_228_i=$452;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $454=(($t_228_i+20)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=($455|0)==0;
 if($456){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_228_i=$455;var $rsize_329_i=$_rsize_3_i;var $v_330_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $457=($v_3_lcssa_i|0)==0;
 if($457){var $nb_0=$349;label=160;break;}else{label=97;break;}
 case 97: 
 var $459=HEAP32[((6976)>>2)];
 var $460=((($459)-($349))|0);
 var $461=($rsize_3_lcssa_i>>>0)<($460>>>0);
 if($461){label=98;break;}else{var $nb_0=$349;label=160;break;}
 case 98: 
 var $463=$v_3_lcssa_i;
 var $464=HEAP32[((6984)>>2)];
 var $465=($463>>>0)<($464>>>0);
 if($465){label=158;break;}else{label=99;break;}
 case 99: 
 var $467=(($463+$349)|0);
 var $468=$467;
 var $469=($463>>>0)<($467>>>0);
 if($469){label=100;break;}else{label=158;break;}
 case 100: 
 var $471=(($v_3_lcssa_i+24)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=(($v_3_lcssa_i+12)|0);
 var $474=HEAP32[(($473)>>2)];
 var $475=($474|0)==($v_3_lcssa_i|0);
 if($475){label=106;break;}else{label=101;break;}
 case 101: 
 var $477=(($v_3_lcssa_i+8)|0);
 var $478=HEAP32[(($477)>>2)];
 var $479=$478;
 var $480=($479>>>0)<($464>>>0);
 if($480){label=105;break;}else{label=102;break;}
 case 102: 
 var $482=(($478+12)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=($483|0)==($v_3_lcssa_i|0);
 if($484){label=103;break;}else{label=105;break;}
 case 103: 
 var $486=(($474+8)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=($487|0)==($v_3_lcssa_i|0);
 if($488){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($482)>>2)]=$474;
 HEAP32[(($486)>>2)]=$478;
 var $R_1_i122=$474;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $491=(($v_3_lcssa_i+20)|0);
 var $492=HEAP32[(($491)>>2)];
 var $493=($492|0)==0;
 if($493){label=107;break;}else{var $R_0_i120=$492;var $RP_0_i119=$491;label=108;break;}
 case 107: 
 var $495=(($v_3_lcssa_i+16)|0);
 var $496=HEAP32[(($495)>>2)];
 var $497=($496|0)==0;
 if($497){var $R_1_i122=0;label=113;break;}else{var $R_0_i120=$496;var $RP_0_i119=$495;label=108;break;}
 case 108: 
 var $RP_0_i119;
 var $R_0_i120;
 var $498=(($R_0_i120+20)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=($499|0)==0;
 if($500){label=109;break;}else{var $R_0_i120=$499;var $RP_0_i119=$498;label=108;break;}
 case 109: 
 var $502=(($R_0_i120+16)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=($503|0)==0;
 if($504){label=110;break;}else{var $R_0_i120=$503;var $RP_0_i119=$502;label=108;break;}
 case 110: 
 var $506=$RP_0_i119;
 var $507=($506>>>0)<($464>>>0);
 if($507){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i119)>>2)]=0;
 var $R_1_i122=$R_0_i120;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i122;
 var $511=($472|0)==0;
 if($511){label=133;break;}else{label=114;break;}
 case 114: 
 var $513=(($v_3_lcssa_i+28)|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=((7272+($514<<2))|0);
 var $516=HEAP32[(($515)>>2)];
 var $517=($v_3_lcssa_i|0)==($516|0);
 if($517){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($515)>>2)]=$R_1_i122;
 var $cond_i123=($R_1_i122|0)==0;
 if($cond_i123){label=116;break;}else{label=123;break;}
 case 116: 
 var $519=HEAP32[(($513)>>2)];
 var $520=1<<$519;
 var $521=$520^-1;
 var $522=HEAP32[((6972)>>2)];
 var $523=$522&$521;
 HEAP32[((6972)>>2)]=$523;
 label=133;break;
 case 117: 
 var $525=$472;
 var $526=HEAP32[((6984)>>2)];
 var $527=($525>>>0)<($526>>>0);
 if($527){label=121;break;}else{label=118;break;}
 case 118: 
 var $529=(($472+16)|0);
 var $530=HEAP32[(($529)>>2)];
 var $531=($530|0)==($v_3_lcssa_i|0);
 if($531){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($529)>>2)]=$R_1_i122;
 label=122;break;
 case 120: 
 var $534=(($472+20)|0);
 HEAP32[(($534)>>2)]=$R_1_i122;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $537=($R_1_i122|0)==0;
 if($537){label=133;break;}else{label=123;break;}
 case 123: 
 var $539=$R_1_i122;
 var $540=HEAP32[((6984)>>2)];
 var $541=($539>>>0)<($540>>>0);
 if($541){label=132;break;}else{label=124;break;}
 case 124: 
 var $543=(($R_1_i122+24)|0);
 HEAP32[(($543)>>2)]=$472;
 var $544=(($v_3_lcssa_i+16)|0);
 var $545=HEAP32[(($544)>>2)];
 var $546=($545|0)==0;
 if($546){label=128;break;}else{label=125;break;}
 case 125: 
 var $548=$545;
 var $549=HEAP32[((6984)>>2)];
 var $550=($548>>>0)<($549>>>0);
 if($550){label=127;break;}else{label=126;break;}
 case 126: 
 var $552=(($R_1_i122+16)|0);
 HEAP32[(($552)>>2)]=$545;
 var $553=(($545+24)|0);
 HEAP32[(($553)>>2)]=$R_1_i122;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $556=(($v_3_lcssa_i+20)|0);
 var $557=HEAP32[(($556)>>2)];
 var $558=($557|0)==0;
 if($558){label=133;break;}else{label=129;break;}
 case 129: 
 var $560=$557;
 var $561=HEAP32[((6984)>>2)];
 var $562=($560>>>0)<($561>>>0);
 if($562){label=131;break;}else{label=130;break;}
 case 130: 
 var $564=(($R_1_i122+20)|0);
 HEAP32[(($564)>>2)]=$557;
 var $565=(($557+24)|0);
 HEAP32[(($565)>>2)]=$R_1_i122;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $569=($rsize_3_lcssa_i>>>0)<16;
 if($569){label=134;break;}else{label=135;break;}
 case 134: 
 var $571=((($rsize_3_lcssa_i)+($349))|0);
 var $572=$571|3;
 var $573=(($v_3_lcssa_i+4)|0);
 HEAP32[(($573)>>2)]=$572;
 var $_sum19_i=((($571)+(4))|0);
 var $574=(($463+$_sum19_i)|0);
 var $575=$574;
 var $576=HEAP32[(($575)>>2)];
 var $577=$576|1;
 HEAP32[(($575)>>2)]=$577;
 label=159;break;
 case 135: 
 var $579=$349|3;
 var $580=(($v_3_lcssa_i+4)|0);
 HEAP32[(($580)>>2)]=$579;
 var $581=$rsize_3_lcssa_i|1;
 var $_sum_i125136=$349|4;
 var $582=(($463+$_sum_i125136)|0);
 var $583=$582;
 HEAP32[(($583)>>2)]=$581;
 var $_sum1_i126=((($rsize_3_lcssa_i)+($349))|0);
 var $584=(($463+$_sum1_i126)|0);
 var $585=$584;
 HEAP32[(($585)>>2)]=$rsize_3_lcssa_i;
 var $586=$rsize_3_lcssa_i>>>3;
 var $587=($rsize_3_lcssa_i>>>0)<256;
 if($587){label=136;break;}else{label=141;break;}
 case 136: 
 var $589=$586<<1;
 var $590=((7008+($589<<2))|0);
 var $591=$590;
 var $592=HEAP32[((6968)>>2)];
 var $593=1<<$586;
 var $594=$592&$593;
 var $595=($594|0)==0;
 if($595){label=137;break;}else{label=138;break;}
 case 137: 
 var $597=$592|$593;
 HEAP32[((6968)>>2)]=$597;
 var $_sum15_pre_i=((($589)+(2))|0);
 var $_pre_i127=((7008+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$591;var $_pre_phi_i128=$_pre_i127;label=140;break;
 case 138: 
 var $_sum18_i=((($589)+(2))|0);
 var $599=((7008+($_sum18_i<<2))|0);
 var $600=HEAP32[(($599)>>2)];
 var $601=$600;
 var $602=HEAP32[((6984)>>2)];
 var $603=($601>>>0)<($602>>>0);
 if($603){label=139;break;}else{var $F5_0_i=$600;var $_pre_phi_i128=$599;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i128;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i128)>>2)]=$468;
 var $606=(($F5_0_i+12)|0);
 HEAP32[(($606)>>2)]=$468;
 var $_sum16_i=((($349)+(8))|0);
 var $607=(($463+$_sum16_i)|0);
 var $608=$607;
 HEAP32[(($608)>>2)]=$F5_0_i;
 var $_sum17_i=((($349)+(12))|0);
 var $609=(($463+$_sum17_i)|0);
 var $610=$609;
 HEAP32[(($610)>>2)]=$591;
 label=159;break;
 case 141: 
 var $612=$467;
 var $613=$rsize_3_lcssa_i>>>8;
 var $614=($613|0)==0;
 if($614){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $616=($rsize_3_lcssa_i>>>0)>16777215;
 if($616){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $618=((($613)+(1048320))|0);
 var $619=$618>>>16;
 var $620=$619&8;
 var $621=$613<<$620;
 var $622=((($621)+(520192))|0);
 var $623=$622>>>16;
 var $624=$623&4;
 var $625=$624|$620;
 var $626=$621<<$624;
 var $627=((($626)+(245760))|0);
 var $628=$627>>>16;
 var $629=$628&2;
 var $630=$625|$629;
 var $631=(((14)-($630))|0);
 var $632=$626<<$629;
 var $633=$632>>>15;
 var $634=((($631)+($633))|0);
 var $635=$634<<1;
 var $636=((($634)+(7))|0);
 var $637=$rsize_3_lcssa_i>>>($636>>>0);
 var $638=$637&1;
 var $639=$638|$635;
 var $I7_0_i=$639;label=144;break;
 case 144: 
 var $I7_0_i;
 var $641=((7272+($I7_0_i<<2))|0);
 var $_sum2_i=((($349)+(28))|0);
 var $642=(($463+$_sum2_i)|0);
 var $643=$642;
 HEAP32[(($643)>>2)]=$I7_0_i;
 var $_sum3_i129=((($349)+(16))|0);
 var $644=(($463+$_sum3_i129)|0);
 var $_sum4_i130=((($349)+(20))|0);
 var $645=(($463+$_sum4_i130)|0);
 var $646=$645;
 HEAP32[(($646)>>2)]=0;
 var $647=$644;
 HEAP32[(($647)>>2)]=0;
 var $648=HEAP32[((6972)>>2)];
 var $649=1<<$I7_0_i;
 var $650=$648&$649;
 var $651=($650|0)==0;
 if($651){label=145;break;}else{label=146;break;}
 case 145: 
 var $653=$648|$649;
 HEAP32[((6972)>>2)]=$653;
 HEAP32[(($641)>>2)]=$612;
 var $654=$641;
 var $_sum5_i=((($349)+(24))|0);
 var $655=(($463+$_sum5_i)|0);
 var $656=$655;
 HEAP32[(($656)>>2)]=$654;
 var $_sum6_i=((($349)+(12))|0);
 var $657=(($463+$_sum6_i)|0);
 var $658=$657;
 HEAP32[(($658)>>2)]=$612;
 var $_sum7_i=((($349)+(8))|0);
 var $659=(($463+$_sum7_i)|0);
 var $660=$659;
 HEAP32[(($660)>>2)]=$612;
 label=159;break;
 case 146: 
 var $662=HEAP32[(($641)>>2)];
 var $663=($I7_0_i|0)==31;
 if($663){var $668=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $665=$I7_0_i>>>1;
 var $666=(((25)-($665))|0);
 var $668=$666;label=148;break;
 case 148: 
 var $668;
 var $669=$rsize_3_lcssa_i<<$668;
 var $K12_0_i=$669;var $T_0_i=$662;label=149;break;
 case 149: 
 var $T_0_i;
 var $K12_0_i;
 var $671=(($T_0_i+4)|0);
 var $672=HEAP32[(($671)>>2)];
 var $673=$672&-8;
 var $674=($673|0)==($rsize_3_lcssa_i|0);
 if($674){label=154;break;}else{label=150;break;}
 case 150: 
 var $676=$K12_0_i>>>31;
 var $677=(($T_0_i+16+($676<<2))|0);
 var $678=HEAP32[(($677)>>2)];
 var $679=($678|0)==0;
 var $680=$K12_0_i<<1;
 if($679){label=151;break;}else{var $K12_0_i=$680;var $T_0_i=$678;label=149;break;}
 case 151: 
 var $682=$677;
 var $683=HEAP32[((6984)>>2)];
 var $684=($682>>>0)<($683>>>0);
 if($684){label=153;break;}else{label=152;break;}
 case 152: 
 HEAP32[(($677)>>2)]=$612;
 var $_sum12_i=((($349)+(24))|0);
 var $686=(($463+$_sum12_i)|0);
 var $687=$686;
 HEAP32[(($687)>>2)]=$T_0_i;
 var $_sum13_i=((($349)+(12))|0);
 var $688=(($463+$_sum13_i)|0);
 var $689=$688;
 HEAP32[(($689)>>2)]=$612;
 var $_sum14_i=((($349)+(8))|0);
 var $690=(($463+$_sum14_i)|0);
 var $691=$690;
 HEAP32[(($691)>>2)]=$612;
 label=159;break;
 case 153: 
 _abort();
 throw "Reached an unreachable!";
 case 154: 
 var $694=(($T_0_i+8)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=$T_0_i;
 var $697=HEAP32[((6984)>>2)];
 var $698=($696>>>0)<($697>>>0);
 if($698){label=157;break;}else{label=155;break;}
 case 155: 
 var $700=$695;
 var $701=($700>>>0)<($697>>>0);
 if($701){label=157;break;}else{label=156;break;}
 case 156: 
 var $703=(($695+12)|0);
 HEAP32[(($703)>>2)]=$612;
 HEAP32[(($694)>>2)]=$612;
 var $_sum9_i=((($349)+(8))|0);
 var $704=(($463+$_sum9_i)|0);
 var $705=$704;
 HEAP32[(($705)>>2)]=$695;
 var $_sum10_i=((($349)+(12))|0);
 var $706=(($463+$_sum10_i)|0);
 var $707=$706;
 HEAP32[(($707)>>2)]=$T_0_i;
 var $_sum11_i=((($349)+(24))|0);
 var $708=(($463+$_sum11_i)|0);
 var $709=$708;
 HEAP32[(($709)>>2)]=0;
 label=159;break;
 case 157: 
 _abort();
 throw "Reached an unreachable!";
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 var $711=(($v_3_lcssa_i+8)|0);
 var $712=$711;
 var $713=($711|0)==0;
 if($713){var $nb_0=$349;label=160;break;}else{var $mem_0=$712;label=341;break;}
 case 160: 
 var $nb_0;
 var $714=HEAP32[((6976)>>2)];
 var $715=($nb_0>>>0)>($714>>>0);
 if($715){label=165;break;}else{label=161;break;}
 case 161: 
 var $717=((($714)-($nb_0))|0);
 var $718=HEAP32[((6988)>>2)];
 var $719=($717>>>0)>15;
 if($719){label=162;break;}else{label=163;break;}
 case 162: 
 var $721=$718;
 var $722=(($721+$nb_0)|0);
 var $723=$722;
 HEAP32[((6988)>>2)]=$723;
 HEAP32[((6976)>>2)]=$717;
 var $724=$717|1;
 var $_sum102=((($nb_0)+(4))|0);
 var $725=(($721+$_sum102)|0);
 var $726=$725;
 HEAP32[(($726)>>2)]=$724;
 var $727=(($721+$714)|0);
 var $728=$727;
 HEAP32[(($728)>>2)]=$717;
 var $729=$nb_0|3;
 var $730=(($718+4)|0);
 HEAP32[(($730)>>2)]=$729;
 label=164;break;
 case 163: 
 HEAP32[((6976)>>2)]=0;
 HEAP32[((6988)>>2)]=0;
 var $732=$714|3;
 var $733=(($718+4)|0);
 HEAP32[(($733)>>2)]=$732;
 var $734=$718;
 var $_sum101=((($714)+(4))|0);
 var $735=(($734+$_sum101)|0);
 var $736=$735;
 var $737=HEAP32[(($736)>>2)];
 var $738=$737|1;
 HEAP32[(($736)>>2)]=$738;
 label=164;break;
 case 164: 
 var $740=(($718+8)|0);
 var $741=$740;
 var $mem_0=$741;label=341;break;
 case 165: 
 var $743=HEAP32[((6980)>>2)];
 var $744=($nb_0>>>0)<($743>>>0);
 if($744){label=166;break;}else{label=167;break;}
 case 166: 
 var $746=((($743)-($nb_0))|0);
 HEAP32[((6980)>>2)]=$746;
 var $747=HEAP32[((6992)>>2)];
 var $748=$747;
 var $749=(($748+$nb_0)|0);
 var $750=$749;
 HEAP32[((6992)>>2)]=$750;
 var $751=$746|1;
 var $_sum=((($nb_0)+(4))|0);
 var $752=(($748+$_sum)|0);
 var $753=$752;
 HEAP32[(($753)>>2)]=$751;
 var $754=$nb_0|3;
 var $755=(($747+4)|0);
 HEAP32[(($755)>>2)]=$754;
 var $756=(($747+8)|0);
 var $757=$756;
 var $mem_0=$757;label=341;break;
 case 167: 
 var $759=HEAP32[((6944)>>2)];
 var $760=($759|0)==0;
 if($760){label=168;break;}else{label=171;break;}
 case 168: 
 var $762=_sysconf(30);
 var $763=((($762)-(1))|0);
 var $764=$763&$762;
 var $765=($764|0)==0;
 if($765){label=170;break;}else{label=169;break;}
 case 169: 
 _abort();
 throw "Reached an unreachable!";
 case 170: 
 HEAP32[((6952)>>2)]=$762;
 HEAP32[((6948)>>2)]=$762;
 HEAP32[((6956)>>2)]=-1;
 HEAP32[((6960)>>2)]=-1;
 HEAP32[((6964)>>2)]=0;
 HEAP32[((7412)>>2)]=0;
 var $767=_time(0);
 var $768=$767&-16;
 var $769=$768^1431655768;
 HEAP32[((6944)>>2)]=$769;
 label=171;break;
 case 171: 
 var $771=((($nb_0)+(48))|0);
 var $772=HEAP32[((6952)>>2)];
 var $773=((($nb_0)+(47))|0);
 var $774=((($772)+($773))|0);
 var $775=(((-$772))|0);
 var $776=$774&$775;
 var $777=($776>>>0)>($nb_0>>>0);
 if($777){label=172;break;}else{var $mem_0=0;label=341;break;}
 case 172: 
 var $779=HEAP32[((7408)>>2)];
 var $780=($779|0)==0;
 if($780){label=174;break;}else{label=173;break;}
 case 173: 
 var $782=HEAP32[((7400)>>2)];
 var $783=((($782)+($776))|0);
 var $784=($783>>>0)<=($782>>>0);
 var $785=($783>>>0)>($779>>>0);
 var $or_cond1_i=$784|$785;
 if($or_cond1_i){var $mem_0=0;label=341;break;}else{label=174;break;}
 case 174: 
 var $787=HEAP32[((7412)>>2)];
 var $788=$787&4;
 var $789=($788|0)==0;
 if($789){label=175;break;}else{var $tsize_1_i=0;label=198;break;}
 case 175: 
 var $791=HEAP32[((6992)>>2)];
 var $792=($791|0)==0;
 if($792){label=181;break;}else{label=176;break;}
 case 176: 
 var $794=$791;
 var $sp_0_i_i=7416;label=177;break;
 case 177: 
 var $sp_0_i_i;
 var $796=(($sp_0_i_i)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=($797>>>0)>($794>>>0);
 if($798){label=179;break;}else{label=178;break;}
 case 178: 
 var $800=(($sp_0_i_i+4)|0);
 var $801=HEAP32[(($800)>>2)];
 var $802=(($797+$801)|0);
 var $803=($802>>>0)>($794>>>0);
 if($803){label=180;break;}else{label=179;break;}
 case 179: 
 var $805=(($sp_0_i_i+8)|0);
 var $806=HEAP32[(($805)>>2)];
 var $807=($806|0)==0;
 if($807){label=181;break;}else{var $sp_0_i_i=$806;label=177;break;}
 case 180: 
 var $808=($sp_0_i_i|0)==0;
 if($808){label=181;break;}else{label=188;break;}
 case 181: 
 var $809=_sbrk(0);
 var $810=($809|0)==-1;
 if($810){var $tsize_0303639_i=0;label=197;break;}else{label=182;break;}
 case 182: 
 var $812=$809;
 var $813=HEAP32[((6948)>>2)];
 var $814=((($813)-(1))|0);
 var $815=$814&$812;
 var $816=($815|0)==0;
 if($816){var $ssize_0_i=$776;label=184;break;}else{label=183;break;}
 case 183: 
 var $818=((($814)+($812))|0);
 var $819=(((-$813))|0);
 var $820=$818&$819;
 var $821=((($776)-($812))|0);
 var $822=((($821)+($820))|0);
 var $ssize_0_i=$822;label=184;break;
 case 184: 
 var $ssize_0_i;
 var $824=HEAP32[((7400)>>2)];
 var $825=((($824)+($ssize_0_i))|0);
 var $826=($ssize_0_i>>>0)>($nb_0>>>0);
 var $827=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i131=$826&$827;
 if($or_cond_i131){label=185;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 185: 
 var $829=HEAP32[((7408)>>2)];
 var $830=($829|0)==0;
 if($830){label=187;break;}else{label=186;break;}
 case 186: 
 var $832=($825>>>0)<=($824>>>0);
 var $833=($825>>>0)>($829>>>0);
 var $or_cond2_i=$832|$833;
 if($or_cond2_i){var $tsize_0303639_i=0;label=197;break;}else{label=187;break;}
 case 187: 
 var $835=_sbrk($ssize_0_i);
 var $836=($835|0)==($809|0);
 var $ssize_0__i=($836?$ssize_0_i:0);
 var $__i=($836?$809:-1);
 var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$835;var $ssize_1_i=$ssize_0_i;label=190;break;
 case 188: 
 var $838=HEAP32[((6980)>>2)];
 var $839=((($774)-($838))|0);
 var $840=$839&$775;
 var $841=($840>>>0)<2147483647;
 if($841){label=189;break;}else{var $tsize_0303639_i=0;label=197;break;}
 case 189: 
 var $843=_sbrk($840);
 var $844=HEAP32[(($796)>>2)];
 var $845=HEAP32[(($800)>>2)];
 var $846=(($844+$845)|0);
 var $847=($843|0)==($846|0);
 var $_3_i=($847?$840:0);
 var $_4_i=($847?$843:-1);
 var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$843;var $ssize_1_i=$840;label=190;break;
 case 190: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $849=(((-$ssize_1_i))|0);
 var $850=($tbase_0_i|0)==-1;
 if($850){label=191;break;}else{var $tsize_244_i=$tsize_0_i;var $tbase_245_i=$tbase_0_i;label=201;break;}
 case 191: 
 var $852=($br_0_i|0)!=-1;
 var $853=($ssize_1_i>>>0)<2147483647;
 var $or_cond5_i=$852&$853;
 var $854=($ssize_1_i>>>0)<($771>>>0);
 var $or_cond6_i=$or_cond5_i&$854;
 if($or_cond6_i){label=192;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 192: 
 var $856=HEAP32[((6952)>>2)];
 var $857=((($773)-($ssize_1_i))|0);
 var $858=((($857)+($856))|0);
 var $859=(((-$856))|0);
 var $860=$858&$859;
 var $861=($860>>>0)<2147483647;
 if($861){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=196;break;}
 case 193: 
 var $863=_sbrk($860);
 var $864=($863|0)==-1;
 if($864){label=195;break;}else{label=194;break;}
 case 194: 
 var $866=((($860)+($ssize_1_i))|0);
 var $ssize_2_i=$866;label=196;break;
 case 195: 
 var $868=_sbrk($849);
 var $tsize_0303639_i=$tsize_0_i;label=197;break;
 case 196: 
 var $ssize_2_i;
 var $870=($br_0_i|0)==-1;
 if($870){var $tsize_0303639_i=$tsize_0_i;label=197;break;}else{var $tsize_244_i=$ssize_2_i;var $tbase_245_i=$br_0_i;label=201;break;}
 case 197: 
 var $tsize_0303639_i;
 var $871=HEAP32[((7412)>>2)];
 var $872=$871|4;
 HEAP32[((7412)>>2)]=$872;
 var $tsize_1_i=$tsize_0303639_i;label=198;break;
 case 198: 
 var $tsize_1_i;
 var $874=($776>>>0)<2147483647;
 if($874){label=199;break;}else{label=340;break;}
 case 199: 
 var $876=_sbrk($776);
 var $877=_sbrk(0);
 var $notlhs_i=($876|0)!=-1;
 var $notrhs_i=($877|0)!=-1;
 var $or_cond8_not_i=$notrhs_i&$notlhs_i;
 var $878=($876>>>0)<($877>>>0);
 var $or_cond9_i=$or_cond8_not_i&$878;
 if($or_cond9_i){label=200;break;}else{label=340;break;}
 case 200: 
 var $879=$877;
 var $880=$876;
 var $881=((($879)-($880))|0);
 var $882=((($nb_0)+(40))|0);
 var $883=($881>>>0)>($882>>>0);
 var $_tsize_1_i=($883?$881:$tsize_1_i);
 var $_tbase_1_i=($883?$876:-1);
 var $884=($_tbase_1_i|0)==-1;
 if($884){label=340;break;}else{var $tsize_244_i=$_tsize_1_i;var $tbase_245_i=$_tbase_1_i;label=201;break;}
 case 201: 
 var $tbase_245_i;
 var $tsize_244_i;
 var $885=HEAP32[((7400)>>2)];
 var $886=((($885)+($tsize_244_i))|0);
 HEAP32[((7400)>>2)]=$886;
 var $887=HEAP32[((7404)>>2)];
 var $888=($886>>>0)>($887>>>0);
 if($888){label=202;break;}else{label=203;break;}
 case 202: 
 HEAP32[((7404)>>2)]=$886;
 label=203;break;
 case 203: 
 var $890=HEAP32[((6992)>>2)];
 var $891=($890|0)==0;
 if($891){label=204;break;}else{var $sp_067_i=7416;label=211;break;}
 case 204: 
 var $893=HEAP32[((6984)>>2)];
 var $894=($893|0)==0;
 var $895=($tbase_245_i>>>0)<($893>>>0);
 var $or_cond10_i=$894|$895;
 if($or_cond10_i){label=205;break;}else{label=206;break;}
 case 205: 
 HEAP32[((6984)>>2)]=$tbase_245_i;
 label=206;break;
 case 206: 
 HEAP32[((7416)>>2)]=$tbase_245_i;
 HEAP32[((7420)>>2)]=$tsize_244_i;
 HEAP32[((7428)>>2)]=0;
 var $897=HEAP32[((6944)>>2)];
 HEAP32[((7004)>>2)]=$897;
 HEAP32[((7000)>>2)]=-1;
 var $i_02_i_i=0;label=207;break;
 case 207: 
 var $i_02_i_i;
 var $899=$i_02_i_i<<1;
 var $900=((7008+($899<<2))|0);
 var $901=$900;
 var $_sum_i_i=((($899)+(3))|0);
 var $902=((7008+($_sum_i_i<<2))|0);
 HEAP32[(($902)>>2)]=$901;
 var $_sum1_i_i=((($899)+(2))|0);
 var $903=((7008+($_sum1_i_i<<2))|0);
 HEAP32[(($903)>>2)]=$901;
 var $904=((($i_02_i_i)+(1))|0);
 var $905=($904>>>0)<32;
 if($905){var $i_02_i_i=$904;label=207;break;}else{label=208;break;}
 case 208: 
 var $906=((($tsize_244_i)-(40))|0);
 var $907=(($tbase_245_i+8)|0);
 var $908=$907;
 var $909=$908&7;
 var $910=($909|0)==0;
 if($910){var $914=0;label=210;break;}else{label=209;break;}
 case 209: 
 var $912=(((-$908))|0);
 var $913=$912&7;
 var $914=$913;label=210;break;
 case 210: 
 var $914;
 var $915=(($tbase_245_i+$914)|0);
 var $916=$915;
 var $917=((($906)-($914))|0);
 HEAP32[((6992)>>2)]=$916;
 HEAP32[((6980)>>2)]=$917;
 var $918=$917|1;
 var $_sum_i14_i=((($914)+(4))|0);
 var $919=(($tbase_245_i+$_sum_i14_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=$918;
 var $_sum2_i_i=((($tsize_244_i)-(36))|0);
 var $921=(($tbase_245_i+$_sum2_i_i)|0);
 var $922=$921;
 HEAP32[(($922)>>2)]=40;
 var $923=HEAP32[((6960)>>2)];
 HEAP32[((6996)>>2)]=$923;
 label=338;break;
 case 211: 
 var $sp_067_i;
 var $924=(($sp_067_i)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($sp_067_i+4)|0);
 var $927=HEAP32[(($926)>>2)];
 var $928=(($925+$927)|0);
 var $929=($tbase_245_i|0)==($928|0);
 if($929){label=213;break;}else{label=212;break;}
 case 212: 
 var $931=(($sp_067_i+8)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=($932|0)==0;
 if($933){label=218;break;}else{var $sp_067_i=$932;label=211;break;}
 case 213: 
 var $934=(($sp_067_i+12)|0);
 var $935=HEAP32[(($934)>>2)];
 var $936=$935&8;
 var $937=($936|0)==0;
 if($937){label=214;break;}else{label=218;break;}
 case 214: 
 var $939=$890;
 var $940=($939>>>0)>=($925>>>0);
 var $941=($939>>>0)<($tbase_245_i>>>0);
 var $or_cond47_i=$940&$941;
 if($or_cond47_i){label=215;break;}else{label=218;break;}
 case 215: 
 var $943=((($927)+($tsize_244_i))|0);
 HEAP32[(($926)>>2)]=$943;
 var $944=HEAP32[((6992)>>2)];
 var $945=HEAP32[((6980)>>2)];
 var $946=((($945)+($tsize_244_i))|0);
 var $947=$944;
 var $948=(($944+8)|0);
 var $949=$948;
 var $950=$949&7;
 var $951=($950|0)==0;
 if($951){var $955=0;label=217;break;}else{label=216;break;}
 case 216: 
 var $953=(((-$949))|0);
 var $954=$953&7;
 var $955=$954;label=217;break;
 case 217: 
 var $955;
 var $956=(($947+$955)|0);
 var $957=$956;
 var $958=((($946)-($955))|0);
 HEAP32[((6992)>>2)]=$957;
 HEAP32[((6980)>>2)]=$958;
 var $959=$958|1;
 var $_sum_i18_i=((($955)+(4))|0);
 var $960=(($947+$_sum_i18_i)|0);
 var $961=$960;
 HEAP32[(($961)>>2)]=$959;
 var $_sum2_i19_i=((($946)+(4))|0);
 var $962=(($947+$_sum2_i19_i)|0);
 var $963=$962;
 HEAP32[(($963)>>2)]=40;
 var $964=HEAP32[((6960)>>2)];
 HEAP32[((6996)>>2)]=$964;
 label=338;break;
 case 218: 
 var $965=HEAP32[((6984)>>2)];
 var $966=($tbase_245_i>>>0)<($965>>>0);
 if($966){label=219;break;}else{label=220;break;}
 case 219: 
 HEAP32[((6984)>>2)]=$tbase_245_i;
 label=220;break;
 case 220: 
 var $968=(($tbase_245_i+$tsize_244_i)|0);
 var $sp_160_i=7416;label=221;break;
 case 221: 
 var $sp_160_i;
 var $970=(($sp_160_i)|0);
 var $971=HEAP32[(($970)>>2)];
 var $972=($971|0)==($968|0);
 if($972){label=223;break;}else{label=222;break;}
 case 222: 
 var $974=(($sp_160_i+8)|0);
 var $975=HEAP32[(($974)>>2)];
 var $976=($975|0)==0;
 if($976){label=304;break;}else{var $sp_160_i=$975;label=221;break;}
 case 223: 
 var $977=(($sp_160_i+12)|0);
 var $978=HEAP32[(($977)>>2)];
 var $979=$978&8;
 var $980=($979|0)==0;
 if($980){label=224;break;}else{label=304;break;}
 case 224: 
 HEAP32[(($970)>>2)]=$tbase_245_i;
 var $982=(($sp_160_i+4)|0);
 var $983=HEAP32[(($982)>>2)];
 var $984=((($983)+($tsize_244_i))|0);
 HEAP32[(($982)>>2)]=$984;
 var $985=(($tbase_245_i+8)|0);
 var $986=$985;
 var $987=$986&7;
 var $988=($987|0)==0;
 if($988){var $993=0;label=226;break;}else{label=225;break;}
 case 225: 
 var $990=(((-$986))|0);
 var $991=$990&7;
 var $993=$991;label=226;break;
 case 226: 
 var $993;
 var $994=(($tbase_245_i+$993)|0);
 var $_sum93_i=((($tsize_244_i)+(8))|0);
 var $995=(($tbase_245_i+$_sum93_i)|0);
 var $996=$995;
 var $997=$996&7;
 var $998=($997|0)==0;
 if($998){var $1003=0;label=228;break;}else{label=227;break;}
 case 227: 
 var $1000=(((-$996))|0);
 var $1001=$1000&7;
 var $1003=$1001;label=228;break;
 case 228: 
 var $1003;
 var $_sum94_i=((($1003)+($tsize_244_i))|0);
 var $1004=(($tbase_245_i+$_sum94_i)|0);
 var $1005=$1004;
 var $1006=$1004;
 var $1007=$994;
 var $1008=((($1006)-($1007))|0);
 var $_sum_i21_i=((($993)+($nb_0))|0);
 var $1009=(($tbase_245_i+$_sum_i21_i)|0);
 var $1010=$1009;
 var $1011=((($1008)-($nb_0))|0);
 var $1012=$nb_0|3;
 var $_sum1_i22_i=((($993)+(4))|0);
 var $1013=(($tbase_245_i+$_sum1_i22_i)|0);
 var $1014=$1013;
 HEAP32[(($1014)>>2)]=$1012;
 var $1015=HEAP32[((6992)>>2)];
 var $1016=($1005|0)==($1015|0);
 if($1016){label=229;break;}else{label=230;break;}
 case 229: 
 var $1018=HEAP32[((6980)>>2)];
 var $1019=((($1018)+($1011))|0);
 HEAP32[((6980)>>2)]=$1019;
 HEAP32[((6992)>>2)]=$1010;
 var $1020=$1019|1;
 var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
 var $1021=(($tbase_245_i+$_sum46_i_i)|0);
 var $1022=$1021;
 HEAP32[(($1022)>>2)]=$1020;
 label=303;break;
 case 230: 
 var $1024=HEAP32[((6988)>>2)];
 var $1025=($1005|0)==($1024|0);
 if($1025){label=231;break;}else{label=232;break;}
 case 231: 
 var $1027=HEAP32[((6976)>>2)];
 var $1028=((($1027)+($1011))|0);
 HEAP32[((6976)>>2)]=$1028;
 HEAP32[((6988)>>2)]=$1010;
 var $1029=$1028|1;
 var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
 var $1030=(($tbase_245_i+$_sum44_i_i)|0);
 var $1031=$1030;
 HEAP32[(($1031)>>2)]=$1029;
 var $_sum45_i_i=((($1028)+($_sum_i21_i))|0);
 var $1032=(($tbase_245_i+$_sum45_i_i)|0);
 var $1033=$1032;
 HEAP32[(($1033)>>2)]=$1028;
 label=303;break;
 case 232: 
 var $_sum2_i23_i=((($tsize_244_i)+(4))|0);
 var $_sum95_i=((($_sum2_i23_i)+($1003))|0);
 var $1035=(($tbase_245_i+$_sum95_i)|0);
 var $1036=$1035;
 var $1037=HEAP32[(($1036)>>2)];
 var $1038=$1037&3;
 var $1039=($1038|0)==1;
 if($1039){label=233;break;}else{var $oldfirst_0_i_i=$1005;var $qsize_0_i_i=$1011;label=280;break;}
 case 233: 
 var $1041=$1037&-8;
 var $1042=$1037>>>3;
 var $1043=($1037>>>0)<256;
 if($1043){label=234;break;}else{label=246;break;}
 case 234: 
 var $_sum3940_i_i=$1003|8;
 var $_sum105_i=((($_sum3940_i_i)+($tsize_244_i))|0);
 var $1045=(($tbase_245_i+$_sum105_i)|0);
 var $1046=$1045;
 var $1047=HEAP32[(($1046)>>2)];
 var $_sum41_i_i=((($tsize_244_i)+(12))|0);
 var $_sum106_i=((($_sum41_i_i)+($1003))|0);
 var $1048=(($tbase_245_i+$_sum106_i)|0);
 var $1049=$1048;
 var $1050=HEAP32[(($1049)>>2)];
 var $1051=$1042<<1;
 var $1052=((7008+($1051<<2))|0);
 var $1053=$1052;
 var $1054=($1047|0)==($1053|0);
 if($1054){label=237;break;}else{label=235;break;}
 case 235: 
 var $1056=$1047;
 var $1057=HEAP32[((6984)>>2)];
 var $1058=($1056>>>0)<($1057>>>0);
 if($1058){label=245;break;}else{label=236;break;}
 case 236: 
 var $1060=(($1047+12)|0);
 var $1061=HEAP32[(($1060)>>2)];
 var $1062=($1061|0)==($1005|0);
 if($1062){label=237;break;}else{label=245;break;}
 case 237: 
 var $1063=($1050|0)==($1047|0);
 if($1063){label=238;break;}else{label=239;break;}
 case 238: 
 var $1065=1<<$1042;
 var $1066=$1065^-1;
 var $1067=HEAP32[((6968)>>2)];
 var $1068=$1067&$1066;
 HEAP32[((6968)>>2)]=$1068;
 label=279;break;
 case 239: 
 var $1070=($1050|0)==($1053|0);
 if($1070){label=240;break;}else{label=241;break;}
 case 240: 
 var $_pre56_i_i=(($1050+8)|0);
 var $_pre_phi57_i_i=$_pre56_i_i;label=243;break;
 case 241: 
 var $1072=$1050;
 var $1073=HEAP32[((6984)>>2)];
 var $1074=($1072>>>0)<($1073>>>0);
 if($1074){label=244;break;}else{label=242;break;}
 case 242: 
 var $1076=(($1050+8)|0);
 var $1077=HEAP32[(($1076)>>2)];
 var $1078=($1077|0)==($1005|0);
 if($1078){var $_pre_phi57_i_i=$1076;label=243;break;}else{label=244;break;}
 case 243: 
 var $_pre_phi57_i_i;
 var $1079=(($1047+12)|0);
 HEAP32[(($1079)>>2)]=$1050;
 HEAP32[(($_pre_phi57_i_i)>>2)]=$1047;
 label=279;break;
 case 244: 
 _abort();
 throw "Reached an unreachable!";
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 var $1081=$1004;
 var $_sum34_i_i=$1003|24;
 var $_sum96_i=((($_sum34_i_i)+($tsize_244_i))|0);
 var $1082=(($tbase_245_i+$_sum96_i)|0);
 var $1083=$1082;
 var $1084=HEAP32[(($1083)>>2)];
 var $_sum5_i_i=((($tsize_244_i)+(12))|0);
 var $_sum97_i=((($_sum5_i_i)+($1003))|0);
 var $1085=(($tbase_245_i+$_sum97_i)|0);
 var $1086=$1085;
 var $1087=HEAP32[(($1086)>>2)];
 var $1088=($1087|0)==($1081|0);
 if($1088){label=252;break;}else{label=247;break;}
 case 247: 
 var $_sum3637_i_i=$1003|8;
 var $_sum98_i=((($_sum3637_i_i)+($tsize_244_i))|0);
 var $1090=(($tbase_245_i+$_sum98_i)|0);
 var $1091=$1090;
 var $1092=HEAP32[(($1091)>>2)];
 var $1093=$1092;
 var $1094=HEAP32[((6984)>>2)];
 var $1095=($1093>>>0)<($1094>>>0);
 if($1095){label=251;break;}else{label=248;break;}
 case 248: 
 var $1097=(($1092+12)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=($1098|0)==($1081|0);
 if($1099){label=249;break;}else{label=251;break;}
 case 249: 
 var $1101=(($1087+8)|0);
 var $1102=HEAP32[(($1101)>>2)];
 var $1103=($1102|0)==($1081|0);
 if($1103){label=250;break;}else{label=251;break;}
 case 250: 
 HEAP32[(($1097)>>2)]=$1087;
 HEAP32[(($1101)>>2)]=$1092;
 var $R_1_i_i=$1087;label=259;break;
 case 251: 
 _abort();
 throw "Reached an unreachable!";
 case 252: 
 var $_sum67_i_i=$1003|16;
 var $_sum103_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
 var $1106=(($tbase_245_i+$_sum103_i)|0);
 var $1107=$1106;
 var $1108=HEAP32[(($1107)>>2)];
 var $1109=($1108|0)==0;
 if($1109){label=253;break;}else{var $R_0_i_i=$1108;var $RP_0_i_i=$1107;label=254;break;}
 case 253: 
 var $_sum104_i=((($_sum67_i_i)+($tsize_244_i))|0);
 var $1111=(($tbase_245_i+$_sum104_i)|0);
 var $1112=$1111;
 var $1113=HEAP32[(($1112)>>2)];
 var $1114=($1113|0)==0;
 if($1114){var $R_1_i_i=0;label=259;break;}else{var $R_0_i_i=$1113;var $RP_0_i_i=$1112;label=254;break;}
 case 254: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1115=(($R_0_i_i+20)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1116|0)==0;
 if($1117){label=255;break;}else{var $R_0_i_i=$1116;var $RP_0_i_i=$1115;label=254;break;}
 case 255: 
 var $1119=(($R_0_i_i+16)|0);
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=($1120|0)==0;
 if($1121){label=256;break;}else{var $R_0_i_i=$1120;var $RP_0_i_i=$1119;label=254;break;}
 case 256: 
 var $1123=$RP_0_i_i;
 var $1124=HEAP32[((6984)>>2)];
 var $1125=($1123>>>0)<($1124>>>0);
 if($1125){label=258;break;}else{label=257;break;}
 case 257: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=259;break;
 case 258: 
 _abort();
 throw "Reached an unreachable!";
 case 259: 
 var $R_1_i_i;
 var $1129=($1084|0)==0;
 if($1129){label=279;break;}else{label=260;break;}
 case 260: 
 var $_sum31_i_i=((($tsize_244_i)+(28))|0);
 var $_sum99_i=((($_sum31_i_i)+($1003))|0);
 var $1131=(($tbase_245_i+$_sum99_i)|0);
 var $1132=$1131;
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=((7272+($1133<<2))|0);
 var $1135=HEAP32[(($1134)>>2)];
 var $1136=($1081|0)==($1135|0);
 if($1136){label=261;break;}else{label=263;break;}
 case 261: 
 HEAP32[(($1134)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=262;break;}else{label=269;break;}
 case 262: 
 var $1138=HEAP32[(($1132)>>2)];
 var $1139=1<<$1138;
 var $1140=$1139^-1;
 var $1141=HEAP32[((6972)>>2)];
 var $1142=$1141&$1140;
 HEAP32[((6972)>>2)]=$1142;
 label=279;break;
 case 263: 
 var $1144=$1084;
 var $1145=HEAP32[((6984)>>2)];
 var $1146=($1144>>>0)<($1145>>>0);
 if($1146){label=267;break;}else{label=264;break;}
 case 264: 
 var $1148=(($1084+16)|0);
 var $1149=HEAP32[(($1148)>>2)];
 var $1150=($1149|0)==($1081|0);
 if($1150){label=265;break;}else{label=266;break;}
 case 265: 
 HEAP32[(($1148)>>2)]=$R_1_i_i;
 label=268;break;
 case 266: 
 var $1153=(($1084+20)|0);
 HEAP32[(($1153)>>2)]=$R_1_i_i;
 label=268;break;
 case 267: 
 _abort();
 throw "Reached an unreachable!";
 case 268: 
 var $1156=($R_1_i_i|0)==0;
 if($1156){label=279;break;}else{label=269;break;}
 case 269: 
 var $1158=$R_1_i_i;
 var $1159=HEAP32[((6984)>>2)];
 var $1160=($1158>>>0)<($1159>>>0);
 if($1160){label=278;break;}else{label=270;break;}
 case 270: 
 var $1162=(($R_1_i_i+24)|0);
 HEAP32[(($1162)>>2)]=$1084;
 var $_sum3233_i_i=$1003|16;
 var $_sum100_i=((($_sum3233_i_i)+($tsize_244_i))|0);
 var $1163=(($tbase_245_i+$_sum100_i)|0);
 var $1164=$1163;
 var $1165=HEAP32[(($1164)>>2)];
 var $1166=($1165|0)==0;
 if($1166){label=274;break;}else{label=271;break;}
 case 271: 
 var $1168=$1165;
 var $1169=HEAP32[((6984)>>2)];
 var $1170=($1168>>>0)<($1169>>>0);
 if($1170){label=273;break;}else{label=272;break;}
 case 272: 
 var $1172=(($R_1_i_i+16)|0);
 HEAP32[(($1172)>>2)]=$1165;
 var $1173=(($1165+24)|0);
 HEAP32[(($1173)>>2)]=$R_1_i_i;
 label=274;break;
 case 273: 
 _abort();
 throw "Reached an unreachable!";
 case 274: 
 var $_sum101_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
 var $1176=(($tbase_245_i+$_sum101_i)|0);
 var $1177=$1176;
 var $1178=HEAP32[(($1177)>>2)];
 var $1179=($1178|0)==0;
 if($1179){label=279;break;}else{label=275;break;}
 case 275: 
 var $1181=$1178;
 var $1182=HEAP32[((6984)>>2)];
 var $1183=($1181>>>0)<($1182>>>0);
 if($1183){label=277;break;}else{label=276;break;}
 case 276: 
 var $1185=(($R_1_i_i+20)|0);
 HEAP32[(($1185)>>2)]=$1178;
 var $1186=(($1178+24)|0);
 HEAP32[(($1186)>>2)]=$R_1_i_i;
 label=279;break;
 case 277: 
 _abort();
 throw "Reached an unreachable!";
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 var $_sum9_i_i=$1041|$1003;
 var $_sum102_i=((($_sum9_i_i)+($tsize_244_i))|0);
 var $1190=(($tbase_245_i+$_sum102_i)|0);
 var $1191=$1190;
 var $1192=((($1041)+($1011))|0);
 var $oldfirst_0_i_i=$1191;var $qsize_0_i_i=$1192;label=280;break;
 case 280: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1194=(($oldfirst_0_i_i+4)|0);
 var $1195=HEAP32[(($1194)>>2)];
 var $1196=$1195&-2;
 HEAP32[(($1194)>>2)]=$1196;
 var $1197=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
 var $1198=(($tbase_245_i+$_sum10_i_i)|0);
 var $1199=$1198;
 HEAP32[(($1199)>>2)]=$1197;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
 var $1200=(($tbase_245_i+$_sum11_i_i)|0);
 var $1201=$1200;
 HEAP32[(($1201)>>2)]=$qsize_0_i_i;
 var $1202=$qsize_0_i_i>>>3;
 var $1203=($qsize_0_i_i>>>0)<256;
 if($1203){label=281;break;}else{label=286;break;}
 case 281: 
 var $1205=$1202<<1;
 var $1206=((7008+($1205<<2))|0);
 var $1207=$1206;
 var $1208=HEAP32[((6968)>>2)];
 var $1209=1<<$1202;
 var $1210=$1208&$1209;
 var $1211=($1210|0)==0;
 if($1211){label=282;break;}else{label=283;break;}
 case 282: 
 var $1213=$1208|$1209;
 HEAP32[((6968)>>2)]=$1213;
 var $_sum27_pre_i_i=((($1205)+(2))|0);
 var $_pre_i24_i=((7008+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1207;var $_pre_phi_i25_i=$_pre_i24_i;label=285;break;
 case 283: 
 var $_sum30_i_i=((($1205)+(2))|0);
 var $1215=((7008+($_sum30_i_i<<2))|0);
 var $1216=HEAP32[(($1215)>>2)];
 var $1217=$1216;
 var $1218=HEAP32[((6984)>>2)];
 var $1219=($1217>>>0)<($1218>>>0);
 if($1219){label=284;break;}else{var $F4_0_i_i=$1216;var $_pre_phi_i25_i=$1215;label=285;break;}
 case 284: 
 _abort();
 throw "Reached an unreachable!";
 case 285: 
 var $_pre_phi_i25_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i25_i)>>2)]=$1010;
 var $1222=(($F4_0_i_i+12)|0);
 HEAP32[(($1222)>>2)]=$1010;
 var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
 var $1223=(($tbase_245_i+$_sum28_i_i)|0);
 var $1224=$1223;
 HEAP32[(($1224)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
 var $1225=(($tbase_245_i+$_sum29_i_i)|0);
 var $1226=$1225;
 HEAP32[(($1226)>>2)]=$1207;
 label=303;break;
 case 286: 
 var $1228=$1009;
 var $1229=$qsize_0_i_i>>>8;
 var $1230=($1229|0)==0;
 if($1230){var $I7_0_i_i=0;label=289;break;}else{label=287;break;}
 case 287: 
 var $1232=($qsize_0_i_i>>>0)>16777215;
 if($1232){var $I7_0_i_i=31;label=289;break;}else{label=288;break;}
 case 288: 
 var $1234=((($1229)+(1048320))|0);
 var $1235=$1234>>>16;
 var $1236=$1235&8;
 var $1237=$1229<<$1236;
 var $1238=((($1237)+(520192))|0);
 var $1239=$1238>>>16;
 var $1240=$1239&4;
 var $1241=$1240|$1236;
 var $1242=$1237<<$1240;
 var $1243=((($1242)+(245760))|0);
 var $1244=$1243>>>16;
 var $1245=$1244&2;
 var $1246=$1241|$1245;
 var $1247=(((14)-($1246))|0);
 var $1248=$1242<<$1245;
 var $1249=$1248>>>15;
 var $1250=((($1247)+($1249))|0);
 var $1251=$1250<<1;
 var $1252=((($1250)+(7))|0);
 var $1253=$qsize_0_i_i>>>($1252>>>0);
 var $1254=$1253&1;
 var $1255=$1254|$1251;
 var $I7_0_i_i=$1255;label=289;break;
 case 289: 
 var $I7_0_i_i;
 var $1257=((7272+($I7_0_i_i<<2))|0);
 var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
 var $1258=(($tbase_245_i+$_sum12_i26_i)|0);
 var $1259=$1258;
 HEAP32[(($1259)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
 var $1260=(($tbase_245_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
 var $1261=(($tbase_245_i+$_sum14_i_i)|0);
 var $1262=$1261;
 HEAP32[(($1262)>>2)]=0;
 var $1263=$1260;
 HEAP32[(($1263)>>2)]=0;
 var $1264=HEAP32[((6972)>>2)];
 var $1265=1<<$I7_0_i_i;
 var $1266=$1264&$1265;
 var $1267=($1266|0)==0;
 if($1267){label=290;break;}else{label=291;break;}
 case 290: 
 var $1269=$1264|$1265;
 HEAP32[((6972)>>2)]=$1269;
 HEAP32[(($1257)>>2)]=$1228;
 var $1270=$1257;
 var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
 var $1271=(($tbase_245_i+$_sum15_i_i)|0);
 var $1272=$1271;
 HEAP32[(($1272)>>2)]=$1270;
 var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
 var $1273=(($tbase_245_i+$_sum16_i_i)|0);
 var $1274=$1273;
 HEAP32[(($1274)>>2)]=$1228;
 var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
 var $1275=(($tbase_245_i+$_sum17_i_i)|0);
 var $1276=$1275;
 HEAP32[(($1276)>>2)]=$1228;
 label=303;break;
 case 291: 
 var $1278=HEAP32[(($1257)>>2)];
 var $1279=($I7_0_i_i|0)==31;
 if($1279){var $1284=0;label=293;break;}else{label=292;break;}
 case 292: 
 var $1281=$I7_0_i_i>>>1;
 var $1282=(((25)-($1281))|0);
 var $1284=$1282;label=293;break;
 case 293: 
 var $1284;
 var $1285=$qsize_0_i_i<<$1284;
 var $K8_0_i_i=$1285;var $T_0_i27_i=$1278;label=294;break;
 case 294: 
 var $T_0_i27_i;
 var $K8_0_i_i;
 var $1287=(($T_0_i27_i+4)|0);
 var $1288=HEAP32[(($1287)>>2)];
 var $1289=$1288&-8;
 var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){label=299;break;}else{label=295;break;}
 case 295: 
 var $1292=$K8_0_i_i>>>31;
 var $1293=(($T_0_i27_i+16+($1292<<2))|0);
 var $1294=HEAP32[(($1293)>>2)];
 var $1295=($1294|0)==0;
 var $1296=$K8_0_i_i<<1;
 if($1295){label=296;break;}else{var $K8_0_i_i=$1296;var $T_0_i27_i=$1294;label=294;break;}
 case 296: 
 var $1298=$1293;
 var $1299=HEAP32[((6984)>>2)];
 var $1300=($1298>>>0)<($1299>>>0);
 if($1300){label=298;break;}else{label=297;break;}
 case 297: 
 HEAP32[(($1293)>>2)]=$1228;
 var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
 var $1302=(($tbase_245_i+$_sum24_i_i)|0);
 var $1303=$1302;
 HEAP32[(($1303)>>2)]=$T_0_i27_i;
 var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
 var $1304=(($tbase_245_i+$_sum25_i_i)|0);
 var $1305=$1304;
 HEAP32[(($1305)>>2)]=$1228;
 var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
 var $1306=(($tbase_245_i+$_sum26_i_i)|0);
 var $1307=$1306;
 HEAP32[(($1307)>>2)]=$1228;
 label=303;break;
 case 298: 
 _abort();
 throw "Reached an unreachable!";
 case 299: 
 var $1310=(($T_0_i27_i+8)|0);
 var $1311=HEAP32[(($1310)>>2)];
 var $1312=$T_0_i27_i;
 var $1313=HEAP32[((6984)>>2)];
 var $1314=($1312>>>0)<($1313>>>0);
 if($1314){label=302;break;}else{label=300;break;}
 case 300: 
 var $1316=$1311;
 var $1317=($1316>>>0)<($1313>>>0);
 if($1317){label=302;break;}else{label=301;break;}
 case 301: 
 var $1319=(($1311+12)|0);
 HEAP32[(($1319)>>2)]=$1228;
 HEAP32[(($1310)>>2)]=$1228;
 var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
 var $1320=(($tbase_245_i+$_sum21_i_i)|0);
 var $1321=$1320;
 HEAP32[(($1321)>>2)]=$1311;
 var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
 var $1322=(($tbase_245_i+$_sum22_i_i)|0);
 var $1323=$1322;
 HEAP32[(($1323)>>2)]=$T_0_i27_i;
 var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
 var $1324=(($tbase_245_i+$_sum23_i_i)|0);
 var $1325=$1324;
 HEAP32[(($1325)>>2)]=0;
 label=303;break;
 case 302: 
 _abort();
 throw "Reached an unreachable!";
 case 303: 
 var $_sum1819_i_i=$993|8;
 var $1326=(($tbase_245_i+$_sum1819_i_i)|0);
 var $mem_0=$1326;label=341;break;
 case 304: 
 var $1327=$890;
 var $sp_0_i_i_i=7416;label=305;break;
 case 305: 
 var $sp_0_i_i_i;
 var $1329=(($sp_0_i_i_i)|0);
 var $1330=HEAP32[(($1329)>>2)];
 var $1331=($1330>>>0)>($1327>>>0);
 if($1331){label=307;break;}else{label=306;break;}
 case 306: 
 var $1333=(($sp_0_i_i_i+4)|0);
 var $1334=HEAP32[(($1333)>>2)];
 var $1335=(($1330+$1334)|0);
 var $1336=($1335>>>0)>($1327>>>0);
 if($1336){label=308;break;}else{label=307;break;}
 case 307: 
 var $1338=(($sp_0_i_i_i+8)|0);
 var $1339=HEAP32[(($1338)>>2)];
 var $sp_0_i_i_i=$1339;label=305;break;
 case 308: 
 var $_sum_i15_i=((($1334)-(47))|0);
 var $_sum1_i16_i=((($1334)-(39))|0);
 var $1340=(($1330+$_sum1_i16_i)|0);
 var $1341=$1340;
 var $1342=$1341&7;
 var $1343=($1342|0)==0;
 if($1343){var $1348=0;label=310;break;}else{label=309;break;}
 case 309: 
 var $1345=(((-$1341))|0);
 var $1346=$1345&7;
 var $1348=$1346;label=310;break;
 case 310: 
 var $1348;
 var $_sum2_i17_i=((($_sum_i15_i)+($1348))|0);
 var $1349=(($1330+$_sum2_i17_i)|0);
 var $1350=(($890+16)|0);
 var $1351=$1350;
 var $1352=($1349>>>0)<($1351>>>0);
 var $1353=($1352?$1327:$1349);
 var $1354=(($1353+8)|0);
 var $1355=$1354;
 var $1356=((($tsize_244_i)-(40))|0);
 var $1357=(($tbase_245_i+8)|0);
 var $1358=$1357;
 var $1359=$1358&7;
 var $1360=($1359|0)==0;
 if($1360){var $1364=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1362=(((-$1358))|0);
 var $1363=$1362&7;
 var $1364=$1363;label=312;break;
 case 312: 
 var $1364;
 var $1365=(($tbase_245_i+$1364)|0);
 var $1366=$1365;
 var $1367=((($1356)-($1364))|0);
 HEAP32[((6992)>>2)]=$1366;
 HEAP32[((6980)>>2)]=$1367;
 var $1368=$1367|1;
 var $_sum_i_i_i=((($1364)+(4))|0);
 var $1369=(($tbase_245_i+$_sum_i_i_i)|0);
 var $1370=$1369;
 HEAP32[(($1370)>>2)]=$1368;
 var $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
 var $1371=(($tbase_245_i+$_sum2_i_i_i)|0);
 var $1372=$1371;
 HEAP32[(($1372)>>2)]=40;
 var $1373=HEAP32[((6960)>>2)];
 HEAP32[((6996)>>2)]=$1373;
 var $1374=(($1353+4)|0);
 var $1375=$1374;
 HEAP32[(($1375)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1354)>>2)]=HEAP32[((7416)>>2)];HEAP32[((($1354)+(4))>>2)]=HEAP32[((7420)>>2)];HEAP32[((($1354)+(8))>>2)]=HEAP32[((7424)>>2)];HEAP32[((($1354)+(12))>>2)]=HEAP32[((7428)>>2)];
 HEAP32[((7416)>>2)]=$tbase_245_i;
 HEAP32[((7420)>>2)]=$tsize_244_i;
 HEAP32[((7428)>>2)]=0;
 HEAP32[((7424)>>2)]=$1355;
 var $1376=(($1353+28)|0);
 var $1377=$1376;
 HEAP32[(($1377)>>2)]=7;
 var $1378=(($1353+32)|0);
 var $1379=($1378>>>0)<($1335>>>0);
 if($1379){var $1380=$1377;label=313;break;}else{label=314;break;}
 case 313: 
 var $1380;
 var $1381=(($1380+4)|0);
 HEAP32[(($1381)>>2)]=7;
 var $1382=(($1380+8)|0);
 var $1383=$1382;
 var $1384=($1383>>>0)<($1335>>>0);
 if($1384){var $1380=$1381;label=313;break;}else{label=314;break;}
 case 314: 
 var $1385=($1353|0)==($1327|0);
 if($1385){label=338;break;}else{label=315;break;}
 case 315: 
 var $1387=$1353;
 var $1388=$890;
 var $1389=((($1387)-($1388))|0);
 var $1390=(($1327+$1389)|0);
 var $_sum3_i_i=((($1389)+(4))|0);
 var $1391=(($1327+$_sum3_i_i)|0);
 var $1392=$1391;
 var $1393=HEAP32[(($1392)>>2)];
 var $1394=$1393&-2;
 HEAP32[(($1392)>>2)]=$1394;
 var $1395=$1389|1;
 var $1396=(($890+4)|0);
 HEAP32[(($1396)>>2)]=$1395;
 var $1397=$1390;
 HEAP32[(($1397)>>2)]=$1389;
 var $1398=$1389>>>3;
 var $1399=($1389>>>0)<256;
 if($1399){label=316;break;}else{label=321;break;}
 case 316: 
 var $1401=$1398<<1;
 var $1402=((7008+($1401<<2))|0);
 var $1403=$1402;
 var $1404=HEAP32[((6968)>>2)];
 var $1405=1<<$1398;
 var $1406=$1404&$1405;
 var $1407=($1406|0)==0;
 if($1407){label=317;break;}else{label=318;break;}
 case 317: 
 var $1409=$1404|$1405;
 HEAP32[((6968)>>2)]=$1409;
 var $_sum11_pre_i_i=((($1401)+(2))|0);
 var $_pre_i_i=((7008+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1403;var $_pre_phi_i_i=$_pre_i_i;label=320;break;
 case 318: 
 var $_sum12_i_i=((($1401)+(2))|0);
 var $1411=((7008+($_sum12_i_i<<2))|0);
 var $1412=HEAP32[(($1411)>>2)];
 var $1413=$1412;
 var $1414=HEAP32[((6984)>>2)];
 var $1415=($1413>>>0)<($1414>>>0);
 if($1415){label=319;break;}else{var $F_0_i_i=$1412;var $_pre_phi_i_i=$1411;label=320;break;}
 case 319: 
 _abort();
 throw "Reached an unreachable!";
 case 320: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$890;
 var $1418=(($F_0_i_i+12)|0);
 HEAP32[(($1418)>>2)]=$890;
 var $1419=(($890+8)|0);
 HEAP32[(($1419)>>2)]=$F_0_i_i;
 var $1420=(($890+12)|0);
 HEAP32[(($1420)>>2)]=$1403;
 label=338;break;
 case 321: 
 var $1422=$890;
 var $1423=$1389>>>8;
 var $1424=($1423|0)==0;
 if($1424){var $I1_0_i_i=0;label=324;break;}else{label=322;break;}
 case 322: 
 var $1426=($1389>>>0)>16777215;
 if($1426){var $I1_0_i_i=31;label=324;break;}else{label=323;break;}
 case 323: 
 var $1428=((($1423)+(1048320))|0);
 var $1429=$1428>>>16;
 var $1430=$1429&8;
 var $1431=$1423<<$1430;
 var $1432=((($1431)+(520192))|0);
 var $1433=$1432>>>16;
 var $1434=$1433&4;
 var $1435=$1434|$1430;
 var $1436=$1431<<$1434;
 var $1437=((($1436)+(245760))|0);
 var $1438=$1437>>>16;
 var $1439=$1438&2;
 var $1440=$1435|$1439;
 var $1441=(((14)-($1440))|0);
 var $1442=$1436<<$1439;
 var $1443=$1442>>>15;
 var $1444=((($1441)+($1443))|0);
 var $1445=$1444<<1;
 var $1446=((($1444)+(7))|0);
 var $1447=$1389>>>($1446>>>0);
 var $1448=$1447&1;
 var $1449=$1448|$1445;
 var $I1_0_i_i=$1449;label=324;break;
 case 324: 
 var $I1_0_i_i;
 var $1451=((7272+($I1_0_i_i<<2))|0);
 var $1452=(($890+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1452)>>2)]=$I1_0_c_i_i;
 var $1453=(($890+20)|0);
 HEAP32[(($1453)>>2)]=0;
 var $1454=(($890+16)|0);
 HEAP32[(($1454)>>2)]=0;
 var $1455=HEAP32[((6972)>>2)];
 var $1456=1<<$I1_0_i_i;
 var $1457=$1455&$1456;
 var $1458=($1457|0)==0;
 if($1458){label=325;break;}else{label=326;break;}
 case 325: 
 var $1460=$1455|$1456;
 HEAP32[((6972)>>2)]=$1460;
 HEAP32[(($1451)>>2)]=$1422;
 var $1461=(($890+24)|0);
 var $_c_i_i=$1451;
 HEAP32[(($1461)>>2)]=$_c_i_i;
 var $1462=(($890+12)|0);
 HEAP32[(($1462)>>2)]=$890;
 var $1463=(($890+8)|0);
 HEAP32[(($1463)>>2)]=$890;
 label=338;break;
 case 326: 
 var $1465=HEAP32[(($1451)>>2)];
 var $1466=($I1_0_i_i|0)==31;
 if($1466){var $1471=0;label=328;break;}else{label=327;break;}
 case 327: 
 var $1468=$I1_0_i_i>>>1;
 var $1469=(((25)-($1468))|0);
 var $1471=$1469;label=328;break;
 case 328: 
 var $1471;
 var $1472=$1389<<$1471;
 var $K2_0_i_i=$1472;var $T_0_i_i=$1465;label=329;break;
 case 329: 
 var $T_0_i_i;
 var $K2_0_i_i;
 var $1474=(($T_0_i_i+4)|0);
 var $1475=HEAP32[(($1474)>>2)];
 var $1476=$1475&-8;
 var $1477=($1476|0)==($1389|0);
 if($1477){label=334;break;}else{label=330;break;}
 case 330: 
 var $1479=$K2_0_i_i>>>31;
 var $1480=(($T_0_i_i+16+($1479<<2))|0);
 var $1481=HEAP32[(($1480)>>2)];
 var $1482=($1481|0)==0;
 var $1483=$K2_0_i_i<<1;
 if($1482){label=331;break;}else{var $K2_0_i_i=$1483;var $T_0_i_i=$1481;label=329;break;}
 case 331: 
 var $1485=$1480;
 var $1486=HEAP32[((6984)>>2)];
 var $1487=($1485>>>0)<($1486>>>0);
 if($1487){label=333;break;}else{label=332;break;}
 case 332: 
 HEAP32[(($1480)>>2)]=$1422;
 var $1489=(($890+24)|0);
 var $T_0_c8_i_i=$T_0_i_i;
 HEAP32[(($1489)>>2)]=$T_0_c8_i_i;
 var $1490=(($890+12)|0);
 HEAP32[(($1490)>>2)]=$890;
 var $1491=(($890+8)|0);
 HEAP32[(($1491)>>2)]=$890;
 label=338;break;
 case 333: 
 _abort();
 throw "Reached an unreachable!";
 case 334: 
 var $1494=(($T_0_i_i+8)|0);
 var $1495=HEAP32[(($1494)>>2)];
 var $1496=$T_0_i_i;
 var $1497=HEAP32[((6984)>>2)];
 var $1498=($1496>>>0)<($1497>>>0);
 if($1498){label=337;break;}else{label=335;break;}
 case 335: 
 var $1500=$1495;
 var $1501=($1500>>>0)<($1497>>>0);
 if($1501){label=337;break;}else{label=336;break;}
 case 336: 
 var $1503=(($1495+12)|0);
 HEAP32[(($1503)>>2)]=$1422;
 HEAP32[(($1494)>>2)]=$1422;
 var $1504=(($890+8)|0);
 var $_c7_i_i=$1495;
 HEAP32[(($1504)>>2)]=$_c7_i_i;
 var $1505=(($890+12)|0);
 var $T_0_c_i_i=$T_0_i_i;
 HEAP32[(($1505)>>2)]=$T_0_c_i_i;
 var $1506=(($890+24)|0);
 HEAP32[(($1506)>>2)]=0;
 label=338;break;
 case 337: 
 _abort();
 throw "Reached an unreachable!";
 case 338: 
 var $1507=HEAP32[((6980)>>2)];
 var $1508=($1507>>>0)>($nb_0>>>0);
 if($1508){label=339;break;}else{label=340;break;}
 case 339: 
 var $1510=((($1507)-($nb_0))|0);
 HEAP32[((6980)>>2)]=$1510;
 var $1511=HEAP32[((6992)>>2)];
 var $1512=$1511;
 var $1513=(($1512+$nb_0)|0);
 var $1514=$1513;
 HEAP32[((6992)>>2)]=$1514;
 var $1515=$1510|1;
 var $_sum_i134=((($nb_0)+(4))|0);
 var $1516=(($1512+$_sum_i134)|0);
 var $1517=$1516;
 HEAP32[(($1517)>>2)]=$1515;
 var $1518=$nb_0|3;
 var $1519=(($1511+4)|0);
 HEAP32[(($1519)>>2)]=$1518;
 var $1520=(($1511+8)|0);
 var $1521=$1520;
 var $mem_0=$1521;label=341;break;
 case 340: 
 var $1522=___errno_location();
 HEAP32[(($1522)>>2)]=12;
 var $mem_0=0;label=341;break;
 case 341: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }
}
Module["_malloc"] = _malloc;
function _free($mem){
 var label=0;
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=140;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((6984)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=139;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=139;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=140;break;}else{label=6;break;}
 case 6: 
 var $_sum232=(((-8)-($21))|0);
 var $24=(($mem+$_sum232)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=139;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((6988)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum276=((($_sum232)+(8))|0);
 var $35=(($mem+$_sum276)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum277=((($_sum232)+(12))|0);
 var $38=(($mem+$_sum277)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((7008+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((6968)>>2)];
 var $57=$56&$55;
 HEAP32[((6968)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre305=(($40+8)|0);
 var $_pre_phi306=$_pre305;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi306=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi306;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi306)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum266=((($_sum232)+(24))|0);
 var $70=(($mem+$_sum266)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum267=((($_sum232)+(12))|0);
 var $73=(($mem+$_sum267)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum273=((($_sum232)+(8))|0);
 var $78=(($mem+$_sum273)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum269=((($_sum232)+(20))|0);
 var $93=(($mem+$_sum269)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum268=((($_sum232)+(16))|0);
 var $98=(($mem+$_sum268)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum270=((($_sum232)+(28))|0);
 var $117=(($mem+$_sum270)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((7272+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=HEAP32[(($118)>>2)];
 var $125=1<<$124;
 var $126=$125^-1;
 var $127=HEAP32[((6972)>>2)];
 var $128=$127&$126;
 HEAP32[((6972)>>2)]=$128;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $130=$72;
 var $131=HEAP32[((6984)>>2)];
 var $132=($130>>>0)<($131>>>0);
 if($132){label=42;break;}else{label=39;break;}
 case 39: 
 var $134=(($72+16)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==($69|0);
 if($136){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($134)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $139=(($72+20)|0);
 HEAP32[(($139)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $142=($R_1|0)==0;
 if($142){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $144=$R_1;
 var $145=HEAP32[((6984)>>2)];
 var $146=($144>>>0)<($145>>>0);
 if($146){label=53;break;}else{label=45;break;}
 case 45: 
 var $148=(($R_1+24)|0);
 HEAP32[(($148)>>2)]=$72;
 var $_sum271=((($_sum232)+(16))|0);
 var $149=(($mem+$_sum271)|0);
 var $150=$149;
 var $151=HEAP32[(($150)>>2)];
 var $152=($151|0)==0;
 if($152){label=49;break;}else{label=46;break;}
 case 46: 
 var $154=$151;
 var $155=HEAP32[((6984)>>2)];
 var $156=($154>>>0)<($155>>>0);
 if($156){label=48;break;}else{label=47;break;}
 case 47: 
 var $158=(($R_1+16)|0);
 HEAP32[(($158)>>2)]=$151;
 var $159=(($151+24)|0);
 HEAP32[(($159)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum272=((($_sum232)+(20))|0);
 var $162=(($mem+$_sum272)|0);
 var $163=$162;
 var $164=HEAP32[(($163)>>2)];
 var $165=($164|0)==0;
 if($165){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $167=$164;
 var $168=HEAP32[((6984)>>2)];
 var $169=($167>>>0)<($168>>>0);
 if($169){label=52;break;}else{label=51;break;}
 case 51: 
 var $171=(($R_1+20)|0);
 HEAP32[(($171)>>2)]=$164;
 var $172=(($164+24)|0);
 HEAP32[(($172)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum233=((($14)-(4))|0);
 var $176=(($mem+$_sum233)|0);
 var $177=$176;
 var $178=HEAP32[(($177)>>2)];
 var $179=$178&3;
 var $180=($179|0)==3;
 if($180){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((6976)>>2)]=$26;
 var $182=HEAP32[(($177)>>2)];
 var $183=$182&-2;
 HEAP32[(($177)>>2)]=$183;
 var $184=$26|1;
 var $_sum264=((($_sum232)+(4))|0);
 var $185=(($mem+$_sum264)|0);
 var $186=$185;
 HEAP32[(($186)>>2)]=$184;
 var $187=$15;
 HEAP32[(($187)>>2)]=$26;
 label=140;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $189=$p_0;
 var $190=($189>>>0)<($15>>>0);
 if($190){label=57;break;}else{label=139;break;}
 case 57: 
 var $_sum263=((($14)-(4))|0);
 var $192=(($mem+$_sum263)|0);
 var $193=$192;
 var $194=HEAP32[(($193)>>2)];
 var $195=$194&1;
 var $phitmp=($195|0)==0;
 if($phitmp){label=139;break;}else{label=58;break;}
 case 58: 
 var $197=$194&2;
 var $198=($197|0)==0;
 if($198){label=59;break;}else{label=112;break;}
 case 59: 
 var $200=HEAP32[((6992)>>2)];
 var $201=($16|0)==($200|0);
 if($201){label=60;break;}else{label=62;break;}
 case 60: 
 var $203=HEAP32[((6980)>>2)];
 var $204=((($203)+($psize_0))|0);
 HEAP32[((6980)>>2)]=$204;
 HEAP32[((6992)>>2)]=$p_0;
 var $205=$204|1;
 var $206=(($p_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=HEAP32[((6988)>>2)];
 var $208=($p_0|0)==($207|0);
 if($208){label=61;break;}else{label=140;break;}
 case 61: 
 HEAP32[((6988)>>2)]=0;
 HEAP32[((6976)>>2)]=0;
 label=140;break;
 case 62: 
 var $211=HEAP32[((6988)>>2)];
 var $212=($16|0)==($211|0);
 if($212){label=63;break;}else{label=64;break;}
 case 63: 
 var $214=HEAP32[((6976)>>2)];
 var $215=((($214)+($psize_0))|0);
 HEAP32[((6976)>>2)]=$215;
 HEAP32[((6988)>>2)]=$p_0;
 var $216=$215|1;
 var $217=(($p_0+4)|0);
 HEAP32[(($217)>>2)]=$216;
 var $218=(($189+$215)|0);
 var $219=$218;
 HEAP32[(($219)>>2)]=$215;
 label=140;break;
 case 64: 
 var $221=$194&-8;
 var $222=((($221)+($psize_0))|0);
 var $223=$194>>>3;
 var $224=($194>>>0)<256;
 if($224){label=65;break;}else{label=77;break;}
 case 65: 
 var $226=(($mem+$14)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $_sum257258=$14|4;
 var $229=(($mem+$_sum257258)|0);
 var $230=$229;
 var $231=HEAP32[(($230)>>2)];
 var $232=$223<<1;
 var $233=((7008+($232<<2))|0);
 var $234=$233;
 var $235=($228|0)==($234|0);
 if($235){label=68;break;}else{label=66;break;}
 case 66: 
 var $237=$228;
 var $238=HEAP32[((6984)>>2)];
 var $239=($237>>>0)<($238>>>0);
 if($239){label=76;break;}else{label=67;break;}
 case 67: 
 var $241=(($228+12)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($242|0)==($16|0);
 if($243){label=68;break;}else{label=76;break;}
 case 68: 
 var $244=($231|0)==($228|0);
 if($244){label=69;break;}else{label=70;break;}
 case 69: 
 var $246=1<<$223;
 var $247=$246^-1;
 var $248=HEAP32[((6968)>>2)];
 var $249=$248&$247;
 HEAP32[((6968)>>2)]=$249;
 label=110;break;
 case 70: 
 var $251=($231|0)==($234|0);
 if($251){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre303=(($231+8)|0);
 var $_pre_phi304=$_pre303;label=74;break;
 case 72: 
 var $253=$231;
 var $254=HEAP32[((6984)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=75;break;}else{label=73;break;}
 case 73: 
 var $257=(($231+8)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($16|0);
 if($259){var $_pre_phi304=$257;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi304;
 var $260=(($228+12)|0);
 HEAP32[(($260)>>2)]=$231;
 HEAP32[(($_pre_phi304)>>2)]=$228;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $262=$15;
 var $_sum235=((($14)+(16))|0);
 var $263=(($mem+$_sum235)|0);
 var $264=$263;
 var $265=HEAP32[(($264)>>2)];
 var $_sum236237=$14|4;
 var $266=(($mem+$_sum236237)|0);
 var $267=$266;
 var $268=HEAP32[(($267)>>2)];
 var $269=($268|0)==($262|0);
 if($269){label=83;break;}else{label=78;break;}
 case 78: 
 var $271=(($mem+$14)|0);
 var $272=$271;
 var $273=HEAP32[(($272)>>2)];
 var $274=$273;
 var $275=HEAP32[((6984)>>2)];
 var $276=($274>>>0)<($275>>>0);
 if($276){label=82;break;}else{label=79;break;}
 case 79: 
 var $278=(($273+12)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=($279|0)==($262|0);
 if($280){label=80;break;}else{label=82;break;}
 case 80: 
 var $282=(($268+8)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==($262|0);
 if($284){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($278)>>2)]=$268;
 HEAP32[(($282)>>2)]=$273;
 var $R7_1=$268;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum239=((($14)+(12))|0);
 var $287=(($mem+$_sum239)|0);
 var $288=$287;
 var $289=HEAP32[(($288)>>2)];
 var $290=($289|0)==0;
 if($290){label=84;break;}else{var $R7_0=$289;var $RP9_0=$288;label=85;break;}
 case 84: 
 var $_sum238=((($14)+(8))|0);
 var $292=(($mem+$_sum238)|0);
 var $293=$292;
 var $294=HEAP32[(($293)>>2)];
 var $295=($294|0)==0;
 if($295){var $R7_1=0;label=90;break;}else{var $R7_0=$294;var $RP9_0=$293;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $296=(($R7_0+20)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=($297|0)==0;
 if($298){label=86;break;}else{var $R7_0=$297;var $RP9_0=$296;label=85;break;}
 case 86: 
 var $300=(($R7_0+16)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=($301|0)==0;
 if($302){label=87;break;}else{var $R7_0=$301;var $RP9_0=$300;label=85;break;}
 case 87: 
 var $304=$RP9_0;
 var $305=HEAP32[((6984)>>2)];
 var $306=($304>>>0)<($305>>>0);
 if($306){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $310=($265|0)==0;
 if($310){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum250=((($14)+(20))|0);
 var $312=(($mem+$_sum250)|0);
 var $313=$312;
 var $314=HEAP32[(($313)>>2)];
 var $315=((7272+($314<<2))|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=($262|0)==($316|0);
 if($317){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($315)>>2)]=$R7_1;
 var $cond298=($R7_1|0)==0;
 if($cond298){label=93;break;}else{label=100;break;}
 case 93: 
 var $319=HEAP32[(($313)>>2)];
 var $320=1<<$319;
 var $321=$320^-1;
 var $322=HEAP32[((6972)>>2)];
 var $323=$322&$321;
 HEAP32[((6972)>>2)]=$323;
 label=110;break;
 case 94: 
 var $325=$265;
 var $326=HEAP32[((6984)>>2)];
 var $327=($325>>>0)<($326>>>0);
 if($327){label=98;break;}else{label=95;break;}
 case 95: 
 var $329=(($265+16)|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=($330|0)==($262|0);
 if($331){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($329)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $334=(($265+20)|0);
 HEAP32[(($334)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $337=($R7_1|0)==0;
 if($337){label=110;break;}else{label=100;break;}
 case 100: 
 var $339=$R7_1;
 var $340=HEAP32[((6984)>>2)];
 var $341=($339>>>0)<($340>>>0);
 if($341){label=109;break;}else{label=101;break;}
 case 101: 
 var $343=(($R7_1+24)|0);
 HEAP32[(($343)>>2)]=$265;
 var $_sum251=((($14)+(8))|0);
 var $344=(($mem+$_sum251)|0);
 var $345=$344;
 var $346=HEAP32[(($345)>>2)];
 var $347=($346|0)==0;
 if($347){label=105;break;}else{label=102;break;}
 case 102: 
 var $349=$346;
 var $350=HEAP32[((6984)>>2)];
 var $351=($349>>>0)<($350>>>0);
 if($351){label=104;break;}else{label=103;break;}
 case 103: 
 var $353=(($R7_1+16)|0);
 HEAP32[(($353)>>2)]=$346;
 var $354=(($346+24)|0);
 HEAP32[(($354)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum252=((($14)+(12))|0);
 var $357=(($mem+$_sum252)|0);
 var $358=$357;
 var $359=HEAP32[(($358)>>2)];
 var $360=($359|0)==0;
 if($360){label=110;break;}else{label=106;break;}
 case 106: 
 var $362=$359;
 var $363=HEAP32[((6984)>>2)];
 var $364=($362>>>0)<($363>>>0);
 if($364){label=108;break;}else{label=107;break;}
 case 107: 
 var $366=(($R7_1+20)|0);
 HEAP32[(($366)>>2)]=$359;
 var $367=(($359+24)|0);
 HEAP32[(($367)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $371=$222|1;
 var $372=(($p_0+4)|0);
 HEAP32[(($372)>>2)]=$371;
 var $373=(($189+$222)|0);
 var $374=$373;
 HEAP32[(($374)>>2)]=$222;
 var $375=HEAP32[((6988)>>2)];
 var $376=($p_0|0)==($375|0);
 if($376){label=111;break;}else{var $psize_1=$222;label=113;break;}
 case 111: 
 HEAP32[((6976)>>2)]=$222;
 label=140;break;
 case 112: 
 var $379=$194&-2;
 HEAP32[(($193)>>2)]=$379;
 var $380=$psize_0|1;
 var $381=(($p_0+4)|0);
 HEAP32[(($381)>>2)]=$380;
 var $382=(($189+$psize_0)|0);
 var $383=$382;
 HEAP32[(($383)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $385=$psize_1>>>3;
 var $386=($psize_1>>>0)<256;
 if($386){label=114;break;}else{label=119;break;}
 case 114: 
 var $388=$385<<1;
 var $389=((7008+($388<<2))|0);
 var $390=$389;
 var $391=HEAP32[((6968)>>2)];
 var $392=1<<$385;
 var $393=$391&$392;
 var $394=($393|0)==0;
 if($394){label=115;break;}else{label=116;break;}
 case 115: 
 var $396=$391|$392;
 HEAP32[((6968)>>2)]=$396;
 var $_sum248_pre=((($388)+(2))|0);
 var $_pre=((7008+($_sum248_pre<<2))|0);
 var $F16_0=$390;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum249=((($388)+(2))|0);
 var $398=((7008+($_sum249<<2))|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=$399;
 var $401=HEAP32[((6984)>>2)];
 var $402=($400>>>0)<($401>>>0);
 if($402){label=117;break;}else{var $F16_0=$399;var $_pre_phi=$398;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $405=(($F16_0+12)|0);
 HEAP32[(($405)>>2)]=$p_0;
 var $406=(($p_0+8)|0);
 HEAP32[(($406)>>2)]=$F16_0;
 var $407=(($p_0+12)|0);
 HEAP32[(($407)>>2)]=$390;
 label=140;break;
 case 119: 
 var $409=$p_0;
 var $410=$psize_1>>>8;
 var $411=($410|0)==0;
 if($411){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $413=($psize_1>>>0)>16777215;
 if($413){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $415=((($410)+(1048320))|0);
 var $416=$415>>>16;
 var $417=$416&8;
 var $418=$410<<$417;
 var $419=((($418)+(520192))|0);
 var $420=$419>>>16;
 var $421=$420&4;
 var $422=$421|$417;
 var $423=$418<<$421;
 var $424=((($423)+(245760))|0);
 var $425=$424>>>16;
 var $426=$425&2;
 var $427=$422|$426;
 var $428=(((14)-($427))|0);
 var $429=$423<<$426;
 var $430=$429>>>15;
 var $431=((($428)+($430))|0);
 var $432=$431<<1;
 var $433=((($431)+(7))|0);
 var $434=$psize_1>>>($433>>>0);
 var $435=$434&1;
 var $436=$435|$432;
 var $I18_0=$436;label=122;break;
 case 122: 
 var $I18_0;
 var $438=((7272+($I18_0<<2))|0);
 var $439=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 var $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 var $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 var $442=HEAP32[((6972)>>2)];
 var $443=1<<$I18_0;
 var $444=$442&$443;
 var $445=($444|0)==0;
 if($445){label=123;break;}else{label=124;break;}
 case 123: 
 var $447=$442|$443;
 HEAP32[((6972)>>2)]=$447;
 HEAP32[(($438)>>2)]=$409;
 var $448=(($p_0+24)|0);
 var $_c=$438;
 HEAP32[(($448)>>2)]=$_c;
 var $449=(($p_0+12)|0);
 HEAP32[(($449)>>2)]=$p_0;
 var $450=(($p_0+8)|0);
 HEAP32[(($450)>>2)]=$p_0;
 label=136;break;
 case 124: 
 var $452=HEAP32[(($438)>>2)];
 var $453=($I18_0|0)==31;
 if($453){var $458=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $455=$I18_0>>>1;
 var $456=(((25)-($455))|0);
 var $458=$456;label=126;break;
 case 126: 
 var $458;
 var $459=$psize_1<<$458;
 var $K19_0=$459;var $T_0=$452;label=127;break;
 case 127: 
 var $T_0;
 var $K19_0;
 var $461=(($T_0+4)|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=$462&-8;
 var $464=($463|0)==($psize_1|0);
 if($464){label=132;break;}else{label=128;break;}
 case 128: 
 var $466=$K19_0>>>31;
 var $467=(($T_0+16+($466<<2))|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=($468|0)==0;
 var $470=$K19_0<<1;
 if($469){label=129;break;}else{var $K19_0=$470;var $T_0=$468;label=127;break;}
 case 129: 
 var $472=$467;
 var $473=HEAP32[((6984)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=131;break;}else{label=130;break;}
 case 130: 
 HEAP32[(($467)>>2)]=$409;
 var $476=(($p_0+24)|0);
 var $T_0_c245=$T_0;
 HEAP32[(($476)>>2)]=$T_0_c245;
 var $477=(($p_0+12)|0);
 HEAP32[(($477)>>2)]=$p_0;
 var $478=(($p_0+8)|0);
 HEAP32[(($478)>>2)]=$p_0;
 label=136;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 var $481=(($T_0+8)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$T_0;
 var $484=HEAP32[((6984)>>2)];
 var $485=($483>>>0)<($484>>>0);
 if($485){label=135;break;}else{label=133;break;}
 case 133: 
 var $487=$482;
 var $488=($487>>>0)<($484>>>0);
 if($488){label=135;break;}else{label=134;break;}
 case 134: 
 var $490=(($482+12)|0);
 HEAP32[(($490)>>2)]=$409;
 HEAP32[(($481)>>2)]=$409;
 var $491=(($p_0+8)|0);
 var $_c244=$482;
 HEAP32[(($491)>>2)]=$_c244;
 var $492=(($p_0+12)|0);
 var $T_0_c=$T_0;
 HEAP32[(($492)>>2)]=$T_0_c;
 var $493=(($p_0+24)|0);
 HEAP32[(($493)>>2)]=0;
 label=136;break;
 case 135: 
 _abort();
 throw "Reached an unreachable!";
 case 136: 
 var $495=HEAP32[((7000)>>2)];
 var $496=((($495)-(1))|0);
 HEAP32[((7000)>>2)]=$496;
 var $497=($496|0)==0;
 if($497){var $sp_0_in_i=7424;label=137;break;}else{label=140;break;}
 case 137: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $498=($sp_0_i|0)==0;
 var $499=(($sp_0_i+8)|0);
 if($498){label=138;break;}else{var $sp_0_in_i=$499;label=137;break;}
 case 138: 
 HEAP32[((7000)>>2)]=-1;
 label=140;break;
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 return;
  default: assert(0, "bad label: " + label);
 }
}
Module["_free"] = _free;
// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================
// EMSCRIPTEN_END_FUNCS
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    Module['calledRun'] = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
//@ sourceMappingURL=empcre.js.map